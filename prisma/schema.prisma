generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  LEAD_DOCTOR
  DOCTOR
  PATIENT
}

model Tenant {
  id    String  @id @default(cuid())
  name  String?
  users User[]
}

model User {
  id String @id @default(cuid())

  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  role           Role            @default(DOCTOR)
  patientDetails PatientDetails?

  phone   String?
  address Address?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PatientDetails {
  id String @id @default(cuid())

  user      User   @relation(fields: [patientId], references: [id])
  patientId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          String @id @default(cuid())
  street      String
  city        String
  zip         String
  countryCode String
  user        User   @relation(fields: [id], references: [id])
}
