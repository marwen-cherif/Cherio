generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  LEAD_DOCTOR
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  MISSED
}

model Tenant {
  id   String @id @default(cuid())
  name String

  patients     PatientDetails[]
  staffMembers StaffMember[]
  FeatureFlag  FeatureFlag[]

  logo String?

  billingAddress Address?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  predefinedActTypes PredefinedActType[]
}

model User {
  id   String @id @default(cuid())
  role Role   @default(LEAD_DOCTOR)

  firstName String?
  lastName  String?

  email         String    @unique
  emailVerified DateTime?

  image String?

  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  locale        String          @default("en")

  patientDetails PatientDetails[]
  staffMember    StaffMember?

  phone     String?
  address   Address?
  birthDate DateTime? @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model StaffMember {
  id String @id @default(cuid())

  user User @relation(fields: [id], references: [id])

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String?

  createdDocuments Document[] @relation(name: "CreatedBy")
  updatedDocuments Document[] @relation(name: "UpdatedBy")

  createdNotes Note[] @relation(name: "CreatedBy")
  updatedNotes Note[] @relation(name: "UpdatedBy")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]

  isDeleted Boolean @default(false)
}

model PatientDetails {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  notes Note[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]

  isDeleted       Boolean           @default(false)
  AccountingEntry AccountingEntry[]
  Quotation       Quotation[]

  @@unique([userId, tenantId])
}

enum PaymentMethod {
  CASH
  CARD
  CHEQUE
  TRANSFER
}

enum AccountingEntryType {
  CREDIT
  DEBIT
}

model AccountingEntry {
  id String @id @default(cuid())

  patientDetails   PatientDetails @relation(fields: [patientDetailsId], references: [id])
  patientDetailsId String

  amount   Decimal  @db.Money
  currency Currency

  paymentMethod        PaymentMethod
  transactionReference String?

  type AccountingEntryType

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Address {
  id                    String  @id @default(cuid())
  street                String
  city                  String
  zip                   String
  countryCode           String
  additionalAddressLine String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  tenantId String? @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Note {
  id      String @id @default(cuid())
  content String

  createdAt   DateTime    @default(now())
  createdBy   StaffMember @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById String

  updatedAt   DateTime?    @updatedAt
  updatedBy   StaffMember? @relation(name: "UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  patientDetails   PatientDetails @relation(fields: [patientDetailsId], references: [id])
  patientDetailsId String

  files       Document[]
  Appointment Appointment[]

  isDeleted Boolean @default(false)
}

model Document {
  id   String @id @default(cuid())
  name String
  path String

  createdAt   DateTime    @default(now())
  createdBy   StaffMember @relation(name: "CreatedBy", fields: [createdById], references: [id])
  createdById String

  updatedAt   DateTime?    @updatedAt
  updatedBy   StaffMember? @relation(name: "UpdatedBy", fields: [updatedById], references: [id])
  updatedById String?

  contentType String

  note   Note?   @relation(fields: [noteId], references: [id])
  noteId String?

  visibleTo Role[]

  quotation   Quotation? @relation(fields: [quotationId], references: [id])
  quotationId String?    @unique
}

model Appointment {
  id String @id @default(cuid())

  status AppointmentStatus

  patientDetails   PatientDetails @relation(fields: [patientDetailsId], references: [id])
  patientDetailsId String

  staffMember   StaffMember @relation(fields: [staffMemberId], references: [id])
  staffMemberId String

  startAt DateTime
  endAt   DateTime

  reportNote   Note?   @relation(fields: [reportNoteId], references: [id])
  reportNoteId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum FeatureFlagKey {
  PERIODONTAL_MODULE
}

model FeatureFlag {
  id        String         @default(cuid())
  key       FeatureFlagKey
  isEnabled Boolean

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([id, key, tenantId])
}

enum Currency {
  EUR
  TND
  USD
  CAD
}

model PredefinedActType {
  id   String @id @default(cuid())
  name String

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  price    Decimal  @db.Money
  currency Currency

  predefinedActSubTypes PredefinedActSubTypes[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  QuotationLine QuotationLine[]
}

model PredefinedActSubTypes {
  id   String @id @default(cuid())
  name String

  price    Decimal  @db.Money
  currency Currency

  predefinedActType   PredefinedActType @relation(fields: [predefinedActTypeId], references: [id])
  predefinedActTypeId String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  QuotationLine QuotationLine[]
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  PAID
}

model Quotation {
  id String @id @default(cuid())

  patientDetails   PatientDetails @relation(fields: [patientDetailsId], references: [id])
  patientDetailsId String

  name   String
  status QuotationStatus

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quotationLines QuotationLine[]

  document Document?
}

model QuotationLine {
  id String @id @default(cuid())

  quotation   Quotation @relation(fields: [quotationId], references: [id])
  quotationId String

  comment  String
  quantity Int

  unitPrice Decimal  @db.Money
  currency  Currency

  actType   PredefinedActType @relation(fields: [actTypeId], references: [id])
  actTypeId String

  subActType   PredefinedActSubTypes? @relation(fields: [subActTypeId], references: [id])
  subActTypeId String?

  forecastDate DateTime? @db.Date

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
