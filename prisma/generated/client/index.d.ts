
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model StaffMember
 * 
 */
export type StaffMember = $Result.DefaultSelection<Prisma.$StaffMemberPayload>
/**
 * Model PatientDetails
 * 
 */
export type PatientDetails = $Result.DefaultSelection<Prisma.$PatientDetailsPayload>
/**
 * Model AccountingEntry
 * 
 */
export type AccountingEntry = $Result.DefaultSelection<Prisma.$AccountingEntryPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Authenticator
 * 
 */
export type Authenticator = $Result.DefaultSelection<Prisma.$AuthenticatorPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model Document
 * 
 */
export type Document = $Result.DefaultSelection<Prisma.$DocumentPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model FeatureFlag
 * 
 */
export type FeatureFlag = $Result.DefaultSelection<Prisma.$FeatureFlagPayload>
/**
 * Model PredefinedActType
 * 
 */
export type PredefinedActType = $Result.DefaultSelection<Prisma.$PredefinedActTypePayload>
/**
 * Model PredefinedActSubTypes
 * 
 */
export type PredefinedActSubTypes = $Result.DefaultSelection<Prisma.$PredefinedActSubTypesPayload>
/**
 * Model Quotation
 * 
 */
export type Quotation = $Result.DefaultSelection<Prisma.$QuotationPayload>
/**
 * Model QuotationLine
 * 
 */
export type QuotationLine = $Result.DefaultSelection<Prisma.$QuotationLinePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  LEAD_DOCTOR: 'LEAD_DOCTOR',
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Currency: {
  EUR: 'EUR',
  TND: 'TND',
  USD: 'USD',
  CAD: 'CAD'
};

export type Currency = (typeof Currency)[keyof typeof Currency]


export const PaymentMethod: {
  CASH: 'CASH',
  CARD: 'CARD',
  CHEQUE: 'CHEQUE',
  TRANSFER: 'TRANSFER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const AccountingEntryType: {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

export type AccountingEntryType = (typeof AccountingEntryType)[keyof typeof AccountingEntryType]


export const AppointmentStatus: {
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  MISSED: 'MISSED'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const FeatureFlagKey: {
  PERIODONTAL_MODULE: 'PERIODONTAL_MODULE'
};

export type FeatureFlagKey = (typeof FeatureFlagKey)[keyof typeof FeatureFlagKey]


export const QuotationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  PAID: 'PAID'
};

export type QuotationStatus = (typeof QuotationStatus)[keyof typeof QuotationStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Currency = $Enums.Currency

export const Currency: typeof $Enums.Currency

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type AccountingEntryType = $Enums.AccountingEntryType

export const AccountingEntryType: typeof $Enums.AccountingEntryType

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type FeatureFlagKey = $Enums.FeatureFlagKey

export const FeatureFlagKey: typeof $Enums.FeatureFlagKey

export type QuotationStatus = $Enums.QuotationStatus

export const QuotationStatus: typeof $Enums.QuotationStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tenants
 * const tenants = await prisma.tenant.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tenants
   * const tenants = await prisma.tenant.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.staffMember`: Exposes CRUD operations for the **StaffMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffMembers
    * const staffMembers = await prisma.staffMember.findMany()
    * ```
    */
  get staffMember(): Prisma.StaffMemberDelegate<ExtArgs>;

  /**
   * `prisma.patientDetails`: Exposes CRUD operations for the **PatientDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientDetails
    * const patientDetails = await prisma.patientDetails.findMany()
    * ```
    */
  get patientDetails(): Prisma.PatientDetailsDelegate<ExtArgs>;

  /**
   * `prisma.accountingEntry`: Exposes CRUD operations for the **AccountingEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccountingEntries
    * const accountingEntries = await prisma.accountingEntry.findMany()
    * ```
    */
  get accountingEntry(): Prisma.AccountingEntryDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.authenticator`: Exposes CRUD operations for the **Authenticator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Authenticators
    * const authenticators = await prisma.authenticator.findMany()
    * ```
    */
  get authenticator(): Prisma.AuthenticatorDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs>;

  /**
   * `prisma.document`: Exposes CRUD operations for the **Document** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Documents
    * const documents = await prisma.document.findMany()
    * ```
    */
  get document(): Prisma.DocumentDelegate<ExtArgs>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs>;

  /**
   * `prisma.featureFlag`: Exposes CRUD operations for the **FeatureFlag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeatureFlags
    * const featureFlags = await prisma.featureFlag.findMany()
    * ```
    */
  get featureFlag(): Prisma.FeatureFlagDelegate<ExtArgs>;

  /**
   * `prisma.predefinedActType`: Exposes CRUD operations for the **PredefinedActType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredefinedActTypes
    * const predefinedActTypes = await prisma.predefinedActType.findMany()
    * ```
    */
  get predefinedActType(): Prisma.PredefinedActTypeDelegate<ExtArgs>;

  /**
   * `prisma.predefinedActSubTypes`: Exposes CRUD operations for the **PredefinedActSubTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PredefinedActSubTypes
    * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findMany()
    * ```
    */
  get predefinedActSubTypes(): Prisma.PredefinedActSubTypesDelegate<ExtArgs>;

  /**
   * `prisma.quotation`: Exposes CRUD operations for the **Quotation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quotations
    * const quotations = await prisma.quotation.findMany()
    * ```
    */
  get quotation(): Prisma.QuotationDelegate<ExtArgs>;

  /**
   * `prisma.quotationLine`: Exposes CRUD operations for the **QuotationLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuotationLines
    * const quotationLines = await prisma.quotationLine.findMany()
    * ```
    */
  get quotationLine(): Prisma.QuotationLineDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Tenant: 'Tenant',
    User: 'User',
    StaffMember: 'StaffMember',
    PatientDetails: 'PatientDetails',
    AccountingEntry: 'AccountingEntry',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Authenticator: 'Authenticator',
    Address: 'Address',
    Note: 'Note',
    Document: 'Document',
    Appointment: 'Appointment',
    FeatureFlag: 'FeatureFlag',
    PredefinedActType: 'PredefinedActType',
    PredefinedActSubTypes: 'PredefinedActSubTypes',
    Quotation: 'Quotation',
    QuotationLine: 'QuotationLine'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tenant" | "user" | "staffMember" | "patientDetails" | "accountingEntry" | "account" | "session" | "verificationToken" | "authenticator" | "address" | "note" | "document" | "appointment" | "featureFlag" | "predefinedActType" | "predefinedActSubTypes" | "quotation" | "quotationLine"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      StaffMember: {
        payload: Prisma.$StaffMemberPayload<ExtArgs>
        fields: Prisma.StaffMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          findFirst: {
            args: Prisma.StaffMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          findMany: {
            args: Prisma.StaffMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>[]
          }
          create: {
            args: Prisma.StaffMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          createMany: {
            args: Prisma.StaffMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>[]
          }
          delete: {
            args: Prisma.StaffMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          update: {
            args: Prisma.StaffMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          deleteMany: {
            args: Prisma.StaffMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StaffMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffMemberPayload>
          }
          aggregate: {
            args: Prisma.StaffMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffMember>
          }
          groupBy: {
            args: Prisma.StaffMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffMemberCountArgs<ExtArgs>
            result: $Utils.Optional<StaffMemberCountAggregateOutputType> | number
          }
        }
      }
      PatientDetails: {
        payload: Prisma.$PatientDetailsPayload<ExtArgs>
        fields: Prisma.PatientDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          findFirst: {
            args: Prisma.PatientDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          findMany: {
            args: Prisma.PatientDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>[]
          }
          create: {
            args: Prisma.PatientDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          createMany: {
            args: Prisma.PatientDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>[]
          }
          delete: {
            args: Prisma.PatientDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          update: {
            args: Prisma.PatientDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          deleteMany: {
            args: Prisma.PatientDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientDetailsPayload>
          }
          aggregate: {
            args: Prisma.PatientDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientDetails>
          }
          groupBy: {
            args: Prisma.PatientDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<PatientDetailsCountAggregateOutputType> | number
          }
        }
      }
      AccountingEntry: {
        payload: Prisma.$AccountingEntryPayload<ExtArgs>
        fields: Prisma.AccountingEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountingEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountingEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          findFirst: {
            args: Prisma.AccountingEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountingEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          findMany: {
            args: Prisma.AccountingEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>[]
          }
          create: {
            args: Prisma.AccountingEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          createMany: {
            args: Prisma.AccountingEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountingEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>[]
          }
          delete: {
            args: Prisma.AccountingEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          update: {
            args: Prisma.AccountingEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          deleteMany: {
            args: Prisma.AccountingEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountingEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountingEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountingEntryPayload>
          }
          aggregate: {
            args: Prisma.AccountingEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccountingEntry>
          }
          groupBy: {
            args: Prisma.AccountingEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountingEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountingEntryCountArgs<ExtArgs>
            result: $Utils.Optional<AccountingEntryCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Authenticator: {
        payload: Prisma.$AuthenticatorPayload<ExtArgs>
        fields: Prisma.AuthenticatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuthenticatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuthenticatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          findFirst: {
            args: Prisma.AuthenticatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuthenticatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          findMany: {
            args: Prisma.AuthenticatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[]
          }
          create: {
            args: Prisma.AuthenticatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          createMany: {
            args: Prisma.AuthenticatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuthenticatorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>[]
          }
          delete: {
            args: Prisma.AuthenticatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          update: {
            args: Prisma.AuthenticatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          deleteMany: {
            args: Prisma.AuthenticatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuthenticatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuthenticatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuthenticatorPayload>
          }
          aggregate: {
            args: Prisma.AuthenticatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuthenticator>
          }
          groupBy: {
            args: Prisma.AuthenticatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthenticatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuthenticatorCountArgs<ExtArgs>
            result: $Utils.Optional<AuthenticatorCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      Document: {
        payload: Prisma.$DocumentPayload<ExtArgs>
        fields: Prisma.DocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findFirst: {
            args: Prisma.DocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          findMany: {
            args: Prisma.DocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          create: {
            args: Prisma.DocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          createMany: {
            args: Prisma.DocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>[]
          }
          delete: {
            args: Prisma.DocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          update: {
            args: Prisma.DocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          deleteMany: {
            args: Prisma.DocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DocumentPayload>
          }
          aggregate: {
            args: Prisma.DocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDocument>
          }
          groupBy: {
            args: Prisma.DocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DocumentCountArgs<ExtArgs>
            result: $Utils.Optional<DocumentCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      FeatureFlag: {
        payload: Prisma.$FeatureFlagPayload<ExtArgs>
        fields: Prisma.FeatureFlagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeatureFlagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeatureFlagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          findFirst: {
            args: Prisma.FeatureFlagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeatureFlagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          findMany: {
            args: Prisma.FeatureFlagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>[]
          }
          create: {
            args: Prisma.FeatureFlagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          createMany: {
            args: Prisma.FeatureFlagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeatureFlagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>[]
          }
          delete: {
            args: Prisma.FeatureFlagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          update: {
            args: Prisma.FeatureFlagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          deleteMany: {
            args: Prisma.FeatureFlagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeatureFlagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeatureFlagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeatureFlagPayload>
          }
          aggregate: {
            args: Prisma.FeatureFlagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeatureFlag>
          }
          groupBy: {
            args: Prisma.FeatureFlagGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeatureFlagGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeatureFlagCountArgs<ExtArgs>
            result: $Utils.Optional<FeatureFlagCountAggregateOutputType> | number
          }
        }
      }
      PredefinedActType: {
        payload: Prisma.$PredefinedActTypePayload<ExtArgs>
        fields: Prisma.PredefinedActTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredefinedActTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredefinedActTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          findFirst: {
            args: Prisma.PredefinedActTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredefinedActTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          findMany: {
            args: Prisma.PredefinedActTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>[]
          }
          create: {
            args: Prisma.PredefinedActTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          createMany: {
            args: Prisma.PredefinedActTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredefinedActTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>[]
          }
          delete: {
            args: Prisma.PredefinedActTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          update: {
            args: Prisma.PredefinedActTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          deleteMany: {
            args: Prisma.PredefinedActTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredefinedActTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PredefinedActTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActTypePayload>
          }
          aggregate: {
            args: Prisma.PredefinedActTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredefinedActType>
          }
          groupBy: {
            args: Prisma.PredefinedActTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredefinedActTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredefinedActTypeCountArgs<ExtArgs>
            result: $Utils.Optional<PredefinedActTypeCountAggregateOutputType> | number
          }
        }
      }
      PredefinedActSubTypes: {
        payload: Prisma.$PredefinedActSubTypesPayload<ExtArgs>
        fields: Prisma.PredefinedActSubTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PredefinedActSubTypesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PredefinedActSubTypesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          findFirst: {
            args: Prisma.PredefinedActSubTypesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PredefinedActSubTypesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          findMany: {
            args: Prisma.PredefinedActSubTypesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>[]
          }
          create: {
            args: Prisma.PredefinedActSubTypesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          createMany: {
            args: Prisma.PredefinedActSubTypesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PredefinedActSubTypesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>[]
          }
          delete: {
            args: Prisma.PredefinedActSubTypesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          update: {
            args: Prisma.PredefinedActSubTypesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          deleteMany: {
            args: Prisma.PredefinedActSubTypesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PredefinedActSubTypesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PredefinedActSubTypesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PredefinedActSubTypesPayload>
          }
          aggregate: {
            args: Prisma.PredefinedActSubTypesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePredefinedActSubTypes>
          }
          groupBy: {
            args: Prisma.PredefinedActSubTypesGroupByArgs<ExtArgs>
            result: $Utils.Optional<PredefinedActSubTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PredefinedActSubTypesCountArgs<ExtArgs>
            result: $Utils.Optional<PredefinedActSubTypesCountAggregateOutputType> | number
          }
        }
      }
      Quotation: {
        payload: Prisma.$QuotationPayload<ExtArgs>
        fields: Prisma.QuotationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuotationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuotationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          findFirst: {
            args: Prisma.QuotationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuotationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          findMany: {
            args: Prisma.QuotationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>[]
          }
          create: {
            args: Prisma.QuotationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          createMany: {
            args: Prisma.QuotationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuotationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>[]
          }
          delete: {
            args: Prisma.QuotationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          update: {
            args: Prisma.QuotationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          deleteMany: {
            args: Prisma.QuotationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuotationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuotationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationPayload>
          }
          aggregate: {
            args: Prisma.QuotationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuotation>
          }
          groupBy: {
            args: Prisma.QuotationGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuotationGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuotationCountArgs<ExtArgs>
            result: $Utils.Optional<QuotationCountAggregateOutputType> | number
          }
        }
      }
      QuotationLine: {
        payload: Prisma.$QuotationLinePayload<ExtArgs>
        fields: Prisma.QuotationLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuotationLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuotationLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          findFirst: {
            args: Prisma.QuotationLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuotationLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          findMany: {
            args: Prisma.QuotationLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>[]
          }
          create: {
            args: Prisma.QuotationLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          createMany: {
            args: Prisma.QuotationLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuotationLineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>[]
          }
          delete: {
            args: Prisma.QuotationLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          update: {
            args: Prisma.QuotationLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          deleteMany: {
            args: Prisma.QuotationLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuotationLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuotationLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuotationLinePayload>
          }
          aggregate: {
            args: Prisma.QuotationLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuotationLine>
          }
          groupBy: {
            args: Prisma.QuotationLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuotationLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuotationLineCountArgs<ExtArgs>
            result: $Utils.Optional<QuotationLineCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TenantCountOutputType
   */

  export type TenantCountOutputType = {
    patients: number
    staffMembers: number
    FeatureFlag: number
    predefinedActTypes: number
  }

  export type TenantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | TenantCountOutputTypeCountPatientsArgs
    staffMembers?: boolean | TenantCountOutputTypeCountStaffMembersArgs
    FeatureFlag?: boolean | TenantCountOutputTypeCountFeatureFlagArgs
    predefinedActTypes?: boolean | TenantCountOutputTypeCountPredefinedActTypesArgs
  }

  // Custom InputTypes
  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TenantCountOutputType
     */
    select?: TenantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientDetailsWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountStaffMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffMemberWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountFeatureFlagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureFlagWhereInput
  }

  /**
   * TenantCountOutputType without action
   */
  export type TenantCountOutputTypeCountPredefinedActTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredefinedActTypeWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    Authenticator: number
    patientDetails: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    Authenticator?: boolean | UserCountOutputTypeCountAuthenticatorArgs
    patientDetails?: boolean | UserCountOutputTypeCountPatientDetailsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuthenticatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthenticatorWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientDetailsWhereInput
  }


  /**
   * Count Type StaffMemberCountOutputType
   */

  export type StaffMemberCountOutputType = {
    createdDocuments: number
    updatedDocuments: number
    createdNotes: number
    updatedNotes: number
    Appointment: number
  }

  export type StaffMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdDocuments?: boolean | StaffMemberCountOutputTypeCountCreatedDocumentsArgs
    updatedDocuments?: boolean | StaffMemberCountOutputTypeCountUpdatedDocumentsArgs
    createdNotes?: boolean | StaffMemberCountOutputTypeCountCreatedNotesArgs
    updatedNotes?: boolean | StaffMemberCountOutputTypeCountUpdatedNotesArgs
    Appointment?: boolean | StaffMemberCountOutputTypeCountAppointmentArgs
  }

  // Custom InputTypes
  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMemberCountOutputType
     */
    select?: StaffMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeCountCreatedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeCountUpdatedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeCountCreatedNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeCountUpdatedNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * StaffMemberCountOutputType without action
   */
  export type StaffMemberCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type PatientDetailsCountOutputType
   */

  export type PatientDetailsCountOutputType = {
    notes: number
    Appointment: number
    AccountingEntry: number
    Quotation: number
  }

  export type PatientDetailsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | PatientDetailsCountOutputTypeCountNotesArgs
    Appointment?: boolean | PatientDetailsCountOutputTypeCountAppointmentArgs
    AccountingEntry?: boolean | PatientDetailsCountOutputTypeCountAccountingEntryArgs
    Quotation?: boolean | PatientDetailsCountOutputTypeCountQuotationArgs
  }

  // Custom InputTypes
  /**
   * PatientDetailsCountOutputType without action
   */
  export type PatientDetailsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetailsCountOutputType
     */
    select?: PatientDetailsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientDetailsCountOutputType without action
   */
  export type PatientDetailsCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * PatientDetailsCountOutputType without action
   */
  export type PatientDetailsCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientDetailsCountOutputType without action
   */
  export type PatientDetailsCountOutputTypeCountAccountingEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountingEntryWhereInput
  }

  /**
   * PatientDetailsCountOutputType without action
   */
  export type PatientDetailsCountOutputTypeCountQuotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationWhereInput
  }


  /**
   * Count Type NoteCountOutputType
   */

  export type NoteCountOutputType = {
    files: number
    Appointment: number
  }

  export type NoteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | NoteCountOutputTypeCountFilesArgs
    Appointment?: boolean | NoteCountOutputTypeCountAppointmentArgs
  }

  // Custom InputTypes
  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoteCountOutputType
     */
    select?: NoteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
  }

  /**
   * NoteCountOutputType without action
   */
  export type NoteCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type PredefinedActTypeCountOutputType
   */

  export type PredefinedActTypeCountOutputType = {
    predefinedActSubTypes: number
    QuotationLine: number
  }

  export type PredefinedActTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predefinedActSubTypes?: boolean | PredefinedActTypeCountOutputTypeCountPredefinedActSubTypesArgs
    QuotationLine?: boolean | PredefinedActTypeCountOutputTypeCountQuotationLineArgs
  }

  // Custom InputTypes
  /**
   * PredefinedActTypeCountOutputType without action
   */
  export type PredefinedActTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActTypeCountOutputType
     */
    select?: PredefinedActTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PredefinedActTypeCountOutputType without action
   */
  export type PredefinedActTypeCountOutputTypeCountPredefinedActSubTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredefinedActSubTypesWhereInput
  }

  /**
   * PredefinedActTypeCountOutputType without action
   */
  export type PredefinedActTypeCountOutputTypeCountQuotationLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationLineWhereInput
  }


  /**
   * Count Type PredefinedActSubTypesCountOutputType
   */

  export type PredefinedActSubTypesCountOutputType = {
    QuotationLine: number
  }

  export type PredefinedActSubTypesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    QuotationLine?: boolean | PredefinedActSubTypesCountOutputTypeCountQuotationLineArgs
  }

  // Custom InputTypes
  /**
   * PredefinedActSubTypesCountOutputType without action
   */
  export type PredefinedActSubTypesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypesCountOutputType
     */
    select?: PredefinedActSubTypesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PredefinedActSubTypesCountOutputType without action
   */
  export type PredefinedActSubTypesCountOutputTypeCountQuotationLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationLineWhereInput
  }


  /**
   * Count Type QuotationCountOutputType
   */

  export type QuotationCountOutputType = {
    quotationLines: number
  }

  export type QuotationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotationLines?: boolean | QuotationCountOutputTypeCountQuotationLinesArgs
  }

  // Custom InputTypes
  /**
   * QuotationCountOutputType without action
   */
  export type QuotationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationCountOutputType
     */
    select?: QuotationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuotationCountOutputType without action
   */
  export type QuotationCountOutputTypeCountQuotationLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationLineWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: string
    name: string
    logo: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: TenantCountAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patients?: boolean | Tenant$patientsArgs<ExtArgs>
    staffMembers?: boolean | Tenant$staffMembersArgs<ExtArgs>
    FeatureFlag?: boolean | Tenant$FeatureFlagArgs<ExtArgs>
    billingAddress?: boolean | Tenant$billingAddressArgs<ExtArgs>
    predefinedActTypes?: boolean | Tenant$predefinedActTypesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | Tenant$patientsArgs<ExtArgs>
    staffMembers?: boolean | Tenant$staffMembersArgs<ExtArgs>
    FeatureFlag?: boolean | Tenant$FeatureFlagArgs<ExtArgs>
    billingAddress?: boolean | Tenant$billingAddressArgs<ExtArgs>
    predefinedActTypes?: boolean | Tenant$predefinedActTypesArgs<ExtArgs>
    _count?: boolean | TenantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      patients: Prisma.$PatientDetailsPayload<ExtArgs>[]
      staffMembers: Prisma.$StaffMemberPayload<ExtArgs>[]
      FeatureFlag: Prisma.$FeatureFlagPayload<ExtArgs>[]
      billingAddress: Prisma.$AddressPayload<ExtArgs> | null
      predefinedActTypes: Prisma.$PredefinedActTypePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logo: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patients<T extends Tenant$patientsArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    staffMembers<T extends Tenant$staffMembersArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$staffMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findMany"> | Null>
    FeatureFlag<T extends Tenant$FeatureFlagArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$FeatureFlagArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findMany"> | Null>
    billingAddress<T extends Tenant$billingAddressArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$billingAddressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    predefinedActTypes<T extends Tenant$predefinedActTypesArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$predefinedActTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'String'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly logo: FieldRef<"Tenant", 'String'>
    readonly createdAt: FieldRef<"Tenant", 'DateTime'>
    readonly updatedAt: FieldRef<"Tenant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.patients
   */
  export type Tenant$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    where?: PatientDetailsWhereInput
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    cursor?: PatientDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientDetailsScalarFieldEnum | PatientDetailsScalarFieldEnum[]
  }

  /**
   * Tenant.staffMembers
   */
  export type Tenant$staffMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    where?: StaffMemberWhereInput
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    cursor?: StaffMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * Tenant.FeatureFlag
   */
  export type Tenant$FeatureFlagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    where?: FeatureFlagWhereInput
    orderBy?: FeatureFlagOrderByWithRelationInput | FeatureFlagOrderByWithRelationInput[]
    cursor?: FeatureFlagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeatureFlagScalarFieldEnum | FeatureFlagScalarFieldEnum[]
  }

  /**
   * Tenant.billingAddress
   */
  export type Tenant$billingAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Tenant.predefinedActTypes
   */
  export type Tenant$predefinedActTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    where?: PredefinedActTypeWhereInput
    orderBy?: PredefinedActTypeOrderByWithRelationInput | PredefinedActTypeOrderByWithRelationInput[]
    cursor?: PredefinedActTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredefinedActTypeScalarFieldEnum | PredefinedActTypeScalarFieldEnum[]
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    role: $Enums.Role | null
    firstName: string | null
    lastName: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    locale: string | null
    phone: string | null
    birthDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    role: $Enums.Role | null
    firstName: string | null
    lastName: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    locale: string | null
    phone: string | null
    birthDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    role: number
    firstName: number
    lastName: number
    email: number
    emailVerified: number
    image: number
    locale: number
    phone: number
    birthDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    role?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    role?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    role?: true
    firstName?: true
    lastName?: true
    email?: true
    emailVerified?: true
    image?: true
    locale?: true
    phone?: true
    birthDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    role: $Enums.Role
    firstName: string | null
    lastName: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    locale: string
    phone: string | null
    birthDate: Date | null
    createdAt: Date
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    locale?: boolean
    phone?: boolean
    birthDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>
    patientDetails?: boolean | User$patientDetailsArgs<ExtArgs>
    staffMember?: boolean | User$staffMemberArgs<ExtArgs>
    address?: boolean | User$addressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    locale?: boolean
    phone?: boolean
    birthDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    role?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    locale?: boolean
    phone?: boolean
    birthDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    Authenticator?: boolean | User$AuthenticatorArgs<ExtArgs>
    patientDetails?: boolean | User$patientDetailsArgs<ExtArgs>
    staffMember?: boolean | User$staffMemberArgs<ExtArgs>
    address?: boolean | User$addressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      Authenticator: Prisma.$AuthenticatorPayload<ExtArgs>[]
      patientDetails: Prisma.$PatientDetailsPayload<ExtArgs>[]
      staffMember: Prisma.$StaffMemberPayload<ExtArgs> | null
      address: Prisma.$AddressPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.Role
      firstName: string | null
      lastName: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      locale: string
      phone: string | null
      birthDate: Date | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    Authenticator<T extends User$AuthenticatorArgs<ExtArgs> = {}>(args?: Subset<T, User$AuthenticatorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany"> | Null>
    patientDetails<T extends User$patientDetailsArgs<ExtArgs> = {}>(args?: Subset<T, User$patientDetailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findMany"> | Null>
    staffMember<T extends User$staffMemberArgs<ExtArgs> = {}>(args?: Subset<T, User$staffMemberArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    address<T extends User$addressArgs<ExtArgs> = {}>(args?: Subset<T, User$addressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly locale: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.Authenticator
   */
  export type User$AuthenticatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    where?: AuthenticatorWhereInput
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    cursor?: AuthenticatorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * User.patientDetails
   */
  export type User$patientDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    where?: PatientDetailsWhereInput
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    cursor?: PatientDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientDetailsScalarFieldEnum | PatientDetailsScalarFieldEnum[]
  }

  /**
   * User.staffMember
   */
  export type User$staffMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    where?: StaffMemberWhereInput
  }

  /**
   * User.address
   */
  export type User$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model StaffMember
   */

  export type AggregateStaffMember = {
    _count: StaffMemberCountAggregateOutputType | null
    _min: StaffMemberMinAggregateOutputType | null
    _max: StaffMemberMaxAggregateOutputType | null
  }

  export type StaffMemberMinAggregateOutputType = {
    id: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type StaffMemberMaxAggregateOutputType = {
    id: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type StaffMemberCountAggregateOutputType = {
    id: number
    tenantId: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type StaffMemberMinAggregateInputType = {
    id?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type StaffMemberMaxAggregateInputType = {
    id?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type StaffMemberCountAggregateInputType = {
    id?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type StaffMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffMember to aggregate.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffMembers
    **/
    _count?: true | StaffMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMemberMaxAggregateInputType
  }

  export type GetStaffMemberAggregateType<T extends StaffMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffMember[P]>
      : GetScalarType<T[P], AggregateStaffMember[P]>
  }




  export type StaffMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffMemberWhereInput
    orderBy?: StaffMemberOrderByWithAggregationInput | StaffMemberOrderByWithAggregationInput[]
    by: StaffMemberScalarFieldEnum[] | StaffMemberScalarFieldEnum
    having?: StaffMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffMemberCountAggregateInputType | true
    _min?: StaffMemberMinAggregateInputType
    _max?: StaffMemberMaxAggregateInputType
  }

  export type StaffMemberGroupByOutputType = {
    id: string
    tenantId: string | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: StaffMemberCountAggregateOutputType | null
    _min: StaffMemberMinAggregateOutputType | null
    _max: StaffMemberMaxAggregateOutputType | null
  }

  type GetStaffMemberGroupByPayload<T extends StaffMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffMemberGroupByOutputType[P]>
            : GetScalarType<T[P], StaffMemberGroupByOutputType[P]>
        }
      >
    >


  export type StaffMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | StaffMember$tenantArgs<ExtArgs>
    createdDocuments?: boolean | StaffMember$createdDocumentsArgs<ExtArgs>
    updatedDocuments?: boolean | StaffMember$updatedDocumentsArgs<ExtArgs>
    createdNotes?: boolean | StaffMember$createdNotesArgs<ExtArgs>
    updatedNotes?: boolean | StaffMember$updatedNotesArgs<ExtArgs>
    Appointment?: boolean | StaffMember$AppointmentArgs<ExtArgs>
    _count?: boolean | StaffMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffMember"]>

  export type StaffMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | StaffMember$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["staffMember"]>

  export type StaffMemberSelectScalar = {
    id?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type StaffMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | StaffMember$tenantArgs<ExtArgs>
    createdDocuments?: boolean | StaffMember$createdDocumentsArgs<ExtArgs>
    updatedDocuments?: boolean | StaffMember$updatedDocumentsArgs<ExtArgs>
    createdNotes?: boolean | StaffMember$createdNotesArgs<ExtArgs>
    updatedNotes?: boolean | StaffMember$updatedNotesArgs<ExtArgs>
    Appointment?: boolean | StaffMember$AppointmentArgs<ExtArgs>
    _count?: boolean | StaffMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StaffMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | StaffMember$tenantArgs<ExtArgs>
  }

  export type $StaffMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
      createdDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      updatedDocuments: Prisma.$DocumentPayload<ExtArgs>[]
      createdNotes: Prisma.$NotePayload<ExtArgs>[]
      updatedNotes: Prisma.$NotePayload<ExtArgs>[]
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tenantId: string | null
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["staffMember"]>
    composites: {}
  }

  type StaffMemberGetPayload<S extends boolean | null | undefined | StaffMemberDefaultArgs> = $Result.GetResult<Prisma.$StaffMemberPayload, S>

  type StaffMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StaffMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StaffMemberCountAggregateInputType | true
    }

  export interface StaffMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffMember'], meta: { name: 'StaffMember' } }
    /**
     * Find zero or one StaffMember that matches the filter.
     * @param {StaffMemberFindUniqueArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffMemberFindUniqueArgs>(args: SelectSubset<T, StaffMemberFindUniqueArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StaffMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StaffMemberFindUniqueOrThrowArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StaffMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindFirstArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffMemberFindFirstArgs>(args?: SelectSubset<T, StaffMemberFindFirstArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StaffMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindFirstOrThrowArgs} args - Arguments to find a StaffMember
     * @example
     * // Get one StaffMember
     * const staffMember = await prisma.staffMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StaffMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffMembers
     * const staffMembers = await prisma.staffMember.findMany()
     * 
     * // Get first 10 StaffMembers
     * const staffMembers = await prisma.staffMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffMemberWithIdOnly = await prisma.staffMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffMemberFindManyArgs>(args?: SelectSubset<T, StaffMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StaffMember.
     * @param {StaffMemberCreateArgs} args - Arguments to create a StaffMember.
     * @example
     * // Create one StaffMember
     * const StaffMember = await prisma.staffMember.create({
     *   data: {
     *     // ... data to create a StaffMember
     *   }
     * })
     * 
     */
    create<T extends StaffMemberCreateArgs>(args: SelectSubset<T, StaffMemberCreateArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StaffMembers.
     * @param {StaffMemberCreateManyArgs} args - Arguments to create many StaffMembers.
     * @example
     * // Create many StaffMembers
     * const staffMember = await prisma.staffMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffMemberCreateManyArgs>(args?: SelectSubset<T, StaffMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffMembers and returns the data saved in the database.
     * @param {StaffMemberCreateManyAndReturnArgs} args - Arguments to create many StaffMembers.
     * @example
     * // Create many StaffMembers
     * const staffMember = await prisma.staffMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffMembers and only return the `id`
     * const staffMemberWithIdOnly = await prisma.staffMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StaffMember.
     * @param {StaffMemberDeleteArgs} args - Arguments to delete one StaffMember.
     * @example
     * // Delete one StaffMember
     * const StaffMember = await prisma.staffMember.delete({
     *   where: {
     *     // ... filter to delete one StaffMember
     *   }
     * })
     * 
     */
    delete<T extends StaffMemberDeleteArgs>(args: SelectSubset<T, StaffMemberDeleteArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StaffMember.
     * @param {StaffMemberUpdateArgs} args - Arguments to update one StaffMember.
     * @example
     * // Update one StaffMember
     * const staffMember = await prisma.staffMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffMemberUpdateArgs>(args: SelectSubset<T, StaffMemberUpdateArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StaffMembers.
     * @param {StaffMemberDeleteManyArgs} args - Arguments to filter StaffMembers to delete.
     * @example
     * // Delete a few StaffMembers
     * const { count } = await prisma.staffMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffMemberDeleteManyArgs>(args?: SelectSubset<T, StaffMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffMembers
     * const staffMember = await prisma.staffMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffMemberUpdateManyArgs>(args: SelectSubset<T, StaffMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StaffMember.
     * @param {StaffMemberUpsertArgs} args - Arguments to update or create a StaffMember.
     * @example
     * // Update or create a StaffMember
     * const staffMember = await prisma.staffMember.upsert({
     *   create: {
     *     // ... data to create a StaffMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffMember we want to update
     *   }
     * })
     */
    upsert<T extends StaffMemberUpsertArgs>(args: SelectSubset<T, StaffMemberUpsertArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StaffMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberCountArgs} args - Arguments to filter StaffMembers to count.
     * @example
     * // Count the number of StaffMembers
     * const count = await prisma.staffMember.count({
     *   where: {
     *     // ... the filter for the StaffMembers we want to count
     *   }
     * })
    **/
    count<T extends StaffMemberCountArgs>(
      args?: Subset<T, StaffMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffMemberAggregateArgs>(args: Subset<T, StaffMemberAggregateArgs>): Prisma.PrismaPromise<GetStaffMemberAggregateType<T>>

    /**
     * Group by StaffMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffMemberGroupByArgs['orderBy'] }
        : { orderBy?: StaffMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffMember model
   */
  readonly fields: StaffMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends StaffMember$tenantArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdDocuments<T extends StaffMember$createdDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$createdDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    updatedDocuments<T extends StaffMember$updatedDocumentsArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$updatedDocumentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    createdNotes<T extends StaffMember$createdNotesArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$createdNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    updatedNotes<T extends StaffMember$updatedNotesArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$updatedNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    Appointment<T extends StaffMember$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, StaffMember$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffMember model
   */ 
  interface StaffMemberFieldRefs {
    readonly id: FieldRef<"StaffMember", 'String'>
    readonly tenantId: FieldRef<"StaffMember", 'String'>
    readonly createdAt: FieldRef<"StaffMember", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffMember", 'DateTime'>
    readonly isDeleted: FieldRef<"StaffMember", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * StaffMember findUnique
   */
  export type StaffMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember findUniqueOrThrow
   */
  export type StaffMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember findFirst
   */
  export type StaffMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffMembers.
     */
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember findFirstOrThrow
   */
  export type StaffMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter, which StaffMember to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffMembers.
     */
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember findMany
   */
  export type StaffMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter, which StaffMembers to fetch.
     */
    where?: StaffMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffMembers to fetch.
     */
    orderBy?: StaffMemberOrderByWithRelationInput | StaffMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffMembers.
     */
    cursor?: StaffMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffMembers.
     */
    skip?: number
    distinct?: StaffMemberScalarFieldEnum | StaffMemberScalarFieldEnum[]
  }

  /**
   * StaffMember create
   */
  export type StaffMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffMember.
     */
    data: XOR<StaffMemberCreateInput, StaffMemberUncheckedCreateInput>
  }

  /**
   * StaffMember createMany
   */
  export type StaffMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffMembers.
     */
    data: StaffMemberCreateManyInput | StaffMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffMember createManyAndReturn
   */
  export type StaffMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StaffMembers.
     */
    data: StaffMemberCreateManyInput | StaffMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffMember update
   */
  export type StaffMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffMember.
     */
    data: XOR<StaffMemberUpdateInput, StaffMemberUncheckedUpdateInput>
    /**
     * Choose, which StaffMember to update.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember updateMany
   */
  export type StaffMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffMembers.
     */
    data: XOR<StaffMemberUpdateManyMutationInput, StaffMemberUncheckedUpdateManyInput>
    /**
     * Filter which StaffMembers to update
     */
    where?: StaffMemberWhereInput
  }

  /**
   * StaffMember upsert
   */
  export type StaffMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffMember to update in case it exists.
     */
    where: StaffMemberWhereUniqueInput
    /**
     * In case the StaffMember found by the `where` argument doesn't exist, create a new StaffMember with this data.
     */
    create: XOR<StaffMemberCreateInput, StaffMemberUncheckedCreateInput>
    /**
     * In case the StaffMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffMemberUpdateInput, StaffMemberUncheckedUpdateInput>
  }

  /**
   * StaffMember delete
   */
  export type StaffMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    /**
     * Filter which StaffMember to delete.
     */
    where: StaffMemberWhereUniqueInput
  }

  /**
   * StaffMember deleteMany
   */
  export type StaffMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffMembers to delete
     */
    where?: StaffMemberWhereInput
  }

  /**
   * StaffMember.tenant
   */
  export type StaffMember$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * StaffMember.createdDocuments
   */
  export type StaffMember$createdDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * StaffMember.updatedDocuments
   */
  export type StaffMember$updatedDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * StaffMember.createdNotes
   */
  export type StaffMember$createdNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * StaffMember.updatedNotes
   */
  export type StaffMember$updatedNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * StaffMember.Appointment
   */
  export type StaffMember$AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * StaffMember without action
   */
  export type StaffMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
  }


  /**
   * Model PatientDetails
   */

  export type AggregatePatientDetails = {
    _count: PatientDetailsCountAggregateOutputType | null
    _min: PatientDetailsMinAggregateOutputType | null
    _max: PatientDetailsMaxAggregateOutputType | null
  }

  export type PatientDetailsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type PatientDetailsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type PatientDetailsCountAggregateOutputType = {
    id: number
    userId: number
    tenantId: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type PatientDetailsMinAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type PatientDetailsMaxAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type PatientDetailsCountAggregateInputType = {
    id?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type PatientDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientDetails to aggregate.
     */
    where?: PatientDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientDetails to fetch.
     */
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientDetails
    **/
    _count?: true | PatientDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientDetailsMaxAggregateInputType
  }

  export type GetPatientDetailsAggregateType<T extends PatientDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientDetails[P]>
      : GetScalarType<T[P], AggregatePatientDetails[P]>
  }




  export type PatientDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientDetailsWhereInput
    orderBy?: PatientDetailsOrderByWithAggregationInput | PatientDetailsOrderByWithAggregationInput[]
    by: PatientDetailsScalarFieldEnum[] | PatientDetailsScalarFieldEnum
    having?: PatientDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientDetailsCountAggregateInputType | true
    _min?: PatientDetailsMinAggregateInputType
    _max?: PatientDetailsMaxAggregateInputType
  }

  export type PatientDetailsGroupByOutputType = {
    id: string
    userId: string
    tenantId: string
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: PatientDetailsCountAggregateOutputType | null
    _min: PatientDetailsMinAggregateOutputType | null
    _max: PatientDetailsMaxAggregateOutputType | null
  }

  type GetPatientDetailsGroupByPayload<T extends PatientDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], PatientDetailsGroupByOutputType[P]>
        }
      >
    >


  export type PatientDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notes?: boolean | PatientDetails$notesArgs<ExtArgs>
    Appointment?: boolean | PatientDetails$AppointmentArgs<ExtArgs>
    AccountingEntry?: boolean | PatientDetails$AccountingEntryArgs<ExtArgs>
    Quotation?: boolean | PatientDetails$QuotationArgs<ExtArgs>
    _count?: boolean | PatientDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientDetails"]>

  export type PatientDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientDetails"]>

  export type PatientDetailsSelectScalar = {
    id?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type PatientDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    notes?: boolean | PatientDetails$notesArgs<ExtArgs>
    Appointment?: boolean | PatientDetails$AppointmentArgs<ExtArgs>
    AccountingEntry?: boolean | PatientDetails$AccountingEntryArgs<ExtArgs>
    Quotation?: boolean | PatientDetails$QuotationArgs<ExtArgs>
    _count?: boolean | PatientDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PatientDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs>
      notes: Prisma.$NotePayload<ExtArgs>[]
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
      AccountingEntry: Prisma.$AccountingEntryPayload<ExtArgs>[]
      Quotation: Prisma.$QuotationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      tenantId: string
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["patientDetails"]>
    composites: {}
  }

  type PatientDetailsGetPayload<S extends boolean | null | undefined | PatientDetailsDefaultArgs> = $Result.GetResult<Prisma.$PatientDetailsPayload, S>

  type PatientDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientDetailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientDetailsCountAggregateInputType | true
    }

  export interface PatientDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientDetails'], meta: { name: 'PatientDetails' } }
    /**
     * Find zero or one PatientDetails that matches the filter.
     * @param {PatientDetailsFindUniqueArgs} args - Arguments to find a PatientDetails
     * @example
     * // Get one PatientDetails
     * const patientDetails = await prisma.patientDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientDetailsFindUniqueArgs>(args: SelectSubset<T, PatientDetailsFindUniqueArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PatientDetails that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientDetailsFindUniqueOrThrowArgs} args - Arguments to find a PatientDetails
     * @example
     * // Get one PatientDetails
     * const patientDetails = await prisma.patientDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PatientDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsFindFirstArgs} args - Arguments to find a PatientDetails
     * @example
     * // Get one PatientDetails
     * const patientDetails = await prisma.patientDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientDetailsFindFirstArgs>(args?: SelectSubset<T, PatientDetailsFindFirstArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PatientDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsFindFirstOrThrowArgs} args - Arguments to find a PatientDetails
     * @example
     * // Get one PatientDetails
     * const patientDetails = await prisma.patientDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PatientDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientDetails
     * const patientDetails = await prisma.patientDetails.findMany()
     * 
     * // Get first 10 PatientDetails
     * const patientDetails = await prisma.patientDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientDetailsWithIdOnly = await prisma.patientDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientDetailsFindManyArgs>(args?: SelectSubset<T, PatientDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PatientDetails.
     * @param {PatientDetailsCreateArgs} args - Arguments to create a PatientDetails.
     * @example
     * // Create one PatientDetails
     * const PatientDetails = await prisma.patientDetails.create({
     *   data: {
     *     // ... data to create a PatientDetails
     *   }
     * })
     * 
     */
    create<T extends PatientDetailsCreateArgs>(args: SelectSubset<T, PatientDetailsCreateArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PatientDetails.
     * @param {PatientDetailsCreateManyArgs} args - Arguments to create many PatientDetails.
     * @example
     * // Create many PatientDetails
     * const patientDetails = await prisma.patientDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientDetailsCreateManyArgs>(args?: SelectSubset<T, PatientDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientDetails and returns the data saved in the database.
     * @param {PatientDetailsCreateManyAndReturnArgs} args - Arguments to create many PatientDetails.
     * @example
     * // Create many PatientDetails
     * const patientDetails = await prisma.patientDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientDetails and only return the `id`
     * const patientDetailsWithIdOnly = await prisma.patientDetails.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PatientDetails.
     * @param {PatientDetailsDeleteArgs} args - Arguments to delete one PatientDetails.
     * @example
     * // Delete one PatientDetails
     * const PatientDetails = await prisma.patientDetails.delete({
     *   where: {
     *     // ... filter to delete one PatientDetails
     *   }
     * })
     * 
     */
    delete<T extends PatientDetailsDeleteArgs>(args: SelectSubset<T, PatientDetailsDeleteArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PatientDetails.
     * @param {PatientDetailsUpdateArgs} args - Arguments to update one PatientDetails.
     * @example
     * // Update one PatientDetails
     * const patientDetails = await prisma.patientDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientDetailsUpdateArgs>(args: SelectSubset<T, PatientDetailsUpdateArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PatientDetails.
     * @param {PatientDetailsDeleteManyArgs} args - Arguments to filter PatientDetails to delete.
     * @example
     * // Delete a few PatientDetails
     * const { count } = await prisma.patientDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDetailsDeleteManyArgs>(args?: SelectSubset<T, PatientDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientDetails
     * const patientDetails = await prisma.patientDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientDetailsUpdateManyArgs>(args: SelectSubset<T, PatientDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientDetails.
     * @param {PatientDetailsUpsertArgs} args - Arguments to update or create a PatientDetails.
     * @example
     * // Update or create a PatientDetails
     * const patientDetails = await prisma.patientDetails.upsert({
     *   create: {
     *     // ... data to create a PatientDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientDetails we want to update
     *   }
     * })
     */
    upsert<T extends PatientDetailsUpsertArgs>(args: SelectSubset<T, PatientDetailsUpsertArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PatientDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsCountArgs} args - Arguments to filter PatientDetails to count.
     * @example
     * // Count the number of PatientDetails
     * const count = await prisma.patientDetails.count({
     *   where: {
     *     // ... the filter for the PatientDetails we want to count
     *   }
     * })
    **/
    count<T extends PatientDetailsCountArgs>(
      args?: Subset<T, PatientDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientDetailsAggregateArgs>(args: Subset<T, PatientDetailsAggregateArgs>): Prisma.PrismaPromise<GetPatientDetailsAggregateType<T>>

    /**
     * Group by PatientDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientDetailsGroupByArgs['orderBy'] }
        : { orderBy?: PatientDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientDetails model
   */
  readonly fields: PatientDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    notes<T extends PatientDetails$notesArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetails$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany"> | Null>
    Appointment<T extends PatientDetails$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetails$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    AccountingEntry<T extends PatientDetails$AccountingEntryArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetails$AccountingEntryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findMany"> | Null>
    Quotation<T extends PatientDetails$QuotationArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetails$QuotationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientDetails model
   */ 
  interface PatientDetailsFieldRefs {
    readonly id: FieldRef<"PatientDetails", 'String'>
    readonly userId: FieldRef<"PatientDetails", 'String'>
    readonly tenantId: FieldRef<"PatientDetails", 'String'>
    readonly createdAt: FieldRef<"PatientDetails", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientDetails", 'DateTime'>
    readonly isDeleted: FieldRef<"PatientDetails", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * PatientDetails findUnique
   */
  export type PatientDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PatientDetails to fetch.
     */
    where: PatientDetailsWhereUniqueInput
  }

  /**
   * PatientDetails findUniqueOrThrow
   */
  export type PatientDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PatientDetails to fetch.
     */
    where: PatientDetailsWhereUniqueInput
  }

  /**
   * PatientDetails findFirst
   */
  export type PatientDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PatientDetails to fetch.
     */
    where?: PatientDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientDetails to fetch.
     */
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientDetails.
     */
    cursor?: PatientDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientDetails.
     */
    distinct?: PatientDetailsScalarFieldEnum | PatientDetailsScalarFieldEnum[]
  }

  /**
   * PatientDetails findFirstOrThrow
   */
  export type PatientDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PatientDetails to fetch.
     */
    where?: PatientDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientDetails to fetch.
     */
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientDetails.
     */
    cursor?: PatientDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientDetails.
     */
    distinct?: PatientDetailsScalarFieldEnum | PatientDetailsScalarFieldEnum[]
  }

  /**
   * PatientDetails findMany
   */
  export type PatientDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter, which PatientDetails to fetch.
     */
    where?: PatientDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientDetails to fetch.
     */
    orderBy?: PatientDetailsOrderByWithRelationInput | PatientDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientDetails.
     */
    cursor?: PatientDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientDetails.
     */
    skip?: number
    distinct?: PatientDetailsScalarFieldEnum | PatientDetailsScalarFieldEnum[]
  }

  /**
   * PatientDetails create
   */
  export type PatientDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientDetails.
     */
    data: XOR<PatientDetailsCreateInput, PatientDetailsUncheckedCreateInput>
  }

  /**
   * PatientDetails createMany
   */
  export type PatientDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientDetails.
     */
    data: PatientDetailsCreateManyInput | PatientDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientDetails createManyAndReturn
   */
  export type PatientDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PatientDetails.
     */
    data: PatientDetailsCreateManyInput | PatientDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientDetails update
   */
  export type PatientDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientDetails.
     */
    data: XOR<PatientDetailsUpdateInput, PatientDetailsUncheckedUpdateInput>
    /**
     * Choose, which PatientDetails to update.
     */
    where: PatientDetailsWhereUniqueInput
  }

  /**
   * PatientDetails updateMany
   */
  export type PatientDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientDetails.
     */
    data: XOR<PatientDetailsUpdateManyMutationInput, PatientDetailsUncheckedUpdateManyInput>
    /**
     * Filter which PatientDetails to update
     */
    where?: PatientDetailsWhereInput
  }

  /**
   * PatientDetails upsert
   */
  export type PatientDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientDetails to update in case it exists.
     */
    where: PatientDetailsWhereUniqueInput
    /**
     * In case the PatientDetails found by the `where` argument doesn't exist, create a new PatientDetails with this data.
     */
    create: XOR<PatientDetailsCreateInput, PatientDetailsUncheckedCreateInput>
    /**
     * In case the PatientDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientDetailsUpdateInput, PatientDetailsUncheckedUpdateInput>
  }

  /**
   * PatientDetails delete
   */
  export type PatientDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
    /**
     * Filter which PatientDetails to delete.
     */
    where: PatientDetailsWhereUniqueInput
  }

  /**
   * PatientDetails deleteMany
   */
  export type PatientDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientDetails to delete
     */
    where?: PatientDetailsWhereInput
  }

  /**
   * PatientDetails.notes
   */
  export type PatientDetails$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * PatientDetails.Appointment
   */
  export type PatientDetails$AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * PatientDetails.AccountingEntry
   */
  export type PatientDetails$AccountingEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    where?: AccountingEntryWhereInput
    orderBy?: AccountingEntryOrderByWithRelationInput | AccountingEntryOrderByWithRelationInput[]
    cursor?: AccountingEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountingEntryScalarFieldEnum | AccountingEntryScalarFieldEnum[]
  }

  /**
   * PatientDetails.Quotation
   */
  export type PatientDetails$QuotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    where?: QuotationWhereInput
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    cursor?: QuotationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * PatientDetails without action
   */
  export type PatientDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientDetails
     */
    select?: PatientDetailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientDetailsInclude<ExtArgs> | null
  }


  /**
   * Model AccountingEntry
   */

  export type AggregateAccountingEntry = {
    _count: AccountingEntryCountAggregateOutputType | null
    _avg: AccountingEntryAvgAggregateOutputType | null
    _sum: AccountingEntrySumAggregateOutputType | null
    _min: AccountingEntryMinAggregateOutputType | null
    _max: AccountingEntryMaxAggregateOutputType | null
  }

  export type AccountingEntryAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type AccountingEntrySumAggregateOutputType = {
    amount: Decimal | null
  }

  export type AccountingEntryMinAggregateOutputType = {
    id: string | null
    patientDetailsId: string | null
    amount: Decimal | null
    currency: $Enums.Currency | null
    paymentMethod: $Enums.PaymentMethod | null
    transactionReference: string | null
    type: $Enums.AccountingEntryType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountingEntryMaxAggregateOutputType = {
    id: string | null
    patientDetailsId: string | null
    amount: Decimal | null
    currency: $Enums.Currency | null
    paymentMethod: $Enums.PaymentMethod | null
    transactionReference: string | null
    type: $Enums.AccountingEntryType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountingEntryCountAggregateOutputType = {
    id: number
    patientDetailsId: number
    amount: number
    currency: number
    paymentMethod: number
    transactionReference: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountingEntryAvgAggregateInputType = {
    amount?: true
  }

  export type AccountingEntrySumAggregateInputType = {
    amount?: true
  }

  export type AccountingEntryMinAggregateInputType = {
    id?: true
    patientDetailsId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionReference?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountingEntryMaxAggregateInputType = {
    id?: true
    patientDetailsId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionReference?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountingEntryCountAggregateInputType = {
    id?: true
    patientDetailsId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionReference?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountingEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountingEntry to aggregate.
     */
    where?: AccountingEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountingEntries to fetch.
     */
    orderBy?: AccountingEntryOrderByWithRelationInput | AccountingEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountingEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountingEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountingEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccountingEntries
    **/
    _count?: true | AccountingEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountingEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountingEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountingEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountingEntryMaxAggregateInputType
  }

  export type GetAccountingEntryAggregateType<T extends AccountingEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateAccountingEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccountingEntry[P]>
      : GetScalarType<T[P], AggregateAccountingEntry[P]>
  }




  export type AccountingEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountingEntryWhereInput
    orderBy?: AccountingEntryOrderByWithAggregationInput | AccountingEntryOrderByWithAggregationInput[]
    by: AccountingEntryScalarFieldEnum[] | AccountingEntryScalarFieldEnum
    having?: AccountingEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountingEntryCountAggregateInputType | true
    _avg?: AccountingEntryAvgAggregateInputType
    _sum?: AccountingEntrySumAggregateInputType
    _min?: AccountingEntryMinAggregateInputType
    _max?: AccountingEntryMaxAggregateInputType
  }

  export type AccountingEntryGroupByOutputType = {
    id: string
    patientDetailsId: string
    amount: Decimal
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference: string | null
    type: $Enums.AccountingEntryType
    createdAt: Date
    updatedAt: Date | null
    _count: AccountingEntryCountAggregateOutputType | null
    _avg: AccountingEntryAvgAggregateOutputType | null
    _sum: AccountingEntrySumAggregateOutputType | null
    _min: AccountingEntryMinAggregateOutputType | null
    _max: AccountingEntryMaxAggregateOutputType | null
  }

  type GetAccountingEntryGroupByPayload<T extends AccountingEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountingEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountingEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountingEntryGroupByOutputType[P]>
            : GetScalarType<T[P], AccountingEntryGroupByOutputType[P]>
        }
      >
    >


  export type AccountingEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientDetailsId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionReference?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountingEntry"]>

  export type AccountingEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientDetailsId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionReference?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["accountingEntry"]>

  export type AccountingEntrySelectScalar = {
    id?: boolean
    patientDetailsId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionReference?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountingEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }
  export type AccountingEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }

  export type $AccountingEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccountingEntry"
    objects: {
      patientDetails: Prisma.$PatientDetailsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientDetailsId: string
      amount: Prisma.Decimal
      currency: $Enums.Currency
      paymentMethod: $Enums.PaymentMethod
      transactionReference: string | null
      type: $Enums.AccountingEntryType
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["accountingEntry"]>
    composites: {}
  }

  type AccountingEntryGetPayload<S extends boolean | null | undefined | AccountingEntryDefaultArgs> = $Result.GetResult<Prisma.$AccountingEntryPayload, S>

  type AccountingEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountingEntryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountingEntryCountAggregateInputType | true
    }

  export interface AccountingEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountingEntry'], meta: { name: 'AccountingEntry' } }
    /**
     * Find zero or one AccountingEntry that matches the filter.
     * @param {AccountingEntryFindUniqueArgs} args - Arguments to find a AccountingEntry
     * @example
     * // Get one AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountingEntryFindUniqueArgs>(args: SelectSubset<T, AccountingEntryFindUniqueArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccountingEntry that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountingEntryFindUniqueOrThrowArgs} args - Arguments to find a AccountingEntry
     * @example
     * // Get one AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountingEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountingEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccountingEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryFindFirstArgs} args - Arguments to find a AccountingEntry
     * @example
     * // Get one AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountingEntryFindFirstArgs>(args?: SelectSubset<T, AccountingEntryFindFirstArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccountingEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryFindFirstOrThrowArgs} args - Arguments to find a AccountingEntry
     * @example
     * // Get one AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountingEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountingEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccountingEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccountingEntries
     * const accountingEntries = await prisma.accountingEntry.findMany()
     * 
     * // Get first 10 AccountingEntries
     * const accountingEntries = await prisma.accountingEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountingEntryWithIdOnly = await prisma.accountingEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountingEntryFindManyArgs>(args?: SelectSubset<T, AccountingEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccountingEntry.
     * @param {AccountingEntryCreateArgs} args - Arguments to create a AccountingEntry.
     * @example
     * // Create one AccountingEntry
     * const AccountingEntry = await prisma.accountingEntry.create({
     *   data: {
     *     // ... data to create a AccountingEntry
     *   }
     * })
     * 
     */
    create<T extends AccountingEntryCreateArgs>(args: SelectSubset<T, AccountingEntryCreateArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccountingEntries.
     * @param {AccountingEntryCreateManyArgs} args - Arguments to create many AccountingEntries.
     * @example
     * // Create many AccountingEntries
     * const accountingEntry = await prisma.accountingEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountingEntryCreateManyArgs>(args?: SelectSubset<T, AccountingEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AccountingEntries and returns the data saved in the database.
     * @param {AccountingEntryCreateManyAndReturnArgs} args - Arguments to create many AccountingEntries.
     * @example
     * // Create many AccountingEntries
     * const accountingEntry = await prisma.accountingEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AccountingEntries and only return the `id`
     * const accountingEntryWithIdOnly = await prisma.accountingEntry.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountingEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountingEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AccountingEntry.
     * @param {AccountingEntryDeleteArgs} args - Arguments to delete one AccountingEntry.
     * @example
     * // Delete one AccountingEntry
     * const AccountingEntry = await prisma.accountingEntry.delete({
     *   where: {
     *     // ... filter to delete one AccountingEntry
     *   }
     * })
     * 
     */
    delete<T extends AccountingEntryDeleteArgs>(args: SelectSubset<T, AccountingEntryDeleteArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccountingEntry.
     * @param {AccountingEntryUpdateArgs} args - Arguments to update one AccountingEntry.
     * @example
     * // Update one AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountingEntryUpdateArgs>(args: SelectSubset<T, AccountingEntryUpdateArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccountingEntries.
     * @param {AccountingEntryDeleteManyArgs} args - Arguments to filter AccountingEntries to delete.
     * @example
     * // Delete a few AccountingEntries
     * const { count } = await prisma.accountingEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountingEntryDeleteManyArgs>(args?: SelectSubset<T, AccountingEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccountingEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccountingEntries
     * const accountingEntry = await prisma.accountingEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountingEntryUpdateManyArgs>(args: SelectSubset<T, AccountingEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccountingEntry.
     * @param {AccountingEntryUpsertArgs} args - Arguments to update or create a AccountingEntry.
     * @example
     * // Update or create a AccountingEntry
     * const accountingEntry = await prisma.accountingEntry.upsert({
     *   create: {
     *     // ... data to create a AccountingEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccountingEntry we want to update
     *   }
     * })
     */
    upsert<T extends AccountingEntryUpsertArgs>(args: SelectSubset<T, AccountingEntryUpsertArgs<ExtArgs>>): Prisma__AccountingEntryClient<$Result.GetResult<Prisma.$AccountingEntryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccountingEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryCountArgs} args - Arguments to filter AccountingEntries to count.
     * @example
     * // Count the number of AccountingEntries
     * const count = await prisma.accountingEntry.count({
     *   where: {
     *     // ... the filter for the AccountingEntries we want to count
     *   }
     * })
    **/
    count<T extends AccountingEntryCountArgs>(
      args?: Subset<T, AccountingEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountingEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccountingEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountingEntryAggregateArgs>(args: Subset<T, AccountingEntryAggregateArgs>): Prisma.PrismaPromise<GetAccountingEntryAggregateType<T>>

    /**
     * Group by AccountingEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountingEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountingEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountingEntryGroupByArgs['orderBy'] }
        : { orderBy?: AccountingEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountingEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountingEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccountingEntry model
   */
  readonly fields: AccountingEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccountingEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountingEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientDetails<T extends PatientDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetailsDefaultArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccountingEntry model
   */ 
  interface AccountingEntryFieldRefs {
    readonly id: FieldRef<"AccountingEntry", 'String'>
    readonly patientDetailsId: FieldRef<"AccountingEntry", 'String'>
    readonly amount: FieldRef<"AccountingEntry", 'Decimal'>
    readonly currency: FieldRef<"AccountingEntry", 'Currency'>
    readonly paymentMethod: FieldRef<"AccountingEntry", 'PaymentMethod'>
    readonly transactionReference: FieldRef<"AccountingEntry", 'String'>
    readonly type: FieldRef<"AccountingEntry", 'AccountingEntryType'>
    readonly createdAt: FieldRef<"AccountingEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"AccountingEntry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccountingEntry findUnique
   */
  export type AccountingEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter, which AccountingEntry to fetch.
     */
    where: AccountingEntryWhereUniqueInput
  }

  /**
   * AccountingEntry findUniqueOrThrow
   */
  export type AccountingEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter, which AccountingEntry to fetch.
     */
    where: AccountingEntryWhereUniqueInput
  }

  /**
   * AccountingEntry findFirst
   */
  export type AccountingEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter, which AccountingEntry to fetch.
     */
    where?: AccountingEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountingEntries to fetch.
     */
    orderBy?: AccountingEntryOrderByWithRelationInput | AccountingEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountingEntries.
     */
    cursor?: AccountingEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountingEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountingEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountingEntries.
     */
    distinct?: AccountingEntryScalarFieldEnum | AccountingEntryScalarFieldEnum[]
  }

  /**
   * AccountingEntry findFirstOrThrow
   */
  export type AccountingEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter, which AccountingEntry to fetch.
     */
    where?: AccountingEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountingEntries to fetch.
     */
    orderBy?: AccountingEntryOrderByWithRelationInput | AccountingEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccountingEntries.
     */
    cursor?: AccountingEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountingEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountingEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccountingEntries.
     */
    distinct?: AccountingEntryScalarFieldEnum | AccountingEntryScalarFieldEnum[]
  }

  /**
   * AccountingEntry findMany
   */
  export type AccountingEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter, which AccountingEntries to fetch.
     */
    where?: AccountingEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccountingEntries to fetch.
     */
    orderBy?: AccountingEntryOrderByWithRelationInput | AccountingEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccountingEntries.
     */
    cursor?: AccountingEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccountingEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccountingEntries.
     */
    skip?: number
    distinct?: AccountingEntryScalarFieldEnum | AccountingEntryScalarFieldEnum[]
  }

  /**
   * AccountingEntry create
   */
  export type AccountingEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a AccountingEntry.
     */
    data: XOR<AccountingEntryCreateInput, AccountingEntryUncheckedCreateInput>
  }

  /**
   * AccountingEntry createMany
   */
  export type AccountingEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccountingEntries.
     */
    data: AccountingEntryCreateManyInput | AccountingEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccountingEntry createManyAndReturn
   */
  export type AccountingEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AccountingEntries.
     */
    data: AccountingEntryCreateManyInput | AccountingEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AccountingEntry update
   */
  export type AccountingEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a AccountingEntry.
     */
    data: XOR<AccountingEntryUpdateInput, AccountingEntryUncheckedUpdateInput>
    /**
     * Choose, which AccountingEntry to update.
     */
    where: AccountingEntryWhereUniqueInput
  }

  /**
   * AccountingEntry updateMany
   */
  export type AccountingEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccountingEntries.
     */
    data: XOR<AccountingEntryUpdateManyMutationInput, AccountingEntryUncheckedUpdateManyInput>
    /**
     * Filter which AccountingEntries to update
     */
    where?: AccountingEntryWhereInput
  }

  /**
   * AccountingEntry upsert
   */
  export type AccountingEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the AccountingEntry to update in case it exists.
     */
    where: AccountingEntryWhereUniqueInput
    /**
     * In case the AccountingEntry found by the `where` argument doesn't exist, create a new AccountingEntry with this data.
     */
    create: XOR<AccountingEntryCreateInput, AccountingEntryUncheckedCreateInput>
    /**
     * In case the AccountingEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountingEntryUpdateInput, AccountingEntryUncheckedUpdateInput>
  }

  /**
   * AccountingEntry delete
   */
  export type AccountingEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
    /**
     * Filter which AccountingEntry to delete.
     */
    where: AccountingEntryWhereUniqueInput
  }

  /**
   * AccountingEntry deleteMany
   */
  export type AccountingEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccountingEntries to delete
     */
    where?: AccountingEntryWhereInput
  }

  /**
   * AccountingEntry without action
   */
  export type AccountingEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountingEntry
     */
    select?: AccountingEntrySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountingEntryInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const accountWithUserIdOnly = await prisma.account.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `userId`
     * const accountWithUserIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    sessionToken: string | null
    userId: string | null
    expires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    sessionToken: number
    userId: number
    expires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    sessionToken?: true
    userId?: true
    expires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    sessionToken: string
    userId: string
    expires: Date
    createdAt: Date
    updatedAt: Date | null
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sessionToken: string
      userId: string
      expires: Date
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.findMany({ select: { sessionToken: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `sessionToken`
     * const sessionWithSessionTokenOnly = await prisma.session.createManyAndReturn({ 
     *   select: { sessionToken: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model Authenticator
   */

  export type AggregateAuthenticator = {
    _count: AuthenticatorCountAggregateOutputType | null
    _avg: AuthenticatorAvgAggregateOutputType | null
    _sum: AuthenticatorSumAggregateOutputType | null
    _min: AuthenticatorMinAggregateOutputType | null
    _max: AuthenticatorMaxAggregateOutputType | null
  }

  export type AuthenticatorAvgAggregateOutputType = {
    counter: number | null
  }

  export type AuthenticatorSumAggregateOutputType = {
    counter: number | null
  }

  export type AuthenticatorMinAggregateOutputType = {
    credentialID: string | null
    userId: string | null
    providerAccountId: string | null
    credentialPublicKey: string | null
    counter: number | null
    credentialDeviceType: string | null
    credentialBackedUp: boolean | null
    transports: string | null
  }

  export type AuthenticatorMaxAggregateOutputType = {
    credentialID: string | null
    userId: string | null
    providerAccountId: string | null
    credentialPublicKey: string | null
    counter: number | null
    credentialDeviceType: string | null
    credentialBackedUp: boolean | null
    transports: string | null
  }

  export type AuthenticatorCountAggregateOutputType = {
    credentialID: number
    userId: number
    providerAccountId: number
    credentialPublicKey: number
    counter: number
    credentialDeviceType: number
    credentialBackedUp: number
    transports: number
    _all: number
  }


  export type AuthenticatorAvgAggregateInputType = {
    counter?: true
  }

  export type AuthenticatorSumAggregateInputType = {
    counter?: true
  }

  export type AuthenticatorMinAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
  }

  export type AuthenticatorMaxAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
  }

  export type AuthenticatorCountAggregateInputType = {
    credentialID?: true
    userId?: true
    providerAccountId?: true
    credentialPublicKey?: true
    counter?: true
    credentialDeviceType?: true
    credentialBackedUp?: true
    transports?: true
    _all?: true
  }

  export type AuthenticatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authenticator to aggregate.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Authenticators
    **/
    _count?: true | AuthenticatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuthenticatorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuthenticatorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthenticatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthenticatorMaxAggregateInputType
  }

  export type GetAuthenticatorAggregateType<T extends AuthenticatorAggregateArgs> = {
        [P in keyof T & keyof AggregateAuthenticator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuthenticator[P]>
      : GetScalarType<T[P], AggregateAuthenticator[P]>
  }




  export type AuthenticatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuthenticatorWhereInput
    orderBy?: AuthenticatorOrderByWithAggregationInput | AuthenticatorOrderByWithAggregationInput[]
    by: AuthenticatorScalarFieldEnum[] | AuthenticatorScalarFieldEnum
    having?: AuthenticatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthenticatorCountAggregateInputType | true
    _avg?: AuthenticatorAvgAggregateInputType
    _sum?: AuthenticatorSumAggregateInputType
    _min?: AuthenticatorMinAggregateInputType
    _max?: AuthenticatorMaxAggregateInputType
  }

  export type AuthenticatorGroupByOutputType = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports: string | null
    _count: AuthenticatorCountAggregateOutputType | null
    _avg: AuthenticatorAvgAggregateOutputType | null
    _sum: AuthenticatorSumAggregateOutputType | null
    _min: AuthenticatorMinAggregateOutputType | null
    _max: AuthenticatorMaxAggregateOutputType | null
  }

  type GetAuthenticatorGroupByPayload<T extends AuthenticatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthenticatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthenticatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
            : GetScalarType<T[P], AuthenticatorGroupByOutputType[P]>
        }
      >
    >


  export type AuthenticatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authenticator"]>

  export type AuthenticatorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["authenticator"]>

  export type AuthenticatorSelectScalar = {
    credentialID?: boolean
    userId?: boolean
    providerAccountId?: boolean
    credentialPublicKey?: boolean
    counter?: boolean
    credentialDeviceType?: boolean
    credentialBackedUp?: boolean
    transports?: boolean
  }

  export type AuthenticatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuthenticatorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuthenticatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Authenticator"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      credentialID: string
      userId: string
      providerAccountId: string
      credentialPublicKey: string
      counter: number
      credentialDeviceType: string
      credentialBackedUp: boolean
      transports: string | null
    }, ExtArgs["result"]["authenticator"]>
    composites: {}
  }

  type AuthenticatorGetPayload<S extends boolean | null | undefined | AuthenticatorDefaultArgs> = $Result.GetResult<Prisma.$AuthenticatorPayload, S>

  type AuthenticatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuthenticatorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuthenticatorCountAggregateInputType | true
    }

  export interface AuthenticatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Authenticator'], meta: { name: 'Authenticator' } }
    /**
     * Find zero or one Authenticator that matches the filter.
     * @param {AuthenticatorFindUniqueArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuthenticatorFindUniqueArgs>(args: SelectSubset<T, AuthenticatorFindUniqueArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Authenticator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuthenticatorFindUniqueOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuthenticatorFindUniqueOrThrowArgs>(args: SelectSubset<T, AuthenticatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Authenticator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuthenticatorFindFirstArgs>(args?: SelectSubset<T, AuthenticatorFindFirstArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Authenticator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindFirstOrThrowArgs} args - Arguments to find a Authenticator
     * @example
     * // Get one Authenticator
     * const authenticator = await prisma.authenticator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuthenticatorFindFirstOrThrowArgs>(args?: SelectSubset<T, AuthenticatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Authenticators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Authenticators
     * const authenticators = await prisma.authenticator.findMany()
     * 
     * // Get first 10 Authenticators
     * const authenticators = await prisma.authenticator.findMany({ take: 10 })
     * 
     * // Only select the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.findMany({ select: { credentialID: true } })
     * 
     */
    findMany<T extends AuthenticatorFindManyArgs>(args?: SelectSubset<T, AuthenticatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Authenticator.
     * @param {AuthenticatorCreateArgs} args - Arguments to create a Authenticator.
     * @example
     * // Create one Authenticator
     * const Authenticator = await prisma.authenticator.create({
     *   data: {
     *     // ... data to create a Authenticator
     *   }
     * })
     * 
     */
    create<T extends AuthenticatorCreateArgs>(args: SelectSubset<T, AuthenticatorCreateArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Authenticators.
     * @param {AuthenticatorCreateManyArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuthenticatorCreateManyArgs>(args?: SelectSubset<T, AuthenticatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Authenticators and returns the data saved in the database.
     * @param {AuthenticatorCreateManyAndReturnArgs} args - Arguments to create many Authenticators.
     * @example
     * // Create many Authenticators
     * const authenticator = await prisma.authenticator.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Authenticators and only return the `credentialID`
     * const authenticatorWithCredentialIDOnly = await prisma.authenticator.createManyAndReturn({ 
     *   select: { credentialID: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuthenticatorCreateManyAndReturnArgs>(args?: SelectSubset<T, AuthenticatorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Authenticator.
     * @param {AuthenticatorDeleteArgs} args - Arguments to delete one Authenticator.
     * @example
     * // Delete one Authenticator
     * const Authenticator = await prisma.authenticator.delete({
     *   where: {
     *     // ... filter to delete one Authenticator
     *   }
     * })
     * 
     */
    delete<T extends AuthenticatorDeleteArgs>(args: SelectSubset<T, AuthenticatorDeleteArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Authenticator.
     * @param {AuthenticatorUpdateArgs} args - Arguments to update one Authenticator.
     * @example
     * // Update one Authenticator
     * const authenticator = await prisma.authenticator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuthenticatorUpdateArgs>(args: SelectSubset<T, AuthenticatorUpdateArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Authenticators.
     * @param {AuthenticatorDeleteManyArgs} args - Arguments to filter Authenticators to delete.
     * @example
     * // Delete a few Authenticators
     * const { count } = await prisma.authenticator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuthenticatorDeleteManyArgs>(args?: SelectSubset<T, AuthenticatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Authenticators
     * const authenticator = await prisma.authenticator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuthenticatorUpdateManyArgs>(args: SelectSubset<T, AuthenticatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Authenticator.
     * @param {AuthenticatorUpsertArgs} args - Arguments to update or create a Authenticator.
     * @example
     * // Update or create a Authenticator
     * const authenticator = await prisma.authenticator.upsert({
     *   create: {
     *     // ... data to create a Authenticator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Authenticator we want to update
     *   }
     * })
     */
    upsert<T extends AuthenticatorUpsertArgs>(args: SelectSubset<T, AuthenticatorUpsertArgs<ExtArgs>>): Prisma__AuthenticatorClient<$Result.GetResult<Prisma.$AuthenticatorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Authenticators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorCountArgs} args - Arguments to filter Authenticators to count.
     * @example
     * // Count the number of Authenticators
     * const count = await prisma.authenticator.count({
     *   where: {
     *     // ... the filter for the Authenticators we want to count
     *   }
     * })
    **/
    count<T extends AuthenticatorCountArgs>(
      args?: Subset<T, AuthenticatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthenticatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthenticatorAggregateArgs>(args: Subset<T, AuthenticatorAggregateArgs>): Prisma.PrismaPromise<GetAuthenticatorAggregateType<T>>

    /**
     * Group by Authenticator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthenticatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuthenticatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuthenticatorGroupByArgs['orderBy'] }
        : { orderBy?: AuthenticatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuthenticatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthenticatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Authenticator model
   */
  readonly fields: AuthenticatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Authenticator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuthenticatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Authenticator model
   */ 
  interface AuthenticatorFieldRefs {
    readonly credentialID: FieldRef<"Authenticator", 'String'>
    readonly userId: FieldRef<"Authenticator", 'String'>
    readonly providerAccountId: FieldRef<"Authenticator", 'String'>
    readonly credentialPublicKey: FieldRef<"Authenticator", 'String'>
    readonly counter: FieldRef<"Authenticator", 'Int'>
    readonly credentialDeviceType: FieldRef<"Authenticator", 'String'>
    readonly credentialBackedUp: FieldRef<"Authenticator", 'Boolean'>
    readonly transports: FieldRef<"Authenticator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Authenticator findUnique
   */
  export type AuthenticatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator findUniqueOrThrow
   */
  export type AuthenticatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator findFirst
   */
  export type AuthenticatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator findFirstOrThrow
   */
  export type AuthenticatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticator to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Authenticators.
     */
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator findMany
   */
  export type AuthenticatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter, which Authenticators to fetch.
     */
    where?: AuthenticatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Authenticators to fetch.
     */
    orderBy?: AuthenticatorOrderByWithRelationInput | AuthenticatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Authenticators.
     */
    cursor?: AuthenticatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Authenticators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Authenticators.
     */
    skip?: number
    distinct?: AuthenticatorScalarFieldEnum | AuthenticatorScalarFieldEnum[]
  }

  /**
   * Authenticator create
   */
  export type AuthenticatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Authenticator.
     */
    data: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>
  }

  /**
   * Authenticator createMany
   */
  export type AuthenticatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Authenticator createManyAndReturn
   */
  export type AuthenticatorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Authenticators.
     */
    data: AuthenticatorCreateManyInput | AuthenticatorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Authenticator update
   */
  export type AuthenticatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Authenticator.
     */
    data: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>
    /**
     * Choose, which Authenticator to update.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator updateMany
   */
  export type AuthenticatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Authenticators.
     */
    data: XOR<AuthenticatorUpdateManyMutationInput, AuthenticatorUncheckedUpdateManyInput>
    /**
     * Filter which Authenticators to update
     */
    where?: AuthenticatorWhereInput
  }

  /**
   * Authenticator upsert
   */
  export type AuthenticatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Authenticator to update in case it exists.
     */
    where: AuthenticatorWhereUniqueInput
    /**
     * In case the Authenticator found by the `where` argument doesn't exist, create a new Authenticator with this data.
     */
    create: XOR<AuthenticatorCreateInput, AuthenticatorUncheckedCreateInput>
    /**
     * In case the Authenticator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuthenticatorUpdateInput, AuthenticatorUncheckedUpdateInput>
  }

  /**
   * Authenticator delete
   */
  export type AuthenticatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
    /**
     * Filter which Authenticator to delete.
     */
    where: AuthenticatorWhereUniqueInput
  }

  /**
   * Authenticator deleteMany
   */
  export type AuthenticatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Authenticators to delete
     */
    where?: AuthenticatorWhereInput
  }

  /**
   * Authenticator without action
   */
  export type AuthenticatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Authenticator
     */
    select?: AuthenticatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuthenticatorInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    zip: string | null
    countryCode: string | null
    additionalAddressLine: string | null
    userId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    street: string | null
    city: string | null
    zip: string | null
    countryCode: string | null
    additionalAddressLine: string | null
    userId: string | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    city: number
    zip: number
    countryCode: number
    additionalAddressLine: number
    userId: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    city?: true
    zip?: true
    countryCode?: true
    additionalAddressLine?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    city?: true
    zip?: true
    countryCode?: true
    additionalAddressLine?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    city?: true
    zip?: true
    countryCode?: true
    additionalAddressLine?: true
    userId?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine: string | null
    userId: string
    tenantId: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    city?: boolean
    zip?: boolean
    countryCode?: boolean
    additionalAddressLine?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | Address$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    city?: boolean
    zip?: boolean
    countryCode?: boolean
    additionalAddressLine?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | Address$tenantArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    street?: boolean
    city?: boolean
    zip?: boolean
    countryCode?: boolean
    additionalAddressLine?: boolean
    userId?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | Address$tenantArgs<ExtArgs>
  }
  export type AddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    tenant?: boolean | Address$tenantArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      tenant: Prisma.$TenantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      street: string
      city: string
      zip: string
      countryCode: string
      additionalAddressLine: string | null
      userId: string
      tenantId: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {AddressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `id`
     * const addressWithIdOnly = await prisma.address.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AddressCreateManyAndReturnArgs>(args?: SelectSubset<T, AddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenant<T extends Address$tenantArgs<ExtArgs> = {}>(args?: Subset<T, Address$tenantArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly zip: FieldRef<"Address", 'String'>
    readonly countryCode: FieldRef<"Address", 'String'>
    readonly additionalAddressLine: FieldRef<"Address", 'String'>
    readonly userId: FieldRef<"Address", 'String'>
    readonly tenantId: FieldRef<"Address", 'String'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address createManyAndReturn
   */
  export type AddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }

  /**
   * Address.tenant
   */
  export type Address$tenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    patientDetailsId: string | null
    isDeleted: boolean | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    patientDetailsId: string | null
    isDeleted: boolean | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    patientDetailsId: number
    isDeleted: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    patientDetailsId?: true
    isDeleted?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    patientDetailsId?: true
    isDeleted?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    patientDetailsId?: true
    isDeleted?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    createdById: string
    updatedAt: Date | null
    updatedById: string | null
    patientDetailsId: string
    isDeleted: boolean
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    patientDetailsId?: boolean
    isDeleted?: boolean
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    files?: boolean | Note$filesArgs<ExtArgs>
    Appointment?: boolean | Note$AppointmentArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    patientDetailsId?: boolean
    isDeleted?: boolean
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    patientDetailsId?: boolean
    isDeleted?: boolean
  }

  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    files?: boolean | Note$filesArgs<ExtArgs>
    Appointment?: boolean | Note$AppointmentArgs<ExtArgs>
    _count?: boolean | NoteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      createdBy: Prisma.$StaffMemberPayload<ExtArgs>
      updatedBy: Prisma.$StaffMemberPayload<ExtArgs> | null
      patientDetails: Prisma.$PatientDetailsPayload<ExtArgs>
      files: Prisma.$DocumentPayload<ExtArgs>[]
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      createdById: string
      updatedAt: Date | null
      updatedById: string | null
      patientDetailsId: string
      isDeleted: boolean
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends StaffMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffMemberDefaultArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends Note$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Note$updatedByArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    patientDetails<T extends PatientDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetailsDefaultArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    files<T extends Note$filesArgs<ExtArgs> = {}>(args?: Subset<T, Note$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany"> | Null>
    Appointment<T extends Note$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Note$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */ 
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly content: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly createdById: FieldRef<"Note", 'String'>
    readonly updatedAt: FieldRef<"Note", 'DateTime'>
    readonly updatedById: FieldRef<"Note", 'String'>
    readonly patientDetailsId: FieldRef<"Note", 'String'>
    readonly isDeleted: FieldRef<"Note", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
  }

  /**
   * Note.updatedBy
   */
  export type Note$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    where?: StaffMemberWhereInput
  }

  /**
   * Note.files
   */
  export type Note$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    cursor?: DocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Note.Appointment
   */
  export type Note$AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model Document
   */

  export type AggregateDocument = {
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  export type DocumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    contentType: string | null
    noteId: string | null
    quotationId: string | null
  }

  export type DocumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    path: string | null
    createdAt: Date | null
    createdById: string | null
    updatedAt: Date | null
    updatedById: string | null
    contentType: string | null
    noteId: string | null
    quotationId: string | null
  }

  export type DocumentCountAggregateOutputType = {
    id: number
    name: number
    path: number
    createdAt: number
    createdById: number
    updatedAt: number
    updatedById: number
    contentType: number
    noteId: number
    visibleTo: number
    quotationId: number
    _all: number
  }


  export type DocumentMinAggregateInputType = {
    id?: true
    name?: true
    path?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    contentType?: true
    noteId?: true
    quotationId?: true
  }

  export type DocumentMaxAggregateInputType = {
    id?: true
    name?: true
    path?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    contentType?: true
    noteId?: true
    quotationId?: true
  }

  export type DocumentCountAggregateInputType = {
    id?: true
    name?: true
    path?: true
    createdAt?: true
    createdById?: true
    updatedAt?: true
    updatedById?: true
    contentType?: true
    noteId?: true
    visibleTo?: true
    quotationId?: true
    _all?: true
  }

  export type DocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Document to aggregate.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Documents
    **/
    _count?: true | DocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DocumentMaxAggregateInputType
  }

  export type GetDocumentAggregateType<T extends DocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDocument[P]>
      : GetScalarType<T[P], AggregateDocument[P]>
  }




  export type DocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DocumentWhereInput
    orderBy?: DocumentOrderByWithAggregationInput | DocumentOrderByWithAggregationInput[]
    by: DocumentScalarFieldEnum[] | DocumentScalarFieldEnum
    having?: DocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DocumentCountAggregateInputType | true
    _min?: DocumentMinAggregateInputType
    _max?: DocumentMaxAggregateInputType
  }

  export type DocumentGroupByOutputType = {
    id: string
    name: string
    path: string
    createdAt: Date
    createdById: string
    updatedAt: Date | null
    updatedById: string | null
    contentType: string
    noteId: string | null
    visibleTo: $Enums.Role[]
    quotationId: string | null
    _count: DocumentCountAggregateOutputType | null
    _min: DocumentMinAggregateOutputType | null
    _max: DocumentMaxAggregateOutputType | null
  }

  type GetDocumentGroupByPayload<T extends DocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DocumentGroupByOutputType[P]>
            : GetScalarType<T[P], DocumentGroupByOutputType[P]>
        }
      >
    >


  export type DocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    contentType?: boolean
    noteId?: boolean
    visibleTo?: boolean
    quotationId?: boolean
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Document$updatedByArgs<ExtArgs>
    note?: boolean | Document$noteArgs<ExtArgs>
    quotation?: boolean | Document$quotationArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    path?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    contentType?: boolean
    noteId?: boolean
    visibleTo?: boolean
    quotationId?: boolean
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Document$updatedByArgs<ExtArgs>
    note?: boolean | Document$noteArgs<ExtArgs>
    quotation?: boolean | Document$quotationArgs<ExtArgs>
  }, ExtArgs["result"]["document"]>

  export type DocumentSelectScalar = {
    id?: boolean
    name?: boolean
    path?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    contentType?: boolean
    noteId?: boolean
    visibleTo?: boolean
    quotationId?: boolean
  }

  export type DocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Document$updatedByArgs<ExtArgs>
    note?: boolean | Document$noteArgs<ExtArgs>
    quotation?: boolean | Document$quotationArgs<ExtArgs>
  }
  export type DocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | StaffMemberDefaultArgs<ExtArgs>
    updatedBy?: boolean | Document$updatedByArgs<ExtArgs>
    note?: boolean | Document$noteArgs<ExtArgs>
    quotation?: boolean | Document$quotationArgs<ExtArgs>
  }

  export type $DocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Document"
    objects: {
      createdBy: Prisma.$StaffMemberPayload<ExtArgs>
      updatedBy: Prisma.$StaffMemberPayload<ExtArgs> | null
      note: Prisma.$NotePayload<ExtArgs> | null
      quotation: Prisma.$QuotationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      path: string
      createdAt: Date
      createdById: string
      updatedAt: Date | null
      updatedById: string | null
      contentType: string
      noteId: string | null
      visibleTo: $Enums.Role[]
      quotationId: string | null
    }, ExtArgs["result"]["document"]>
    composites: {}
  }

  type DocumentGetPayload<S extends boolean | null | undefined | DocumentDefaultArgs> = $Result.GetResult<Prisma.$DocumentPayload, S>

  type DocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DocumentCountAggregateInputType | true
    }

  export interface DocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Document'], meta: { name: 'Document' } }
    /**
     * Find zero or one Document that matches the filter.
     * @param {DocumentFindUniqueArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DocumentFindUniqueArgs>(args: SelectSubset<T, DocumentFindUniqueArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Document that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DocumentFindUniqueOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, DocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Document that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DocumentFindFirstArgs>(args?: SelectSubset<T, DocumentFindFirstArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Document that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindFirstOrThrowArgs} args - Arguments to find a Document
     * @example
     * // Get one Document
     * const document = await prisma.document.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, DocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Documents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Documents
     * const documents = await prisma.document.findMany()
     * 
     * // Get first 10 Documents
     * const documents = await prisma.document.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const documentWithIdOnly = await prisma.document.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DocumentFindManyArgs>(args?: SelectSubset<T, DocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Document.
     * @param {DocumentCreateArgs} args - Arguments to create a Document.
     * @example
     * // Create one Document
     * const Document = await prisma.document.create({
     *   data: {
     *     // ... data to create a Document
     *   }
     * })
     * 
     */
    create<T extends DocumentCreateArgs>(args: SelectSubset<T, DocumentCreateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Documents.
     * @param {DocumentCreateManyArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DocumentCreateManyArgs>(args?: SelectSubset<T, DocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Documents and returns the data saved in the database.
     * @param {DocumentCreateManyAndReturnArgs} args - Arguments to create many Documents.
     * @example
     * // Create many Documents
     * const document = await prisma.document.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Documents and only return the `id`
     * const documentWithIdOnly = await prisma.document.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, DocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Document.
     * @param {DocumentDeleteArgs} args - Arguments to delete one Document.
     * @example
     * // Delete one Document
     * const Document = await prisma.document.delete({
     *   where: {
     *     // ... filter to delete one Document
     *   }
     * })
     * 
     */
    delete<T extends DocumentDeleteArgs>(args: SelectSubset<T, DocumentDeleteArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Document.
     * @param {DocumentUpdateArgs} args - Arguments to update one Document.
     * @example
     * // Update one Document
     * const document = await prisma.document.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DocumentUpdateArgs>(args: SelectSubset<T, DocumentUpdateArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Documents.
     * @param {DocumentDeleteManyArgs} args - Arguments to filter Documents to delete.
     * @example
     * // Delete a few Documents
     * const { count } = await prisma.document.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DocumentDeleteManyArgs>(args?: SelectSubset<T, DocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Documents
     * const document = await prisma.document.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DocumentUpdateManyArgs>(args: SelectSubset<T, DocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Document.
     * @param {DocumentUpsertArgs} args - Arguments to update or create a Document.
     * @example
     * // Update or create a Document
     * const document = await prisma.document.upsert({
     *   create: {
     *     // ... data to create a Document
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Document we want to update
     *   }
     * })
     */
    upsert<T extends DocumentUpsertArgs>(args: SelectSubset<T, DocumentUpsertArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Documents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentCountArgs} args - Arguments to filter Documents to count.
     * @example
     * // Count the number of Documents
     * const count = await prisma.document.count({
     *   where: {
     *     // ... the filter for the Documents we want to count
     *   }
     * })
    **/
    count<T extends DocumentCountArgs>(
      args?: Subset<T, DocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DocumentAggregateArgs>(args: Subset<T, DocumentAggregateArgs>): Prisma.PrismaPromise<GetDocumentAggregateType<T>>

    /**
     * Group by Document.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DocumentGroupByArgs['orderBy'] }
        : { orderBy?: DocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Document model
   */
  readonly fields: DocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Document.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends StaffMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffMemberDefaultArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    updatedBy<T extends Document$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Document$updatedByArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    note<T extends Document$noteArgs<ExtArgs> = {}>(args?: Subset<T, Document$noteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    quotation<T extends Document$quotationArgs<ExtArgs> = {}>(args?: Subset<T, Document$quotationArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Document model
   */ 
  interface DocumentFieldRefs {
    readonly id: FieldRef<"Document", 'String'>
    readonly name: FieldRef<"Document", 'String'>
    readonly path: FieldRef<"Document", 'String'>
    readonly createdAt: FieldRef<"Document", 'DateTime'>
    readonly createdById: FieldRef<"Document", 'String'>
    readonly updatedAt: FieldRef<"Document", 'DateTime'>
    readonly updatedById: FieldRef<"Document", 'String'>
    readonly contentType: FieldRef<"Document", 'String'>
    readonly noteId: FieldRef<"Document", 'String'>
    readonly visibleTo: FieldRef<"Document", 'Role[]'>
    readonly quotationId: FieldRef<"Document", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Document findUnique
   */
  export type DocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findUniqueOrThrow
   */
  export type DocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document findFirst
   */
  export type DocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findFirstOrThrow
   */
  export type DocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Document to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Documents.
     */
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document findMany
   */
  export type DocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter, which Documents to fetch.
     */
    where?: DocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Documents to fetch.
     */
    orderBy?: DocumentOrderByWithRelationInput | DocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Documents.
     */
    cursor?: DocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Documents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Documents.
     */
    skip?: number
    distinct?: DocumentScalarFieldEnum | DocumentScalarFieldEnum[]
  }

  /**
   * Document create
   */
  export type DocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a Document.
     */
    data: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
  }

  /**
   * Document createMany
   */
  export type DocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Document createManyAndReturn
   */
  export type DocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Documents.
     */
    data: DocumentCreateManyInput | DocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Document update
   */
  export type DocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a Document.
     */
    data: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
    /**
     * Choose, which Document to update.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document updateMany
   */
  export type DocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Documents.
     */
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyInput>
    /**
     * Filter which Documents to update
     */
    where?: DocumentWhereInput
  }

  /**
   * Document upsert
   */
  export type DocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the Document to update in case it exists.
     */
    where: DocumentWhereUniqueInput
    /**
     * In case the Document found by the `where` argument doesn't exist, create a new Document with this data.
     */
    create: XOR<DocumentCreateInput, DocumentUncheckedCreateInput>
    /**
     * In case the Document was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DocumentUpdateInput, DocumentUncheckedUpdateInput>
  }

  /**
   * Document delete
   */
  export type DocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    /**
     * Filter which Document to delete.
     */
    where: DocumentWhereUniqueInput
  }

  /**
   * Document deleteMany
   */
  export type DocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Documents to delete
     */
    where?: DocumentWhereInput
  }

  /**
   * Document.updatedBy
   */
  export type Document$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffMember
     */
    select?: StaffMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffMemberInclude<ExtArgs> | null
    where?: StaffMemberWhereInput
  }

  /**
   * Document.note
   */
  export type Document$noteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }

  /**
   * Document.quotation
   */
  export type Document$quotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    where?: QuotationWhereInput
  }

  /**
   * Document without action
   */
  export type DocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    status: $Enums.AppointmentStatus | null
    patientDetailsId: string | null
    staffMemberId: string | null
    startAt: Date | null
    endAt: Date | null
    reportNoteId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    status: $Enums.AppointmentStatus | null
    patientDetailsId: string | null
    staffMemberId: string | null
    startAt: Date | null
    endAt: Date | null
    reportNoteId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    status: number
    patientDetailsId: number
    staffMemberId: number
    startAt: number
    endAt: number
    reportNoteId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    status?: true
    patientDetailsId?: true
    staffMemberId?: true
    startAt?: true
    endAt?: true
    reportNoteId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    status?: true
    patientDetailsId?: true
    staffMemberId?: true
    startAt?: true
    endAt?: true
    reportNoteId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    status?: true
    patientDetailsId?: true
    staffMemberId?: true
    startAt?: true
    endAt?: true
    reportNoteId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    staffMemberId: string
    startAt: Date
    endAt: Date
    reportNoteId: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    patientDetailsId?: boolean
    staffMemberId?: boolean
    startAt?: boolean
    endAt?: boolean
    reportNoteId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    staffMember?: boolean | StaffMemberDefaultArgs<ExtArgs>
    reportNote?: boolean | Appointment$reportNoteArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    patientDetailsId?: boolean
    staffMemberId?: boolean
    startAt?: boolean
    endAt?: boolean
    reportNoteId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    staffMember?: boolean | StaffMemberDefaultArgs<ExtArgs>
    reportNote?: boolean | Appointment$reportNoteArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    status?: boolean
    patientDetailsId?: boolean
    staffMemberId?: boolean
    startAt?: boolean
    endAt?: boolean
    reportNoteId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    staffMember?: boolean | StaffMemberDefaultArgs<ExtArgs>
    reportNote?: boolean | Appointment$reportNoteArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    staffMember?: boolean | StaffMemberDefaultArgs<ExtArgs>
    reportNote?: boolean | Appointment$reportNoteArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      patientDetails: Prisma.$PatientDetailsPayload<ExtArgs>
      staffMember: Prisma.$StaffMemberPayload<ExtArgs>
      reportNote: Prisma.$NotePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.AppointmentStatus
      patientDetailsId: string
      staffMemberId: string
      startAt: Date
      endAt: Date
      reportNoteId: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientDetails<T extends PatientDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetailsDefaultArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    staffMember<T extends StaffMemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StaffMemberDefaultArgs<ExtArgs>>): Prisma__StaffMemberClient<$Result.GetResult<Prisma.$StaffMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reportNote<T extends Appointment$reportNoteArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$reportNoteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */ 
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly patientDetailsId: FieldRef<"Appointment", 'String'>
    readonly staffMemberId: FieldRef<"Appointment", 'String'>
    readonly startAt: FieldRef<"Appointment", 'DateTime'>
    readonly endAt: FieldRef<"Appointment", 'DateTime'>
    readonly reportNoteId: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment.reportNote
   */
  export type Appointment$reportNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model FeatureFlag
   */

  export type AggregateFeatureFlag = {
    _count: FeatureFlagCountAggregateOutputType | null
    _min: FeatureFlagMinAggregateOutputType | null
    _max: FeatureFlagMaxAggregateOutputType | null
  }

  export type FeatureFlagMinAggregateOutputType = {
    id: string | null
    key: $Enums.FeatureFlagKey | null
    isEnabled: boolean | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeatureFlagMaxAggregateOutputType = {
    id: string | null
    key: $Enums.FeatureFlagKey | null
    isEnabled: boolean | null
    tenantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FeatureFlagCountAggregateOutputType = {
    id: number
    key: number
    isEnabled: number
    tenantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FeatureFlagMinAggregateInputType = {
    id?: true
    key?: true
    isEnabled?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeatureFlagMaxAggregateInputType = {
    id?: true
    key?: true
    isEnabled?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FeatureFlagCountAggregateInputType = {
    id?: true
    key?: true
    isEnabled?: true
    tenantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FeatureFlagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureFlag to aggregate.
     */
    where?: FeatureFlagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureFlags to fetch.
     */
    orderBy?: FeatureFlagOrderByWithRelationInput | FeatureFlagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeatureFlagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureFlags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureFlags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeatureFlags
    **/
    _count?: true | FeatureFlagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeatureFlagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeatureFlagMaxAggregateInputType
  }

  export type GetFeatureFlagAggregateType<T extends FeatureFlagAggregateArgs> = {
        [P in keyof T & keyof AggregateFeatureFlag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeatureFlag[P]>
      : GetScalarType<T[P], AggregateFeatureFlag[P]>
  }




  export type FeatureFlagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeatureFlagWhereInput
    orderBy?: FeatureFlagOrderByWithAggregationInput | FeatureFlagOrderByWithAggregationInput[]
    by: FeatureFlagScalarFieldEnum[] | FeatureFlagScalarFieldEnum
    having?: FeatureFlagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeatureFlagCountAggregateInputType | true
    _min?: FeatureFlagMinAggregateInputType
    _max?: FeatureFlagMaxAggregateInputType
  }

  export type FeatureFlagGroupByOutputType = {
    id: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    tenantId: string
    createdAt: Date
    updatedAt: Date | null
    _count: FeatureFlagCountAggregateOutputType | null
    _min: FeatureFlagMinAggregateOutputType | null
    _max: FeatureFlagMaxAggregateOutputType | null
  }

  type GetFeatureFlagGroupByPayload<T extends FeatureFlagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeatureFlagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeatureFlagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeatureFlagGroupByOutputType[P]>
            : GetScalarType<T[P], FeatureFlagGroupByOutputType[P]>
        }
      >
    >


  export type FeatureFlagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    isEnabled?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureFlag"]>

  export type FeatureFlagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    isEnabled?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["featureFlag"]>

  export type FeatureFlagSelectScalar = {
    id?: boolean
    key?: boolean
    isEnabled?: boolean
    tenantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FeatureFlagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }
  export type FeatureFlagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $FeatureFlagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeatureFlag"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: $Enums.FeatureFlagKey
      isEnabled: boolean
      tenantId: string
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["featureFlag"]>
    composites: {}
  }

  type FeatureFlagGetPayload<S extends boolean | null | undefined | FeatureFlagDefaultArgs> = $Result.GetResult<Prisma.$FeatureFlagPayload, S>

  type FeatureFlagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeatureFlagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeatureFlagCountAggregateInputType | true
    }

  export interface FeatureFlagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeatureFlag'], meta: { name: 'FeatureFlag' } }
    /**
     * Find zero or one FeatureFlag that matches the filter.
     * @param {FeatureFlagFindUniqueArgs} args - Arguments to find a FeatureFlag
     * @example
     * // Get one FeatureFlag
     * const featureFlag = await prisma.featureFlag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeatureFlagFindUniqueArgs>(args: SelectSubset<T, FeatureFlagFindUniqueArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FeatureFlag that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeatureFlagFindUniqueOrThrowArgs} args - Arguments to find a FeatureFlag
     * @example
     * // Get one FeatureFlag
     * const featureFlag = await prisma.featureFlag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeatureFlagFindUniqueOrThrowArgs>(args: SelectSubset<T, FeatureFlagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FeatureFlag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagFindFirstArgs} args - Arguments to find a FeatureFlag
     * @example
     * // Get one FeatureFlag
     * const featureFlag = await prisma.featureFlag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeatureFlagFindFirstArgs>(args?: SelectSubset<T, FeatureFlagFindFirstArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FeatureFlag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagFindFirstOrThrowArgs} args - Arguments to find a FeatureFlag
     * @example
     * // Get one FeatureFlag
     * const featureFlag = await prisma.featureFlag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeatureFlagFindFirstOrThrowArgs>(args?: SelectSubset<T, FeatureFlagFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FeatureFlags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeatureFlags
     * const featureFlags = await prisma.featureFlag.findMany()
     * 
     * // Get first 10 FeatureFlags
     * const featureFlags = await prisma.featureFlag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const featureFlagWithIdOnly = await prisma.featureFlag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeatureFlagFindManyArgs>(args?: SelectSubset<T, FeatureFlagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FeatureFlag.
     * @param {FeatureFlagCreateArgs} args - Arguments to create a FeatureFlag.
     * @example
     * // Create one FeatureFlag
     * const FeatureFlag = await prisma.featureFlag.create({
     *   data: {
     *     // ... data to create a FeatureFlag
     *   }
     * })
     * 
     */
    create<T extends FeatureFlagCreateArgs>(args: SelectSubset<T, FeatureFlagCreateArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FeatureFlags.
     * @param {FeatureFlagCreateManyArgs} args - Arguments to create many FeatureFlags.
     * @example
     * // Create many FeatureFlags
     * const featureFlag = await prisma.featureFlag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeatureFlagCreateManyArgs>(args?: SelectSubset<T, FeatureFlagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeatureFlags and returns the data saved in the database.
     * @param {FeatureFlagCreateManyAndReturnArgs} args - Arguments to create many FeatureFlags.
     * @example
     * // Create many FeatureFlags
     * const featureFlag = await prisma.featureFlag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeatureFlags and only return the `id`
     * const featureFlagWithIdOnly = await prisma.featureFlag.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeatureFlagCreateManyAndReturnArgs>(args?: SelectSubset<T, FeatureFlagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FeatureFlag.
     * @param {FeatureFlagDeleteArgs} args - Arguments to delete one FeatureFlag.
     * @example
     * // Delete one FeatureFlag
     * const FeatureFlag = await prisma.featureFlag.delete({
     *   where: {
     *     // ... filter to delete one FeatureFlag
     *   }
     * })
     * 
     */
    delete<T extends FeatureFlagDeleteArgs>(args: SelectSubset<T, FeatureFlagDeleteArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FeatureFlag.
     * @param {FeatureFlagUpdateArgs} args - Arguments to update one FeatureFlag.
     * @example
     * // Update one FeatureFlag
     * const featureFlag = await prisma.featureFlag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeatureFlagUpdateArgs>(args: SelectSubset<T, FeatureFlagUpdateArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FeatureFlags.
     * @param {FeatureFlagDeleteManyArgs} args - Arguments to filter FeatureFlags to delete.
     * @example
     * // Delete a few FeatureFlags
     * const { count } = await prisma.featureFlag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeatureFlagDeleteManyArgs>(args?: SelectSubset<T, FeatureFlagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeatureFlags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeatureFlags
     * const featureFlag = await prisma.featureFlag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeatureFlagUpdateManyArgs>(args: SelectSubset<T, FeatureFlagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeatureFlag.
     * @param {FeatureFlagUpsertArgs} args - Arguments to update or create a FeatureFlag.
     * @example
     * // Update or create a FeatureFlag
     * const featureFlag = await prisma.featureFlag.upsert({
     *   create: {
     *     // ... data to create a FeatureFlag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeatureFlag we want to update
     *   }
     * })
     */
    upsert<T extends FeatureFlagUpsertArgs>(args: SelectSubset<T, FeatureFlagUpsertArgs<ExtArgs>>): Prisma__FeatureFlagClient<$Result.GetResult<Prisma.$FeatureFlagPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FeatureFlags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagCountArgs} args - Arguments to filter FeatureFlags to count.
     * @example
     * // Count the number of FeatureFlags
     * const count = await prisma.featureFlag.count({
     *   where: {
     *     // ... the filter for the FeatureFlags we want to count
     *   }
     * })
    **/
    count<T extends FeatureFlagCountArgs>(
      args?: Subset<T, FeatureFlagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeatureFlagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeatureFlag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeatureFlagAggregateArgs>(args: Subset<T, FeatureFlagAggregateArgs>): Prisma.PrismaPromise<GetFeatureFlagAggregateType<T>>

    /**
     * Group by FeatureFlag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeatureFlagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeatureFlagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeatureFlagGroupByArgs['orderBy'] }
        : { orderBy?: FeatureFlagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeatureFlagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeatureFlagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeatureFlag model
   */
  readonly fields: FeatureFlagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeatureFlag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeatureFlagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeatureFlag model
   */ 
  interface FeatureFlagFieldRefs {
    readonly id: FieldRef<"FeatureFlag", 'String'>
    readonly key: FieldRef<"FeatureFlag", 'FeatureFlagKey'>
    readonly isEnabled: FieldRef<"FeatureFlag", 'Boolean'>
    readonly tenantId: FieldRef<"FeatureFlag", 'String'>
    readonly createdAt: FieldRef<"FeatureFlag", 'DateTime'>
    readonly updatedAt: FieldRef<"FeatureFlag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeatureFlag findUnique
   */
  export type FeatureFlagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter, which FeatureFlag to fetch.
     */
    where: FeatureFlagWhereUniqueInput
  }

  /**
   * FeatureFlag findUniqueOrThrow
   */
  export type FeatureFlagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter, which FeatureFlag to fetch.
     */
    where: FeatureFlagWhereUniqueInput
  }

  /**
   * FeatureFlag findFirst
   */
  export type FeatureFlagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter, which FeatureFlag to fetch.
     */
    where?: FeatureFlagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureFlags to fetch.
     */
    orderBy?: FeatureFlagOrderByWithRelationInput | FeatureFlagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureFlags.
     */
    cursor?: FeatureFlagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureFlags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureFlags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureFlags.
     */
    distinct?: FeatureFlagScalarFieldEnum | FeatureFlagScalarFieldEnum[]
  }

  /**
   * FeatureFlag findFirstOrThrow
   */
  export type FeatureFlagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter, which FeatureFlag to fetch.
     */
    where?: FeatureFlagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureFlags to fetch.
     */
    orderBy?: FeatureFlagOrderByWithRelationInput | FeatureFlagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeatureFlags.
     */
    cursor?: FeatureFlagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureFlags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureFlags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeatureFlags.
     */
    distinct?: FeatureFlagScalarFieldEnum | FeatureFlagScalarFieldEnum[]
  }

  /**
   * FeatureFlag findMany
   */
  export type FeatureFlagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter, which FeatureFlags to fetch.
     */
    where?: FeatureFlagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeatureFlags to fetch.
     */
    orderBy?: FeatureFlagOrderByWithRelationInput | FeatureFlagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeatureFlags.
     */
    cursor?: FeatureFlagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeatureFlags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeatureFlags.
     */
    skip?: number
    distinct?: FeatureFlagScalarFieldEnum | FeatureFlagScalarFieldEnum[]
  }

  /**
   * FeatureFlag create
   */
  export type FeatureFlagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * The data needed to create a FeatureFlag.
     */
    data: XOR<FeatureFlagCreateInput, FeatureFlagUncheckedCreateInput>
  }

  /**
   * FeatureFlag createMany
   */
  export type FeatureFlagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeatureFlags.
     */
    data: FeatureFlagCreateManyInput | FeatureFlagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeatureFlag createManyAndReturn
   */
  export type FeatureFlagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FeatureFlags.
     */
    data: FeatureFlagCreateManyInput | FeatureFlagCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeatureFlag update
   */
  export type FeatureFlagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * The data needed to update a FeatureFlag.
     */
    data: XOR<FeatureFlagUpdateInput, FeatureFlagUncheckedUpdateInput>
    /**
     * Choose, which FeatureFlag to update.
     */
    where: FeatureFlagWhereUniqueInput
  }

  /**
   * FeatureFlag updateMany
   */
  export type FeatureFlagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeatureFlags.
     */
    data: XOR<FeatureFlagUpdateManyMutationInput, FeatureFlagUncheckedUpdateManyInput>
    /**
     * Filter which FeatureFlags to update
     */
    where?: FeatureFlagWhereInput
  }

  /**
   * FeatureFlag upsert
   */
  export type FeatureFlagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * The filter to search for the FeatureFlag to update in case it exists.
     */
    where: FeatureFlagWhereUniqueInput
    /**
     * In case the FeatureFlag found by the `where` argument doesn't exist, create a new FeatureFlag with this data.
     */
    create: XOR<FeatureFlagCreateInput, FeatureFlagUncheckedCreateInput>
    /**
     * In case the FeatureFlag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeatureFlagUpdateInput, FeatureFlagUncheckedUpdateInput>
  }

  /**
   * FeatureFlag delete
   */
  export type FeatureFlagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
    /**
     * Filter which FeatureFlag to delete.
     */
    where: FeatureFlagWhereUniqueInput
  }

  /**
   * FeatureFlag deleteMany
   */
  export type FeatureFlagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeatureFlags to delete
     */
    where?: FeatureFlagWhereInput
  }

  /**
   * FeatureFlag without action
   */
  export type FeatureFlagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeatureFlag
     */
    select?: FeatureFlagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeatureFlagInclude<ExtArgs> | null
  }


  /**
   * Model PredefinedActType
   */

  export type AggregatePredefinedActType = {
    _count: PredefinedActTypeCountAggregateOutputType | null
    _avg: PredefinedActTypeAvgAggregateOutputType | null
    _sum: PredefinedActTypeSumAggregateOutputType | null
    _min: PredefinedActTypeMinAggregateOutputType | null
    _max: PredefinedActTypeMaxAggregateOutputType | null
  }

  export type PredefinedActTypeAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type PredefinedActTypeSumAggregateOutputType = {
    price: Decimal | null
  }

  export type PredefinedActTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
    price: Decimal | null
    currency: $Enums.Currency | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedActTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    tenantId: string | null
    price: Decimal | null
    currency: $Enums.Currency | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedActTypeCountAggregateOutputType = {
    id: number
    name: number
    tenantId: number
    price: number
    currency: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PredefinedActTypeAvgAggregateInputType = {
    price?: true
  }

  export type PredefinedActTypeSumAggregateInputType = {
    price?: true
  }

  export type PredefinedActTypeMinAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    price?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedActTypeMaxAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    price?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedActTypeCountAggregateInputType = {
    id?: true
    name?: true
    tenantId?: true
    price?: true
    currency?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PredefinedActTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedActType to aggregate.
     */
    where?: PredefinedActTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActTypes to fetch.
     */
    orderBy?: PredefinedActTypeOrderByWithRelationInput | PredefinedActTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredefinedActTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredefinedActTypes
    **/
    _count?: true | PredefinedActTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredefinedActTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredefinedActTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredefinedActTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredefinedActTypeMaxAggregateInputType
  }

  export type GetPredefinedActTypeAggregateType<T extends PredefinedActTypeAggregateArgs> = {
        [P in keyof T & keyof AggregatePredefinedActType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredefinedActType[P]>
      : GetScalarType<T[P], AggregatePredefinedActType[P]>
  }




  export type PredefinedActTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredefinedActTypeWhereInput
    orderBy?: PredefinedActTypeOrderByWithAggregationInput | PredefinedActTypeOrderByWithAggregationInput[]
    by: PredefinedActTypeScalarFieldEnum[] | PredefinedActTypeScalarFieldEnum
    having?: PredefinedActTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredefinedActTypeCountAggregateInputType | true
    _avg?: PredefinedActTypeAvgAggregateInputType
    _sum?: PredefinedActTypeSumAggregateInputType
    _min?: PredefinedActTypeMinAggregateInputType
    _max?: PredefinedActTypeMaxAggregateInputType
  }

  export type PredefinedActTypeGroupByOutputType = {
    id: string
    name: string
    tenantId: string
    price: Decimal
    currency: $Enums.Currency
    createdAt: Date
    updatedAt: Date
    _count: PredefinedActTypeCountAggregateOutputType | null
    _avg: PredefinedActTypeAvgAggregateOutputType | null
    _sum: PredefinedActTypeSumAggregateOutputType | null
    _min: PredefinedActTypeMinAggregateOutputType | null
    _max: PredefinedActTypeMaxAggregateOutputType | null
  }

  type GetPredefinedActTypeGroupByPayload<T extends PredefinedActTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredefinedActTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredefinedActTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredefinedActTypeGroupByOutputType[P]>
            : GetScalarType<T[P], PredefinedActTypeGroupByOutputType[P]>
        }
      >
    >


  export type PredefinedActTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    price?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    predefinedActSubTypes?: boolean | PredefinedActType$predefinedActSubTypesArgs<ExtArgs>
    QuotationLine?: boolean | PredefinedActType$QuotationLineArgs<ExtArgs>
    _count?: boolean | PredefinedActTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedActType"]>

  export type PredefinedActTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tenantId?: boolean
    price?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedActType"]>

  export type PredefinedActTypeSelectScalar = {
    id?: boolean
    name?: boolean
    tenantId?: boolean
    price?: boolean
    currency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PredefinedActTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
    predefinedActSubTypes?: boolean | PredefinedActType$predefinedActSubTypesArgs<ExtArgs>
    QuotationLine?: boolean | PredefinedActType$QuotationLineArgs<ExtArgs>
    _count?: boolean | PredefinedActTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PredefinedActTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tenant?: boolean | TenantDefaultArgs<ExtArgs>
  }

  export type $PredefinedActTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredefinedActType"
    objects: {
      tenant: Prisma.$TenantPayload<ExtArgs>
      predefinedActSubTypes: Prisma.$PredefinedActSubTypesPayload<ExtArgs>[]
      QuotationLine: Prisma.$QuotationLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      tenantId: string
      price: Prisma.Decimal
      currency: $Enums.Currency
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["predefinedActType"]>
    composites: {}
  }

  type PredefinedActTypeGetPayload<S extends boolean | null | undefined | PredefinedActTypeDefaultArgs> = $Result.GetResult<Prisma.$PredefinedActTypePayload, S>

  type PredefinedActTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PredefinedActTypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PredefinedActTypeCountAggregateInputType | true
    }

  export interface PredefinedActTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredefinedActType'], meta: { name: 'PredefinedActType' } }
    /**
     * Find zero or one PredefinedActType that matches the filter.
     * @param {PredefinedActTypeFindUniqueArgs} args - Arguments to find a PredefinedActType
     * @example
     * // Get one PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredefinedActTypeFindUniqueArgs>(args: SelectSubset<T, PredefinedActTypeFindUniqueArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PredefinedActType that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PredefinedActTypeFindUniqueOrThrowArgs} args - Arguments to find a PredefinedActType
     * @example
     * // Get one PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredefinedActTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, PredefinedActTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PredefinedActType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeFindFirstArgs} args - Arguments to find a PredefinedActType
     * @example
     * // Get one PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredefinedActTypeFindFirstArgs>(args?: SelectSubset<T, PredefinedActTypeFindFirstArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PredefinedActType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeFindFirstOrThrowArgs} args - Arguments to find a PredefinedActType
     * @example
     * // Get one PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredefinedActTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, PredefinedActTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PredefinedActTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredefinedActTypes
     * const predefinedActTypes = await prisma.predefinedActType.findMany()
     * 
     * // Get first 10 PredefinedActTypes
     * const predefinedActTypes = await prisma.predefinedActType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predefinedActTypeWithIdOnly = await prisma.predefinedActType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PredefinedActTypeFindManyArgs>(args?: SelectSubset<T, PredefinedActTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PredefinedActType.
     * @param {PredefinedActTypeCreateArgs} args - Arguments to create a PredefinedActType.
     * @example
     * // Create one PredefinedActType
     * const PredefinedActType = await prisma.predefinedActType.create({
     *   data: {
     *     // ... data to create a PredefinedActType
     *   }
     * })
     * 
     */
    create<T extends PredefinedActTypeCreateArgs>(args: SelectSubset<T, PredefinedActTypeCreateArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PredefinedActTypes.
     * @param {PredefinedActTypeCreateManyArgs} args - Arguments to create many PredefinedActTypes.
     * @example
     * // Create many PredefinedActTypes
     * const predefinedActType = await prisma.predefinedActType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredefinedActTypeCreateManyArgs>(args?: SelectSubset<T, PredefinedActTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredefinedActTypes and returns the data saved in the database.
     * @param {PredefinedActTypeCreateManyAndReturnArgs} args - Arguments to create many PredefinedActTypes.
     * @example
     * // Create many PredefinedActTypes
     * const predefinedActType = await prisma.predefinedActType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredefinedActTypes and only return the `id`
     * const predefinedActTypeWithIdOnly = await prisma.predefinedActType.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredefinedActTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, PredefinedActTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PredefinedActType.
     * @param {PredefinedActTypeDeleteArgs} args - Arguments to delete one PredefinedActType.
     * @example
     * // Delete one PredefinedActType
     * const PredefinedActType = await prisma.predefinedActType.delete({
     *   where: {
     *     // ... filter to delete one PredefinedActType
     *   }
     * })
     * 
     */
    delete<T extends PredefinedActTypeDeleteArgs>(args: SelectSubset<T, PredefinedActTypeDeleteArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PredefinedActType.
     * @param {PredefinedActTypeUpdateArgs} args - Arguments to update one PredefinedActType.
     * @example
     * // Update one PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredefinedActTypeUpdateArgs>(args: SelectSubset<T, PredefinedActTypeUpdateArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PredefinedActTypes.
     * @param {PredefinedActTypeDeleteManyArgs} args - Arguments to filter PredefinedActTypes to delete.
     * @example
     * // Delete a few PredefinedActTypes
     * const { count } = await prisma.predefinedActType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredefinedActTypeDeleteManyArgs>(args?: SelectSubset<T, PredefinedActTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredefinedActTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredefinedActTypes
     * const predefinedActType = await prisma.predefinedActType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredefinedActTypeUpdateManyArgs>(args: SelectSubset<T, PredefinedActTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PredefinedActType.
     * @param {PredefinedActTypeUpsertArgs} args - Arguments to update or create a PredefinedActType.
     * @example
     * // Update or create a PredefinedActType
     * const predefinedActType = await prisma.predefinedActType.upsert({
     *   create: {
     *     // ... data to create a PredefinedActType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredefinedActType we want to update
     *   }
     * })
     */
    upsert<T extends PredefinedActTypeUpsertArgs>(args: SelectSubset<T, PredefinedActTypeUpsertArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PredefinedActTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeCountArgs} args - Arguments to filter PredefinedActTypes to count.
     * @example
     * // Count the number of PredefinedActTypes
     * const count = await prisma.predefinedActType.count({
     *   where: {
     *     // ... the filter for the PredefinedActTypes we want to count
     *   }
     * })
    **/
    count<T extends PredefinedActTypeCountArgs>(
      args?: Subset<T, PredefinedActTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredefinedActTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredefinedActType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredefinedActTypeAggregateArgs>(args: Subset<T, PredefinedActTypeAggregateArgs>): Prisma.PrismaPromise<GetPredefinedActTypeAggregateType<T>>

    /**
     * Group by PredefinedActType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredefinedActTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredefinedActTypeGroupByArgs['orderBy'] }
        : { orderBy?: PredefinedActTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredefinedActTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredefinedActTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredefinedActType model
   */
  readonly fields: PredefinedActTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredefinedActType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredefinedActTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tenant<T extends TenantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TenantDefaultArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    predefinedActSubTypes<T extends PredefinedActType$predefinedActSubTypesArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedActType$predefinedActSubTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findMany"> | Null>
    QuotationLine<T extends PredefinedActType$QuotationLineArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedActType$QuotationLineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredefinedActType model
   */ 
  interface PredefinedActTypeFieldRefs {
    readonly id: FieldRef<"PredefinedActType", 'String'>
    readonly name: FieldRef<"PredefinedActType", 'String'>
    readonly tenantId: FieldRef<"PredefinedActType", 'String'>
    readonly price: FieldRef<"PredefinedActType", 'Decimal'>
    readonly currency: FieldRef<"PredefinedActType", 'Currency'>
    readonly createdAt: FieldRef<"PredefinedActType", 'DateTime'>
    readonly updatedAt: FieldRef<"PredefinedActType", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PredefinedActType findUnique
   */
  export type PredefinedActTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActType to fetch.
     */
    where: PredefinedActTypeWhereUniqueInput
  }

  /**
   * PredefinedActType findUniqueOrThrow
   */
  export type PredefinedActTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActType to fetch.
     */
    where: PredefinedActTypeWhereUniqueInput
  }

  /**
   * PredefinedActType findFirst
   */
  export type PredefinedActTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActType to fetch.
     */
    where?: PredefinedActTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActTypes to fetch.
     */
    orderBy?: PredefinedActTypeOrderByWithRelationInput | PredefinedActTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedActTypes.
     */
    cursor?: PredefinedActTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedActTypes.
     */
    distinct?: PredefinedActTypeScalarFieldEnum | PredefinedActTypeScalarFieldEnum[]
  }

  /**
   * PredefinedActType findFirstOrThrow
   */
  export type PredefinedActTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActType to fetch.
     */
    where?: PredefinedActTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActTypes to fetch.
     */
    orderBy?: PredefinedActTypeOrderByWithRelationInput | PredefinedActTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedActTypes.
     */
    cursor?: PredefinedActTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedActTypes.
     */
    distinct?: PredefinedActTypeScalarFieldEnum | PredefinedActTypeScalarFieldEnum[]
  }

  /**
   * PredefinedActType findMany
   */
  export type PredefinedActTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActTypes to fetch.
     */
    where?: PredefinedActTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActTypes to fetch.
     */
    orderBy?: PredefinedActTypeOrderByWithRelationInput | PredefinedActTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredefinedActTypes.
     */
    cursor?: PredefinedActTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActTypes.
     */
    skip?: number
    distinct?: PredefinedActTypeScalarFieldEnum | PredefinedActTypeScalarFieldEnum[]
  }

  /**
   * PredefinedActType create
   */
  export type PredefinedActTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a PredefinedActType.
     */
    data: XOR<PredefinedActTypeCreateInput, PredefinedActTypeUncheckedCreateInput>
  }

  /**
   * PredefinedActType createMany
   */
  export type PredefinedActTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredefinedActTypes.
     */
    data: PredefinedActTypeCreateManyInput | PredefinedActTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredefinedActType createManyAndReturn
   */
  export type PredefinedActTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PredefinedActTypes.
     */
    data: PredefinedActTypeCreateManyInput | PredefinedActTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredefinedActType update
   */
  export type PredefinedActTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a PredefinedActType.
     */
    data: XOR<PredefinedActTypeUpdateInput, PredefinedActTypeUncheckedUpdateInput>
    /**
     * Choose, which PredefinedActType to update.
     */
    where: PredefinedActTypeWhereUniqueInput
  }

  /**
   * PredefinedActType updateMany
   */
  export type PredefinedActTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredefinedActTypes.
     */
    data: XOR<PredefinedActTypeUpdateManyMutationInput, PredefinedActTypeUncheckedUpdateManyInput>
    /**
     * Filter which PredefinedActTypes to update
     */
    where?: PredefinedActTypeWhereInput
  }

  /**
   * PredefinedActType upsert
   */
  export type PredefinedActTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the PredefinedActType to update in case it exists.
     */
    where: PredefinedActTypeWhereUniqueInput
    /**
     * In case the PredefinedActType found by the `where` argument doesn't exist, create a new PredefinedActType with this data.
     */
    create: XOR<PredefinedActTypeCreateInput, PredefinedActTypeUncheckedCreateInput>
    /**
     * In case the PredefinedActType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredefinedActTypeUpdateInput, PredefinedActTypeUncheckedUpdateInput>
  }

  /**
   * PredefinedActType delete
   */
  export type PredefinedActTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
    /**
     * Filter which PredefinedActType to delete.
     */
    where: PredefinedActTypeWhereUniqueInput
  }

  /**
   * PredefinedActType deleteMany
   */
  export type PredefinedActTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedActTypes to delete
     */
    where?: PredefinedActTypeWhereInput
  }

  /**
   * PredefinedActType.predefinedActSubTypes
   */
  export type PredefinedActType$predefinedActSubTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    where?: PredefinedActSubTypesWhereInput
    orderBy?: PredefinedActSubTypesOrderByWithRelationInput | PredefinedActSubTypesOrderByWithRelationInput[]
    cursor?: PredefinedActSubTypesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PredefinedActSubTypesScalarFieldEnum | PredefinedActSubTypesScalarFieldEnum[]
  }

  /**
   * PredefinedActType.QuotationLine
   */
  export type PredefinedActType$QuotationLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    where?: QuotationLineWhereInput
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    cursor?: QuotationLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * PredefinedActType without action
   */
  export type PredefinedActTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActType
     */
    select?: PredefinedActTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActTypeInclude<ExtArgs> | null
  }


  /**
   * Model PredefinedActSubTypes
   */

  export type AggregatePredefinedActSubTypes = {
    _count: PredefinedActSubTypesCountAggregateOutputType | null
    _avg: PredefinedActSubTypesAvgAggregateOutputType | null
    _sum: PredefinedActSubTypesSumAggregateOutputType | null
    _min: PredefinedActSubTypesMinAggregateOutputType | null
    _max: PredefinedActSubTypesMaxAggregateOutputType | null
  }

  export type PredefinedActSubTypesAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type PredefinedActSubTypesSumAggregateOutputType = {
    price: Decimal | null
  }

  export type PredefinedActSubTypesMinAggregateOutputType = {
    id: string | null
    name: string | null
    price: Decimal | null
    currency: $Enums.Currency | null
    predefinedActTypeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedActSubTypesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    price: Decimal | null
    currency: $Enums.Currency | null
    predefinedActTypeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PredefinedActSubTypesCountAggregateOutputType = {
    id: number
    name: number
    price: number
    currency: number
    predefinedActTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PredefinedActSubTypesAvgAggregateInputType = {
    price?: true
  }

  export type PredefinedActSubTypesSumAggregateInputType = {
    price?: true
  }

  export type PredefinedActSubTypesMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    currency?: true
    predefinedActTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedActSubTypesMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    currency?: true
    predefinedActTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PredefinedActSubTypesCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    currency?: true
    predefinedActTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PredefinedActSubTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedActSubTypes to aggregate.
     */
    where?: PredefinedActSubTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActSubTypes to fetch.
     */
    orderBy?: PredefinedActSubTypesOrderByWithRelationInput | PredefinedActSubTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PredefinedActSubTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActSubTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActSubTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PredefinedActSubTypes
    **/
    _count?: true | PredefinedActSubTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PredefinedActSubTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PredefinedActSubTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PredefinedActSubTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PredefinedActSubTypesMaxAggregateInputType
  }

  export type GetPredefinedActSubTypesAggregateType<T extends PredefinedActSubTypesAggregateArgs> = {
        [P in keyof T & keyof AggregatePredefinedActSubTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePredefinedActSubTypes[P]>
      : GetScalarType<T[P], AggregatePredefinedActSubTypes[P]>
  }




  export type PredefinedActSubTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PredefinedActSubTypesWhereInput
    orderBy?: PredefinedActSubTypesOrderByWithAggregationInput | PredefinedActSubTypesOrderByWithAggregationInput[]
    by: PredefinedActSubTypesScalarFieldEnum[] | PredefinedActSubTypesScalarFieldEnum
    having?: PredefinedActSubTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PredefinedActSubTypesCountAggregateInputType | true
    _avg?: PredefinedActSubTypesAvgAggregateInputType
    _sum?: PredefinedActSubTypesSumAggregateInputType
    _min?: PredefinedActSubTypesMinAggregateInputType
    _max?: PredefinedActSubTypesMaxAggregateInputType
  }

  export type PredefinedActSubTypesGroupByOutputType = {
    id: string
    name: string
    price: Decimal
    currency: $Enums.Currency
    predefinedActTypeId: string
    createdAt: Date
    updatedAt: Date
    _count: PredefinedActSubTypesCountAggregateOutputType | null
    _avg: PredefinedActSubTypesAvgAggregateOutputType | null
    _sum: PredefinedActSubTypesSumAggregateOutputType | null
    _min: PredefinedActSubTypesMinAggregateOutputType | null
    _max: PredefinedActSubTypesMaxAggregateOutputType | null
  }

  type GetPredefinedActSubTypesGroupByPayload<T extends PredefinedActSubTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PredefinedActSubTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PredefinedActSubTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PredefinedActSubTypesGroupByOutputType[P]>
            : GetScalarType<T[P], PredefinedActSubTypesGroupByOutputType[P]>
        }
      >
    >


  export type PredefinedActSubTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    currency?: boolean
    predefinedActTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    predefinedActType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    QuotationLine?: boolean | PredefinedActSubTypes$QuotationLineArgs<ExtArgs>
    _count?: boolean | PredefinedActSubTypesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedActSubTypes"]>

  export type PredefinedActSubTypesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    currency?: boolean
    predefinedActTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    predefinedActType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["predefinedActSubTypes"]>

  export type PredefinedActSubTypesSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    currency?: boolean
    predefinedActTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PredefinedActSubTypesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predefinedActType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    QuotationLine?: boolean | PredefinedActSubTypes$QuotationLineArgs<ExtArgs>
    _count?: boolean | PredefinedActSubTypesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PredefinedActSubTypesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    predefinedActType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
  }

  export type $PredefinedActSubTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PredefinedActSubTypes"
    objects: {
      predefinedActType: Prisma.$PredefinedActTypePayload<ExtArgs>
      QuotationLine: Prisma.$QuotationLinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      price: Prisma.Decimal
      currency: $Enums.Currency
      predefinedActTypeId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["predefinedActSubTypes"]>
    composites: {}
  }

  type PredefinedActSubTypesGetPayload<S extends boolean | null | undefined | PredefinedActSubTypesDefaultArgs> = $Result.GetResult<Prisma.$PredefinedActSubTypesPayload, S>

  type PredefinedActSubTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PredefinedActSubTypesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PredefinedActSubTypesCountAggregateInputType | true
    }

  export interface PredefinedActSubTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PredefinedActSubTypes'], meta: { name: 'PredefinedActSubTypes' } }
    /**
     * Find zero or one PredefinedActSubTypes that matches the filter.
     * @param {PredefinedActSubTypesFindUniqueArgs} args - Arguments to find a PredefinedActSubTypes
     * @example
     * // Get one PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PredefinedActSubTypesFindUniqueArgs>(args: SelectSubset<T, PredefinedActSubTypesFindUniqueArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PredefinedActSubTypes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PredefinedActSubTypesFindUniqueOrThrowArgs} args - Arguments to find a PredefinedActSubTypes
     * @example
     * // Get one PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PredefinedActSubTypesFindUniqueOrThrowArgs>(args: SelectSubset<T, PredefinedActSubTypesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PredefinedActSubTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesFindFirstArgs} args - Arguments to find a PredefinedActSubTypes
     * @example
     * // Get one PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PredefinedActSubTypesFindFirstArgs>(args?: SelectSubset<T, PredefinedActSubTypesFindFirstArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PredefinedActSubTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesFindFirstOrThrowArgs} args - Arguments to find a PredefinedActSubTypes
     * @example
     * // Get one PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PredefinedActSubTypesFindFirstOrThrowArgs>(args?: SelectSubset<T, PredefinedActSubTypesFindFirstOrThrowArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PredefinedActSubTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findMany()
     * 
     * // Get first 10 PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const predefinedActSubTypesWithIdOnly = await prisma.predefinedActSubTypes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PredefinedActSubTypesFindManyArgs>(args?: SelectSubset<T, PredefinedActSubTypesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PredefinedActSubTypes.
     * @param {PredefinedActSubTypesCreateArgs} args - Arguments to create a PredefinedActSubTypes.
     * @example
     * // Create one PredefinedActSubTypes
     * const PredefinedActSubTypes = await prisma.predefinedActSubTypes.create({
     *   data: {
     *     // ... data to create a PredefinedActSubTypes
     *   }
     * })
     * 
     */
    create<T extends PredefinedActSubTypesCreateArgs>(args: SelectSubset<T, PredefinedActSubTypesCreateArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PredefinedActSubTypes.
     * @param {PredefinedActSubTypesCreateManyArgs} args - Arguments to create many PredefinedActSubTypes.
     * @example
     * // Create many PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PredefinedActSubTypesCreateManyArgs>(args?: SelectSubset<T, PredefinedActSubTypesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PredefinedActSubTypes and returns the data saved in the database.
     * @param {PredefinedActSubTypesCreateManyAndReturnArgs} args - Arguments to create many PredefinedActSubTypes.
     * @example
     * // Create many PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PredefinedActSubTypes and only return the `id`
     * const predefinedActSubTypesWithIdOnly = await prisma.predefinedActSubTypes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PredefinedActSubTypesCreateManyAndReturnArgs>(args?: SelectSubset<T, PredefinedActSubTypesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PredefinedActSubTypes.
     * @param {PredefinedActSubTypesDeleteArgs} args - Arguments to delete one PredefinedActSubTypes.
     * @example
     * // Delete one PredefinedActSubTypes
     * const PredefinedActSubTypes = await prisma.predefinedActSubTypes.delete({
     *   where: {
     *     // ... filter to delete one PredefinedActSubTypes
     *   }
     * })
     * 
     */
    delete<T extends PredefinedActSubTypesDeleteArgs>(args: SelectSubset<T, PredefinedActSubTypesDeleteArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PredefinedActSubTypes.
     * @param {PredefinedActSubTypesUpdateArgs} args - Arguments to update one PredefinedActSubTypes.
     * @example
     * // Update one PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PredefinedActSubTypesUpdateArgs>(args: SelectSubset<T, PredefinedActSubTypesUpdateArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PredefinedActSubTypes.
     * @param {PredefinedActSubTypesDeleteManyArgs} args - Arguments to filter PredefinedActSubTypes to delete.
     * @example
     * // Delete a few PredefinedActSubTypes
     * const { count } = await prisma.predefinedActSubTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PredefinedActSubTypesDeleteManyArgs>(args?: SelectSubset<T, PredefinedActSubTypesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PredefinedActSubTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PredefinedActSubTypesUpdateManyArgs>(args: SelectSubset<T, PredefinedActSubTypesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PredefinedActSubTypes.
     * @param {PredefinedActSubTypesUpsertArgs} args - Arguments to update or create a PredefinedActSubTypes.
     * @example
     * // Update or create a PredefinedActSubTypes
     * const predefinedActSubTypes = await prisma.predefinedActSubTypes.upsert({
     *   create: {
     *     // ... data to create a PredefinedActSubTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PredefinedActSubTypes we want to update
     *   }
     * })
     */
    upsert<T extends PredefinedActSubTypesUpsertArgs>(args: SelectSubset<T, PredefinedActSubTypesUpsertArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PredefinedActSubTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesCountArgs} args - Arguments to filter PredefinedActSubTypes to count.
     * @example
     * // Count the number of PredefinedActSubTypes
     * const count = await prisma.predefinedActSubTypes.count({
     *   where: {
     *     // ... the filter for the PredefinedActSubTypes we want to count
     *   }
     * })
    **/
    count<T extends PredefinedActSubTypesCountArgs>(
      args?: Subset<T, PredefinedActSubTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PredefinedActSubTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PredefinedActSubTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PredefinedActSubTypesAggregateArgs>(args: Subset<T, PredefinedActSubTypesAggregateArgs>): Prisma.PrismaPromise<GetPredefinedActSubTypesAggregateType<T>>

    /**
     * Group by PredefinedActSubTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PredefinedActSubTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PredefinedActSubTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PredefinedActSubTypesGroupByArgs['orderBy'] }
        : { orderBy?: PredefinedActSubTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PredefinedActSubTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPredefinedActSubTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PredefinedActSubTypes model
   */
  readonly fields: PredefinedActSubTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PredefinedActSubTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PredefinedActSubTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    predefinedActType<T extends PredefinedActTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedActTypeDefaultArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    QuotationLine<T extends PredefinedActSubTypes$QuotationLineArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedActSubTypes$QuotationLineArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PredefinedActSubTypes model
   */ 
  interface PredefinedActSubTypesFieldRefs {
    readonly id: FieldRef<"PredefinedActSubTypes", 'String'>
    readonly name: FieldRef<"PredefinedActSubTypes", 'String'>
    readonly price: FieldRef<"PredefinedActSubTypes", 'Decimal'>
    readonly currency: FieldRef<"PredefinedActSubTypes", 'Currency'>
    readonly predefinedActTypeId: FieldRef<"PredefinedActSubTypes", 'String'>
    readonly createdAt: FieldRef<"PredefinedActSubTypes", 'DateTime'>
    readonly updatedAt: FieldRef<"PredefinedActSubTypes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PredefinedActSubTypes findUnique
   */
  export type PredefinedActSubTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActSubTypes to fetch.
     */
    where: PredefinedActSubTypesWhereUniqueInput
  }

  /**
   * PredefinedActSubTypes findUniqueOrThrow
   */
  export type PredefinedActSubTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActSubTypes to fetch.
     */
    where: PredefinedActSubTypesWhereUniqueInput
  }

  /**
   * PredefinedActSubTypes findFirst
   */
  export type PredefinedActSubTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActSubTypes to fetch.
     */
    where?: PredefinedActSubTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActSubTypes to fetch.
     */
    orderBy?: PredefinedActSubTypesOrderByWithRelationInput | PredefinedActSubTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedActSubTypes.
     */
    cursor?: PredefinedActSubTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActSubTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActSubTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedActSubTypes.
     */
    distinct?: PredefinedActSubTypesScalarFieldEnum | PredefinedActSubTypesScalarFieldEnum[]
  }

  /**
   * PredefinedActSubTypes findFirstOrThrow
   */
  export type PredefinedActSubTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActSubTypes to fetch.
     */
    where?: PredefinedActSubTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActSubTypes to fetch.
     */
    orderBy?: PredefinedActSubTypesOrderByWithRelationInput | PredefinedActSubTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PredefinedActSubTypes.
     */
    cursor?: PredefinedActSubTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActSubTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActSubTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PredefinedActSubTypes.
     */
    distinct?: PredefinedActSubTypesScalarFieldEnum | PredefinedActSubTypesScalarFieldEnum[]
  }

  /**
   * PredefinedActSubTypes findMany
   */
  export type PredefinedActSubTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter, which PredefinedActSubTypes to fetch.
     */
    where?: PredefinedActSubTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PredefinedActSubTypes to fetch.
     */
    orderBy?: PredefinedActSubTypesOrderByWithRelationInput | PredefinedActSubTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PredefinedActSubTypes.
     */
    cursor?: PredefinedActSubTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PredefinedActSubTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PredefinedActSubTypes.
     */
    skip?: number
    distinct?: PredefinedActSubTypesScalarFieldEnum | PredefinedActSubTypesScalarFieldEnum[]
  }

  /**
   * PredefinedActSubTypes create
   */
  export type PredefinedActSubTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * The data needed to create a PredefinedActSubTypes.
     */
    data: XOR<PredefinedActSubTypesCreateInput, PredefinedActSubTypesUncheckedCreateInput>
  }

  /**
   * PredefinedActSubTypes createMany
   */
  export type PredefinedActSubTypesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PredefinedActSubTypes.
     */
    data: PredefinedActSubTypesCreateManyInput | PredefinedActSubTypesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PredefinedActSubTypes createManyAndReturn
   */
  export type PredefinedActSubTypesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PredefinedActSubTypes.
     */
    data: PredefinedActSubTypesCreateManyInput | PredefinedActSubTypesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PredefinedActSubTypes update
   */
  export type PredefinedActSubTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * The data needed to update a PredefinedActSubTypes.
     */
    data: XOR<PredefinedActSubTypesUpdateInput, PredefinedActSubTypesUncheckedUpdateInput>
    /**
     * Choose, which PredefinedActSubTypes to update.
     */
    where: PredefinedActSubTypesWhereUniqueInput
  }

  /**
   * PredefinedActSubTypes updateMany
   */
  export type PredefinedActSubTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PredefinedActSubTypes.
     */
    data: XOR<PredefinedActSubTypesUpdateManyMutationInput, PredefinedActSubTypesUncheckedUpdateManyInput>
    /**
     * Filter which PredefinedActSubTypes to update
     */
    where?: PredefinedActSubTypesWhereInput
  }

  /**
   * PredefinedActSubTypes upsert
   */
  export type PredefinedActSubTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * The filter to search for the PredefinedActSubTypes to update in case it exists.
     */
    where: PredefinedActSubTypesWhereUniqueInput
    /**
     * In case the PredefinedActSubTypes found by the `where` argument doesn't exist, create a new PredefinedActSubTypes with this data.
     */
    create: XOR<PredefinedActSubTypesCreateInput, PredefinedActSubTypesUncheckedCreateInput>
    /**
     * In case the PredefinedActSubTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PredefinedActSubTypesUpdateInput, PredefinedActSubTypesUncheckedUpdateInput>
  }

  /**
   * PredefinedActSubTypes delete
   */
  export type PredefinedActSubTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    /**
     * Filter which PredefinedActSubTypes to delete.
     */
    where: PredefinedActSubTypesWhereUniqueInput
  }

  /**
   * PredefinedActSubTypes deleteMany
   */
  export type PredefinedActSubTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PredefinedActSubTypes to delete
     */
    where?: PredefinedActSubTypesWhereInput
  }

  /**
   * PredefinedActSubTypes.QuotationLine
   */
  export type PredefinedActSubTypes$QuotationLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    where?: QuotationLineWhereInput
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    cursor?: QuotationLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * PredefinedActSubTypes without action
   */
  export type PredefinedActSubTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
  }


  /**
   * Model Quotation
   */

  export type AggregateQuotation = {
    _count: QuotationCountAggregateOutputType | null
    _min: QuotationMinAggregateOutputType | null
    _max: QuotationMaxAggregateOutputType | null
  }

  export type QuotationMinAggregateOutputType = {
    id: string | null
    patientDetailsId: string | null
    name: string | null
    status: $Enums.QuotationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuotationMaxAggregateOutputType = {
    id: string | null
    patientDetailsId: string | null
    name: string | null
    status: $Enums.QuotationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuotationCountAggregateOutputType = {
    id: number
    patientDetailsId: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuotationMinAggregateInputType = {
    id?: true
    patientDetailsId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuotationMaxAggregateInputType = {
    id?: true
    patientDetailsId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuotationCountAggregateInputType = {
    id?: true
    patientDetailsId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuotationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotation to aggregate.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quotations
    **/
    _count?: true | QuotationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuotationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuotationMaxAggregateInputType
  }

  export type GetQuotationAggregateType<T extends QuotationAggregateArgs> = {
        [P in keyof T & keyof AggregateQuotation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuotation[P]>
      : GetScalarType<T[P], AggregateQuotation[P]>
  }




  export type QuotationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationWhereInput
    orderBy?: QuotationOrderByWithAggregationInput | QuotationOrderByWithAggregationInput[]
    by: QuotationScalarFieldEnum[] | QuotationScalarFieldEnum
    having?: QuotationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuotationCountAggregateInputType | true
    _min?: QuotationMinAggregateInputType
    _max?: QuotationMaxAggregateInputType
  }

  export type QuotationGroupByOutputType = {
    id: string
    patientDetailsId: string
    name: string
    status: $Enums.QuotationStatus
    createdAt: Date
    updatedAt: Date
    _count: QuotationCountAggregateOutputType | null
    _min: QuotationMinAggregateOutputType | null
    _max: QuotationMaxAggregateOutputType | null
  }

  type GetQuotationGroupByPayload<T extends QuotationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuotationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuotationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuotationGroupByOutputType[P]>
            : GetScalarType<T[P], QuotationGroupByOutputType[P]>
        }
      >
    >


  export type QuotationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientDetailsId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    quotationLines?: boolean | Quotation$quotationLinesArgs<ExtArgs>
    document?: boolean | Quotation$documentArgs<ExtArgs>
    _count?: boolean | QuotationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quotation"]>

  export type QuotationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientDetailsId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quotation"]>

  export type QuotationSelectScalar = {
    id?: boolean
    patientDetailsId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuotationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
    quotationLines?: boolean | Quotation$quotationLinesArgs<ExtArgs>
    document?: boolean | Quotation$documentArgs<ExtArgs>
    _count?: boolean | QuotationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuotationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientDetails?: boolean | PatientDetailsDefaultArgs<ExtArgs>
  }

  export type $QuotationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quotation"
    objects: {
      patientDetails: Prisma.$PatientDetailsPayload<ExtArgs>
      quotationLines: Prisma.$QuotationLinePayload<ExtArgs>[]
      document: Prisma.$DocumentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientDetailsId: string
      name: string
      status: $Enums.QuotationStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["quotation"]>
    composites: {}
  }

  type QuotationGetPayload<S extends boolean | null | undefined | QuotationDefaultArgs> = $Result.GetResult<Prisma.$QuotationPayload, S>

  type QuotationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuotationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuotationCountAggregateInputType | true
    }

  export interface QuotationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quotation'], meta: { name: 'Quotation' } }
    /**
     * Find zero or one Quotation that matches the filter.
     * @param {QuotationFindUniqueArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuotationFindUniqueArgs>(args: SelectSubset<T, QuotationFindUniqueArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Quotation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuotationFindUniqueOrThrowArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuotationFindUniqueOrThrowArgs>(args: SelectSubset<T, QuotationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Quotation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindFirstArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuotationFindFirstArgs>(args?: SelectSubset<T, QuotationFindFirstArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Quotation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindFirstOrThrowArgs} args - Arguments to find a Quotation
     * @example
     * // Get one Quotation
     * const quotation = await prisma.quotation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuotationFindFirstOrThrowArgs>(args?: SelectSubset<T, QuotationFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Quotations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quotations
     * const quotations = await prisma.quotation.findMany()
     * 
     * // Get first 10 Quotations
     * const quotations = await prisma.quotation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quotationWithIdOnly = await prisma.quotation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuotationFindManyArgs>(args?: SelectSubset<T, QuotationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Quotation.
     * @param {QuotationCreateArgs} args - Arguments to create a Quotation.
     * @example
     * // Create one Quotation
     * const Quotation = await prisma.quotation.create({
     *   data: {
     *     // ... data to create a Quotation
     *   }
     * })
     * 
     */
    create<T extends QuotationCreateArgs>(args: SelectSubset<T, QuotationCreateArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Quotations.
     * @param {QuotationCreateManyArgs} args - Arguments to create many Quotations.
     * @example
     * // Create many Quotations
     * const quotation = await prisma.quotation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuotationCreateManyArgs>(args?: SelectSubset<T, QuotationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quotations and returns the data saved in the database.
     * @param {QuotationCreateManyAndReturnArgs} args - Arguments to create many Quotations.
     * @example
     * // Create many Quotations
     * const quotation = await prisma.quotation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quotations and only return the `id`
     * const quotationWithIdOnly = await prisma.quotation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuotationCreateManyAndReturnArgs>(args?: SelectSubset<T, QuotationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Quotation.
     * @param {QuotationDeleteArgs} args - Arguments to delete one Quotation.
     * @example
     * // Delete one Quotation
     * const Quotation = await prisma.quotation.delete({
     *   where: {
     *     // ... filter to delete one Quotation
     *   }
     * })
     * 
     */
    delete<T extends QuotationDeleteArgs>(args: SelectSubset<T, QuotationDeleteArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Quotation.
     * @param {QuotationUpdateArgs} args - Arguments to update one Quotation.
     * @example
     * // Update one Quotation
     * const quotation = await prisma.quotation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuotationUpdateArgs>(args: SelectSubset<T, QuotationUpdateArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Quotations.
     * @param {QuotationDeleteManyArgs} args - Arguments to filter Quotations to delete.
     * @example
     * // Delete a few Quotations
     * const { count } = await prisma.quotation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuotationDeleteManyArgs>(args?: SelectSubset<T, QuotationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quotations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quotations
     * const quotation = await prisma.quotation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuotationUpdateManyArgs>(args: SelectSubset<T, QuotationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quotation.
     * @param {QuotationUpsertArgs} args - Arguments to update or create a Quotation.
     * @example
     * // Update or create a Quotation
     * const quotation = await prisma.quotation.upsert({
     *   create: {
     *     // ... data to create a Quotation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quotation we want to update
     *   }
     * })
     */
    upsert<T extends QuotationUpsertArgs>(args: SelectSubset<T, QuotationUpsertArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Quotations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationCountArgs} args - Arguments to filter Quotations to count.
     * @example
     * // Count the number of Quotations
     * const count = await prisma.quotation.count({
     *   where: {
     *     // ... the filter for the Quotations we want to count
     *   }
     * })
    **/
    count<T extends QuotationCountArgs>(
      args?: Subset<T, QuotationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuotationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quotation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuotationAggregateArgs>(args: Subset<T, QuotationAggregateArgs>): Prisma.PrismaPromise<GetQuotationAggregateType<T>>

    /**
     * Group by Quotation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuotationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuotationGroupByArgs['orderBy'] }
        : { orderBy?: QuotationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuotationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuotationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quotation model
   */
  readonly fields: QuotationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quotation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuotationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patientDetails<T extends PatientDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDetailsDefaultArgs<ExtArgs>>): Prisma__PatientDetailsClient<$Result.GetResult<Prisma.$PatientDetailsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    quotationLines<T extends Quotation$quotationLinesArgs<ExtArgs> = {}>(args?: Subset<T, Quotation$quotationLinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findMany"> | Null>
    document<T extends Quotation$documentArgs<ExtArgs> = {}>(args?: Subset<T, Quotation$documentArgs<ExtArgs>>): Prisma__DocumentClient<$Result.GetResult<Prisma.$DocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quotation model
   */ 
  interface QuotationFieldRefs {
    readonly id: FieldRef<"Quotation", 'String'>
    readonly patientDetailsId: FieldRef<"Quotation", 'String'>
    readonly name: FieldRef<"Quotation", 'String'>
    readonly status: FieldRef<"Quotation", 'QuotationStatus'>
    readonly createdAt: FieldRef<"Quotation", 'DateTime'>
    readonly updatedAt: FieldRef<"Quotation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quotation findUnique
   */
  export type QuotationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation findUniqueOrThrow
   */
  export type QuotationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation findFirst
   */
  export type QuotationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotations.
     */
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation findFirstOrThrow
   */
  export type QuotationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotation to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quotations.
     */
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation findMany
   */
  export type QuotationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter, which Quotations to fetch.
     */
    where?: QuotationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quotations to fetch.
     */
    orderBy?: QuotationOrderByWithRelationInput | QuotationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quotations.
     */
    cursor?: QuotationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quotations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quotations.
     */
    skip?: number
    distinct?: QuotationScalarFieldEnum | QuotationScalarFieldEnum[]
  }

  /**
   * Quotation create
   */
  export type QuotationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The data needed to create a Quotation.
     */
    data: XOR<QuotationCreateInput, QuotationUncheckedCreateInput>
  }

  /**
   * Quotation createMany
   */
  export type QuotationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quotations.
     */
    data: QuotationCreateManyInput | QuotationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quotation createManyAndReturn
   */
  export type QuotationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Quotations.
     */
    data: QuotationCreateManyInput | QuotationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quotation update
   */
  export type QuotationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The data needed to update a Quotation.
     */
    data: XOR<QuotationUpdateInput, QuotationUncheckedUpdateInput>
    /**
     * Choose, which Quotation to update.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation updateMany
   */
  export type QuotationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quotations.
     */
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyInput>
    /**
     * Filter which Quotations to update
     */
    where?: QuotationWhereInput
  }

  /**
   * Quotation upsert
   */
  export type QuotationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * The filter to search for the Quotation to update in case it exists.
     */
    where: QuotationWhereUniqueInput
    /**
     * In case the Quotation found by the `where` argument doesn't exist, create a new Quotation with this data.
     */
    create: XOR<QuotationCreateInput, QuotationUncheckedCreateInput>
    /**
     * In case the Quotation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuotationUpdateInput, QuotationUncheckedUpdateInput>
  }

  /**
   * Quotation delete
   */
  export type QuotationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
    /**
     * Filter which Quotation to delete.
     */
    where: QuotationWhereUniqueInput
  }

  /**
   * Quotation deleteMany
   */
  export type QuotationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quotations to delete
     */
    where?: QuotationWhereInput
  }

  /**
   * Quotation.quotationLines
   */
  export type Quotation$quotationLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    where?: QuotationLineWhereInput
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    cursor?: QuotationLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * Quotation.document
   */
  export type Quotation$documentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Document
     */
    select?: DocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DocumentInclude<ExtArgs> | null
    where?: DocumentWhereInput
  }

  /**
   * Quotation without action
   */
  export type QuotationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quotation
     */
    select?: QuotationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationInclude<ExtArgs> | null
  }


  /**
   * Model QuotationLine
   */

  export type AggregateQuotationLine = {
    _count: QuotationLineCountAggregateOutputType | null
    _avg: QuotationLineAvgAggregateOutputType | null
    _sum: QuotationLineSumAggregateOutputType | null
    _min: QuotationLineMinAggregateOutputType | null
    _max: QuotationLineMaxAggregateOutputType | null
  }

  export type QuotationLineAvgAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
  }

  export type QuotationLineSumAggregateOutputType = {
    quantity: number | null
    unitPrice: Decimal | null
  }

  export type QuotationLineMinAggregateOutputType = {
    id: string | null
    quotationId: string | null
    comment: string | null
    quantity: number | null
    unitPrice: Decimal | null
    currency: $Enums.Currency | null
    actTypeId: string | null
    subActTypeId: string | null
    forecastDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuotationLineMaxAggregateOutputType = {
    id: string | null
    quotationId: string | null
    comment: string | null
    quantity: number | null
    unitPrice: Decimal | null
    currency: $Enums.Currency | null
    actTypeId: string | null
    subActTypeId: string | null
    forecastDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuotationLineCountAggregateOutputType = {
    id: number
    quotationId: number
    comment: number
    quantity: number
    unitPrice: number
    currency: number
    actTypeId: number
    subActTypeId: number
    forecastDate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuotationLineAvgAggregateInputType = {
    quantity?: true
    unitPrice?: true
  }

  export type QuotationLineSumAggregateInputType = {
    quantity?: true
    unitPrice?: true
  }

  export type QuotationLineMinAggregateInputType = {
    id?: true
    quotationId?: true
    comment?: true
    quantity?: true
    unitPrice?: true
    currency?: true
    actTypeId?: true
    subActTypeId?: true
    forecastDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuotationLineMaxAggregateInputType = {
    id?: true
    quotationId?: true
    comment?: true
    quantity?: true
    unitPrice?: true
    currency?: true
    actTypeId?: true
    subActTypeId?: true
    forecastDate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuotationLineCountAggregateInputType = {
    id?: true
    quotationId?: true
    comment?: true
    quantity?: true
    unitPrice?: true
    currency?: true
    actTypeId?: true
    subActTypeId?: true
    forecastDate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuotationLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuotationLine to aggregate.
     */
    where?: QuotationLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationLines to fetch.
     */
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuotationLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuotationLines
    **/
    _count?: true | QuotationLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuotationLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuotationLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuotationLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuotationLineMaxAggregateInputType
  }

  export type GetQuotationLineAggregateType<T extends QuotationLineAggregateArgs> = {
        [P in keyof T & keyof AggregateQuotationLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuotationLine[P]>
      : GetScalarType<T[P], AggregateQuotationLine[P]>
  }




  export type QuotationLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuotationLineWhereInput
    orderBy?: QuotationLineOrderByWithAggregationInput | QuotationLineOrderByWithAggregationInput[]
    by: QuotationLineScalarFieldEnum[] | QuotationLineScalarFieldEnum
    having?: QuotationLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuotationLineCountAggregateInputType | true
    _avg?: QuotationLineAvgAggregateInputType
    _sum?: QuotationLineSumAggregateInputType
    _min?: QuotationLineMinAggregateInputType
    _max?: QuotationLineMaxAggregateInputType
  }

  export type QuotationLineGroupByOutputType = {
    id: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal
    currency: $Enums.Currency
    actTypeId: string
    subActTypeId: string | null
    forecastDate: Date | null
    createdAt: Date
    updatedAt: Date | null
    _count: QuotationLineCountAggregateOutputType | null
    _avg: QuotationLineAvgAggregateOutputType | null
    _sum: QuotationLineSumAggregateOutputType | null
    _min: QuotationLineMinAggregateOutputType | null
    _max: QuotationLineMaxAggregateOutputType | null
  }

  type GetQuotationLineGroupByPayload<T extends QuotationLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuotationLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuotationLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuotationLineGroupByOutputType[P]>
            : GetScalarType<T[P], QuotationLineGroupByOutputType[P]>
        }
      >
    >


  export type QuotationLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quotationId?: boolean
    comment?: boolean
    quantity?: boolean
    unitPrice?: boolean
    currency?: boolean
    actTypeId?: boolean
    subActTypeId?: boolean
    forecastDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    quotation?: boolean | QuotationDefaultArgs<ExtArgs>
    actType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    subActType?: boolean | QuotationLine$subActTypeArgs<ExtArgs>
  }, ExtArgs["result"]["quotationLine"]>

  export type QuotationLineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quotationId?: boolean
    comment?: boolean
    quantity?: boolean
    unitPrice?: boolean
    currency?: boolean
    actTypeId?: boolean
    subActTypeId?: boolean
    forecastDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    quotation?: boolean | QuotationDefaultArgs<ExtArgs>
    actType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    subActType?: boolean | QuotationLine$subActTypeArgs<ExtArgs>
  }, ExtArgs["result"]["quotationLine"]>

  export type QuotationLineSelectScalar = {
    id?: boolean
    quotationId?: boolean
    comment?: boolean
    quantity?: boolean
    unitPrice?: boolean
    currency?: boolean
    actTypeId?: boolean
    subActTypeId?: boolean
    forecastDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuotationLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotation?: boolean | QuotationDefaultArgs<ExtArgs>
    actType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    subActType?: boolean | QuotationLine$subActTypeArgs<ExtArgs>
  }
  export type QuotationLineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quotation?: boolean | QuotationDefaultArgs<ExtArgs>
    actType?: boolean | PredefinedActTypeDefaultArgs<ExtArgs>
    subActType?: boolean | QuotationLine$subActTypeArgs<ExtArgs>
  }

  export type $QuotationLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuotationLine"
    objects: {
      quotation: Prisma.$QuotationPayload<ExtArgs>
      actType: Prisma.$PredefinedActTypePayload<ExtArgs>
      subActType: Prisma.$PredefinedActSubTypesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quotationId: string
      comment: string
      quantity: number
      unitPrice: Prisma.Decimal
      currency: $Enums.Currency
      actTypeId: string
      subActTypeId: string | null
      forecastDate: Date | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["quotationLine"]>
    composites: {}
  }

  type QuotationLineGetPayload<S extends boolean | null | undefined | QuotationLineDefaultArgs> = $Result.GetResult<Prisma.$QuotationLinePayload, S>

  type QuotationLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuotationLineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuotationLineCountAggregateInputType | true
    }

  export interface QuotationLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuotationLine'], meta: { name: 'QuotationLine' } }
    /**
     * Find zero or one QuotationLine that matches the filter.
     * @param {QuotationLineFindUniqueArgs} args - Arguments to find a QuotationLine
     * @example
     * // Get one QuotationLine
     * const quotationLine = await prisma.quotationLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuotationLineFindUniqueArgs>(args: SelectSubset<T, QuotationLineFindUniqueArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QuotationLine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuotationLineFindUniqueOrThrowArgs} args - Arguments to find a QuotationLine
     * @example
     * // Get one QuotationLine
     * const quotationLine = await prisma.quotationLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuotationLineFindUniqueOrThrowArgs>(args: SelectSubset<T, QuotationLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QuotationLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineFindFirstArgs} args - Arguments to find a QuotationLine
     * @example
     * // Get one QuotationLine
     * const quotationLine = await prisma.quotationLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuotationLineFindFirstArgs>(args?: SelectSubset<T, QuotationLineFindFirstArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QuotationLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineFindFirstOrThrowArgs} args - Arguments to find a QuotationLine
     * @example
     * // Get one QuotationLine
     * const quotationLine = await prisma.quotationLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuotationLineFindFirstOrThrowArgs>(args?: SelectSubset<T, QuotationLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QuotationLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuotationLines
     * const quotationLines = await prisma.quotationLine.findMany()
     * 
     * // Get first 10 QuotationLines
     * const quotationLines = await prisma.quotationLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quotationLineWithIdOnly = await prisma.quotationLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuotationLineFindManyArgs>(args?: SelectSubset<T, QuotationLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QuotationLine.
     * @param {QuotationLineCreateArgs} args - Arguments to create a QuotationLine.
     * @example
     * // Create one QuotationLine
     * const QuotationLine = await prisma.quotationLine.create({
     *   data: {
     *     // ... data to create a QuotationLine
     *   }
     * })
     * 
     */
    create<T extends QuotationLineCreateArgs>(args: SelectSubset<T, QuotationLineCreateArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QuotationLines.
     * @param {QuotationLineCreateManyArgs} args - Arguments to create many QuotationLines.
     * @example
     * // Create many QuotationLines
     * const quotationLine = await prisma.quotationLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuotationLineCreateManyArgs>(args?: SelectSubset<T, QuotationLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuotationLines and returns the data saved in the database.
     * @param {QuotationLineCreateManyAndReturnArgs} args - Arguments to create many QuotationLines.
     * @example
     * // Create many QuotationLines
     * const quotationLine = await prisma.quotationLine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuotationLines and only return the `id`
     * const quotationLineWithIdOnly = await prisma.quotationLine.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuotationLineCreateManyAndReturnArgs>(args?: SelectSubset<T, QuotationLineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QuotationLine.
     * @param {QuotationLineDeleteArgs} args - Arguments to delete one QuotationLine.
     * @example
     * // Delete one QuotationLine
     * const QuotationLine = await prisma.quotationLine.delete({
     *   where: {
     *     // ... filter to delete one QuotationLine
     *   }
     * })
     * 
     */
    delete<T extends QuotationLineDeleteArgs>(args: SelectSubset<T, QuotationLineDeleteArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QuotationLine.
     * @param {QuotationLineUpdateArgs} args - Arguments to update one QuotationLine.
     * @example
     * // Update one QuotationLine
     * const quotationLine = await prisma.quotationLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuotationLineUpdateArgs>(args: SelectSubset<T, QuotationLineUpdateArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QuotationLines.
     * @param {QuotationLineDeleteManyArgs} args - Arguments to filter QuotationLines to delete.
     * @example
     * // Delete a few QuotationLines
     * const { count } = await prisma.quotationLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuotationLineDeleteManyArgs>(args?: SelectSubset<T, QuotationLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuotationLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuotationLines
     * const quotationLine = await prisma.quotationLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuotationLineUpdateManyArgs>(args: SelectSubset<T, QuotationLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuotationLine.
     * @param {QuotationLineUpsertArgs} args - Arguments to update or create a QuotationLine.
     * @example
     * // Update or create a QuotationLine
     * const quotationLine = await prisma.quotationLine.upsert({
     *   create: {
     *     // ... data to create a QuotationLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuotationLine we want to update
     *   }
     * })
     */
    upsert<T extends QuotationLineUpsertArgs>(args: SelectSubset<T, QuotationLineUpsertArgs<ExtArgs>>): Prisma__QuotationLineClient<$Result.GetResult<Prisma.$QuotationLinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QuotationLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineCountArgs} args - Arguments to filter QuotationLines to count.
     * @example
     * // Count the number of QuotationLines
     * const count = await prisma.quotationLine.count({
     *   where: {
     *     // ... the filter for the QuotationLines we want to count
     *   }
     * })
    **/
    count<T extends QuotationLineCountArgs>(
      args?: Subset<T, QuotationLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuotationLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuotationLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuotationLineAggregateArgs>(args: Subset<T, QuotationLineAggregateArgs>): Prisma.PrismaPromise<GetQuotationLineAggregateType<T>>

    /**
     * Group by QuotationLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuotationLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuotationLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuotationLineGroupByArgs['orderBy'] }
        : { orderBy?: QuotationLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuotationLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuotationLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuotationLine model
   */
  readonly fields: QuotationLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuotationLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuotationLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quotation<T extends QuotationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuotationDefaultArgs<ExtArgs>>): Prisma__QuotationClient<$Result.GetResult<Prisma.$QuotationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    actType<T extends PredefinedActTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PredefinedActTypeDefaultArgs<ExtArgs>>): Prisma__PredefinedActTypeClient<$Result.GetResult<Prisma.$PredefinedActTypePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subActType<T extends QuotationLine$subActTypeArgs<ExtArgs> = {}>(args?: Subset<T, QuotationLine$subActTypeArgs<ExtArgs>>): Prisma__PredefinedActSubTypesClient<$Result.GetResult<Prisma.$PredefinedActSubTypesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuotationLine model
   */ 
  interface QuotationLineFieldRefs {
    readonly id: FieldRef<"QuotationLine", 'String'>
    readonly quotationId: FieldRef<"QuotationLine", 'String'>
    readonly comment: FieldRef<"QuotationLine", 'String'>
    readonly quantity: FieldRef<"QuotationLine", 'Int'>
    readonly unitPrice: FieldRef<"QuotationLine", 'Decimal'>
    readonly currency: FieldRef<"QuotationLine", 'Currency'>
    readonly actTypeId: FieldRef<"QuotationLine", 'String'>
    readonly subActTypeId: FieldRef<"QuotationLine", 'String'>
    readonly forecastDate: FieldRef<"QuotationLine", 'DateTime'>
    readonly createdAt: FieldRef<"QuotationLine", 'DateTime'>
    readonly updatedAt: FieldRef<"QuotationLine", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuotationLine findUnique
   */
  export type QuotationLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter, which QuotationLine to fetch.
     */
    where: QuotationLineWhereUniqueInput
  }

  /**
   * QuotationLine findUniqueOrThrow
   */
  export type QuotationLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter, which QuotationLine to fetch.
     */
    where: QuotationLineWhereUniqueInput
  }

  /**
   * QuotationLine findFirst
   */
  export type QuotationLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter, which QuotationLine to fetch.
     */
    where?: QuotationLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationLines to fetch.
     */
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuotationLines.
     */
    cursor?: QuotationLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuotationLines.
     */
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * QuotationLine findFirstOrThrow
   */
  export type QuotationLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter, which QuotationLine to fetch.
     */
    where?: QuotationLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationLines to fetch.
     */
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuotationLines.
     */
    cursor?: QuotationLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuotationLines.
     */
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * QuotationLine findMany
   */
  export type QuotationLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter, which QuotationLines to fetch.
     */
    where?: QuotationLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuotationLines to fetch.
     */
    orderBy?: QuotationLineOrderByWithRelationInput | QuotationLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuotationLines.
     */
    cursor?: QuotationLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuotationLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuotationLines.
     */
    skip?: number
    distinct?: QuotationLineScalarFieldEnum | QuotationLineScalarFieldEnum[]
  }

  /**
   * QuotationLine create
   */
  export type QuotationLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * The data needed to create a QuotationLine.
     */
    data: XOR<QuotationLineCreateInput, QuotationLineUncheckedCreateInput>
  }

  /**
   * QuotationLine createMany
   */
  export type QuotationLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuotationLines.
     */
    data: QuotationLineCreateManyInput | QuotationLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuotationLine createManyAndReturn
   */
  export type QuotationLineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QuotationLines.
     */
    data: QuotationLineCreateManyInput | QuotationLineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuotationLine update
   */
  export type QuotationLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * The data needed to update a QuotationLine.
     */
    data: XOR<QuotationLineUpdateInput, QuotationLineUncheckedUpdateInput>
    /**
     * Choose, which QuotationLine to update.
     */
    where: QuotationLineWhereUniqueInput
  }

  /**
   * QuotationLine updateMany
   */
  export type QuotationLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuotationLines.
     */
    data: XOR<QuotationLineUpdateManyMutationInput, QuotationLineUncheckedUpdateManyInput>
    /**
     * Filter which QuotationLines to update
     */
    where?: QuotationLineWhereInput
  }

  /**
   * QuotationLine upsert
   */
  export type QuotationLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * The filter to search for the QuotationLine to update in case it exists.
     */
    where: QuotationLineWhereUniqueInput
    /**
     * In case the QuotationLine found by the `where` argument doesn't exist, create a new QuotationLine with this data.
     */
    create: XOR<QuotationLineCreateInput, QuotationLineUncheckedCreateInput>
    /**
     * In case the QuotationLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuotationLineUpdateInput, QuotationLineUncheckedUpdateInput>
  }

  /**
   * QuotationLine delete
   */
  export type QuotationLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
    /**
     * Filter which QuotationLine to delete.
     */
    where: QuotationLineWhereUniqueInput
  }

  /**
   * QuotationLine deleteMany
   */
  export type QuotationLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuotationLines to delete
     */
    where?: QuotationLineWhereInput
  }

  /**
   * QuotationLine.subActType
   */
  export type QuotationLine$subActTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PredefinedActSubTypes
     */
    select?: PredefinedActSubTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PredefinedActSubTypesInclude<ExtArgs> | null
    where?: PredefinedActSubTypesWhereInput
  }

  /**
   * QuotationLine without action
   */
  export type QuotationLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuotationLine
     */
    select?: QuotationLineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuotationLineInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    locale: 'locale',
    phone: 'phone',
    birthDate: 'birthDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StaffMemberScalarFieldEnum: {
    id: 'id',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type StaffMemberScalarFieldEnum = (typeof StaffMemberScalarFieldEnum)[keyof typeof StaffMemberScalarFieldEnum]


  export const PatientDetailsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type PatientDetailsScalarFieldEnum = (typeof PatientDetailsScalarFieldEnum)[keyof typeof PatientDetailsScalarFieldEnum]


  export const AccountingEntryScalarFieldEnum: {
    id: 'id',
    patientDetailsId: 'patientDetailsId',
    amount: 'amount',
    currency: 'currency',
    paymentMethod: 'paymentMethod',
    transactionReference: 'transactionReference',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountingEntryScalarFieldEnum = (typeof AccountingEntryScalarFieldEnum)[keyof typeof AccountingEntryScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const AuthenticatorScalarFieldEnum: {
    credentialID: 'credentialID',
    userId: 'userId',
    providerAccountId: 'providerAccountId',
    credentialPublicKey: 'credentialPublicKey',
    counter: 'counter',
    credentialDeviceType: 'credentialDeviceType',
    credentialBackedUp: 'credentialBackedUp',
    transports: 'transports'
  };

  export type AuthenticatorScalarFieldEnum = (typeof AuthenticatorScalarFieldEnum)[keyof typeof AuthenticatorScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    city: 'city',
    zip: 'zip',
    countryCode: 'countryCode',
    additionalAddressLine: 'additionalAddressLine',
    userId: 'userId',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    patientDetailsId: 'patientDetailsId',
    isDeleted: 'isDeleted'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const DocumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    path: 'path',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById',
    contentType: 'contentType',
    noteId: 'noteId',
    visibleTo: 'visibleTo',
    quotationId: 'quotationId'
  };

  export type DocumentScalarFieldEnum = (typeof DocumentScalarFieldEnum)[keyof typeof DocumentScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    status: 'status',
    patientDetailsId: 'patientDetailsId',
    staffMemberId: 'staffMemberId',
    startAt: 'startAt',
    endAt: 'endAt',
    reportNoteId: 'reportNoteId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const FeatureFlagScalarFieldEnum: {
    id: 'id',
    key: 'key',
    isEnabled: 'isEnabled',
    tenantId: 'tenantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FeatureFlagScalarFieldEnum = (typeof FeatureFlagScalarFieldEnum)[keyof typeof FeatureFlagScalarFieldEnum]


  export const PredefinedActTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tenantId: 'tenantId',
    price: 'price',
    currency: 'currency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PredefinedActTypeScalarFieldEnum = (typeof PredefinedActTypeScalarFieldEnum)[keyof typeof PredefinedActTypeScalarFieldEnum]


  export const PredefinedActSubTypesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    currency: 'currency',
    predefinedActTypeId: 'predefinedActTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PredefinedActSubTypesScalarFieldEnum = (typeof PredefinedActSubTypesScalarFieldEnum)[keyof typeof PredefinedActSubTypesScalarFieldEnum]


  export const QuotationScalarFieldEnum: {
    id: 'id',
    patientDetailsId: 'patientDetailsId',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuotationScalarFieldEnum = (typeof QuotationScalarFieldEnum)[keyof typeof QuotationScalarFieldEnum]


  export const QuotationLineScalarFieldEnum: {
    id: 'id',
    quotationId: 'quotationId',
    comment: 'comment',
    quantity: 'quantity',
    unitPrice: 'unitPrice',
    currency: 'currency',
    actTypeId: 'actTypeId',
    subActTypeId: 'subActTypeId',
    forecastDate: 'forecastDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuotationLineScalarFieldEnum = (typeof QuotationLineScalarFieldEnum)[keyof typeof QuotationLineScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Currency'
   */
  export type EnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency'>
    


  /**
   * Reference to a field of type 'Currency[]'
   */
  export type ListEnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'AccountingEntryType'
   */
  export type EnumAccountingEntryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountingEntryType'>
    


  /**
   * Reference to a field of type 'AccountingEntryType[]'
   */
  export type ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AccountingEntryType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'FeatureFlagKey'
   */
  export type EnumFeatureFlagKeyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeatureFlagKey'>
    


  /**
   * Reference to a field of type 'FeatureFlagKey[]'
   */
  export type ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FeatureFlagKey[]'>
    


  /**
   * Reference to a field of type 'QuotationStatus'
   */
  export type EnumQuotationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuotationStatus'>
    


  /**
   * Reference to a field of type 'QuotationStatus[]'
   */
  export type ListEnumQuotationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuotationStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: StringFilter<"Tenant"> | string
    name?: StringFilter<"Tenant"> | string
    logo?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    patients?: PatientDetailsListRelationFilter
    staffMembers?: StaffMemberListRelationFilter
    FeatureFlag?: FeatureFlagListRelationFilter
    billingAddress?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
    predefinedActTypes?: PredefinedActTypeListRelationFilter
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    patients?: PatientDetailsOrderByRelationAggregateInput
    staffMembers?: StaffMemberOrderByRelationAggregateInput
    FeatureFlag?: FeatureFlagOrderByRelationAggregateInput
    billingAddress?: AddressOrderByWithRelationInput
    predefinedActTypes?: PredefinedActTypeOrderByRelationAggregateInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    logo?: StringNullableFilter<"Tenant"> | string | null
    createdAt?: DateTimeFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Tenant"> | Date | string | null
    patients?: PatientDetailsListRelationFilter
    staffMembers?: StaffMemberListRelationFilter
    FeatureFlag?: FeatureFlagListRelationFilter
    billingAddress?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
    predefinedActTypes?: PredefinedActTypeListRelationFilter
  }, "id">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: TenantCountOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tenant"> | string
    name?: StringWithAggregatesFilter<"Tenant"> | string
    logo?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Tenant"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Tenant"> | Date | string | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    locale?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Authenticator?: AuthenticatorListRelationFilter
    patientDetails?: PatientDetailsListRelationFilter
    staffMember?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    address?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    locale?: SortOrder
    phone?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    Authenticator?: AuthenticatorOrderByRelationAggregateInput
    patientDetails?: PatientDetailsOrderByRelationAggregateInput
    staffMember?: StaffMemberOrderByWithRelationInput
    address?: AddressOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    role?: EnumRoleFilter<"User"> | $Enums.Role
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    locale?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    birthDate?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    Authenticator?: AuthenticatorListRelationFilter
    patientDetails?: PatientDetailsListRelationFilter
    staffMember?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    address?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    locale?: SortOrder
    phone?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    locale?: StringWithAggregatesFilter<"User"> | string
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type StaffMemberWhereInput = {
    AND?: StaffMemberWhereInput | StaffMemberWhereInput[]
    OR?: StaffMemberWhereInput[]
    NOT?: StaffMemberWhereInput | StaffMemberWhereInput[]
    id?: StringFilter<"StaffMember"> | string
    tenantId?: StringNullableFilter<"StaffMember"> | string | null
    createdAt?: DateTimeFilter<"StaffMember"> | Date | string
    updatedAt?: DateTimeFilter<"StaffMember"> | Date | string
    isDeleted?: BoolFilter<"StaffMember"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
    createdDocuments?: DocumentListRelationFilter
    updatedDocuments?: DocumentListRelationFilter
    createdNotes?: NoteListRelationFilter
    updatedNotes?: NoteListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }

  export type StaffMemberOrderByWithRelationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    createdDocuments?: DocumentOrderByRelationAggregateInput
    updatedDocuments?: DocumentOrderByRelationAggregateInput
    createdNotes?: NoteOrderByRelationAggregateInput
    updatedNotes?: NoteOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
  }

  export type StaffMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StaffMemberWhereInput | StaffMemberWhereInput[]
    OR?: StaffMemberWhereInput[]
    NOT?: StaffMemberWhereInput | StaffMemberWhereInput[]
    tenantId?: StringNullableFilter<"StaffMember"> | string | null
    createdAt?: DateTimeFilter<"StaffMember"> | Date | string
    updatedAt?: DateTimeFilter<"StaffMember"> | Date | string
    isDeleted?: BoolFilter<"StaffMember"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
    createdDocuments?: DocumentListRelationFilter
    updatedDocuments?: DocumentListRelationFilter
    createdNotes?: NoteListRelationFilter
    updatedNotes?: NoteListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }, "id">

  export type StaffMemberOrderByWithAggregationInput = {
    id?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: StaffMemberCountOrderByAggregateInput
    _max?: StaffMemberMaxOrderByAggregateInput
    _min?: StaffMemberMinOrderByAggregateInput
  }

  export type StaffMemberScalarWhereWithAggregatesInput = {
    AND?: StaffMemberScalarWhereWithAggregatesInput | StaffMemberScalarWhereWithAggregatesInput[]
    OR?: StaffMemberScalarWhereWithAggregatesInput[]
    NOT?: StaffMemberScalarWhereWithAggregatesInput | StaffMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffMember"> | string
    tenantId?: StringNullableWithAggregatesFilter<"StaffMember"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StaffMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffMember"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"StaffMember"> | boolean
  }

  export type PatientDetailsWhereInput = {
    AND?: PatientDetailsWhereInput | PatientDetailsWhereInput[]
    OR?: PatientDetailsWhereInput[]
    NOT?: PatientDetailsWhereInput | PatientDetailsWhereInput[]
    id?: StringFilter<"PatientDetails"> | string
    userId?: StringFilter<"PatientDetails"> | string
    tenantId?: StringFilter<"PatientDetails"> | string
    createdAt?: DateTimeFilter<"PatientDetails"> | Date | string
    updatedAt?: DateTimeFilter<"PatientDetails"> | Date | string
    isDeleted?: BoolFilter<"PatientDetails"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    notes?: NoteListRelationFilter
    Appointment?: AppointmentListRelationFilter
    AccountingEntry?: AccountingEntryListRelationFilter
    Quotation?: QuotationListRelationFilter
  }

  export type PatientDetailsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
    notes?: NoteOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
    AccountingEntry?: AccountingEntryOrderByRelationAggregateInput
    Quotation?: QuotationOrderByRelationAggregateInput
  }

  export type PatientDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_tenantId?: PatientDetailsUserIdTenantIdCompoundUniqueInput
    AND?: PatientDetailsWhereInput | PatientDetailsWhereInput[]
    OR?: PatientDetailsWhereInput[]
    NOT?: PatientDetailsWhereInput | PatientDetailsWhereInput[]
    userId?: StringFilter<"PatientDetails"> | string
    tenantId?: StringFilter<"PatientDetails"> | string
    createdAt?: DateTimeFilter<"PatientDetails"> | Date | string
    updatedAt?: DateTimeFilter<"PatientDetails"> | Date | string
    isDeleted?: BoolFilter<"PatientDetails"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    notes?: NoteListRelationFilter
    Appointment?: AppointmentListRelationFilter
    AccountingEntry?: AccountingEntryListRelationFilter
    Quotation?: QuotationListRelationFilter
  }, "id" | "userId_tenantId">

  export type PatientDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: PatientDetailsCountOrderByAggregateInput
    _max?: PatientDetailsMaxOrderByAggregateInput
    _min?: PatientDetailsMinOrderByAggregateInput
  }

  export type PatientDetailsScalarWhereWithAggregatesInput = {
    AND?: PatientDetailsScalarWhereWithAggregatesInput | PatientDetailsScalarWhereWithAggregatesInput[]
    OR?: PatientDetailsScalarWhereWithAggregatesInput[]
    NOT?: PatientDetailsScalarWhereWithAggregatesInput | PatientDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientDetails"> | string
    userId?: StringWithAggregatesFilter<"PatientDetails"> | string
    tenantId?: StringWithAggregatesFilter<"PatientDetails"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PatientDetails"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientDetails"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"PatientDetails"> | boolean
  }

  export type AccountingEntryWhereInput = {
    AND?: AccountingEntryWhereInput | AccountingEntryWhereInput[]
    OR?: AccountingEntryWhereInput[]
    NOT?: AccountingEntryWhereInput | AccountingEntryWhereInput[]
    id?: StringFilter<"AccountingEntry"> | string
    patientDetailsId?: StringFilter<"AccountingEntry"> | string
    amount?: DecimalFilter<"AccountingEntry"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"AccountingEntry"> | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFilter<"AccountingEntry"> | $Enums.PaymentMethod
    transactionReference?: StringNullableFilter<"AccountingEntry"> | string | null
    type?: EnumAccountingEntryTypeFilter<"AccountingEntry"> | $Enums.AccountingEntryType
    createdAt?: DateTimeFilter<"AccountingEntry"> | Date | string
    updatedAt?: DateTimeNullableFilter<"AccountingEntry"> | Date | string | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
  }

  export type AccountingEntryOrderByWithRelationInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionReference?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    patientDetails?: PatientDetailsOrderByWithRelationInput
  }

  export type AccountingEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountingEntryWhereInput | AccountingEntryWhereInput[]
    OR?: AccountingEntryWhereInput[]
    NOT?: AccountingEntryWhereInput | AccountingEntryWhereInput[]
    patientDetailsId?: StringFilter<"AccountingEntry"> | string
    amount?: DecimalFilter<"AccountingEntry"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"AccountingEntry"> | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFilter<"AccountingEntry"> | $Enums.PaymentMethod
    transactionReference?: StringNullableFilter<"AccountingEntry"> | string | null
    type?: EnumAccountingEntryTypeFilter<"AccountingEntry"> | $Enums.AccountingEntryType
    createdAt?: DateTimeFilter<"AccountingEntry"> | Date | string
    updatedAt?: DateTimeNullableFilter<"AccountingEntry"> | Date | string | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
  }, "id">

  export type AccountingEntryOrderByWithAggregationInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionReference?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: AccountingEntryCountOrderByAggregateInput
    _avg?: AccountingEntryAvgOrderByAggregateInput
    _max?: AccountingEntryMaxOrderByAggregateInput
    _min?: AccountingEntryMinOrderByAggregateInput
    _sum?: AccountingEntrySumOrderByAggregateInput
  }

  export type AccountingEntryScalarWhereWithAggregatesInput = {
    AND?: AccountingEntryScalarWhereWithAggregatesInput | AccountingEntryScalarWhereWithAggregatesInput[]
    OR?: AccountingEntryScalarWhereWithAggregatesInput[]
    NOT?: AccountingEntryScalarWhereWithAggregatesInput | AccountingEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AccountingEntry"> | string
    patientDetailsId?: StringWithAggregatesFilter<"AccountingEntry"> | string
    amount?: DecimalWithAggregatesFilter<"AccountingEntry"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyWithAggregatesFilter<"AccountingEntry"> | $Enums.Currency
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"AccountingEntry"> | $Enums.PaymentMethod
    transactionReference?: StringNullableWithAggregatesFilter<"AccountingEntry"> | string | null
    type?: EnumAccountingEntryTypeWithAggregatesFilter<"AccountingEntry"> | $Enums.AccountingEntryType
    createdAt?: DateTimeWithAggregatesFilter<"AccountingEntry"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"AccountingEntry"> | Date | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type AuthenticatorWhereInput = {
    AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    OR?: AuthenticatorWhereInput[]
    NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    credentialID?: StringFilter<"Authenticator"> | string
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AuthenticatorOrderByWithRelationInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuthenticatorWhereUniqueInput = Prisma.AtLeast<{
    credentialID?: string
    userId_credentialID?: AuthenticatorUserIdCredentialIDCompoundUniqueInput
    AND?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    OR?: AuthenticatorWhereInput[]
    NOT?: AuthenticatorWhereInput | AuthenticatorWhereInput[]
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId_credentialID" | "credentialID">

  export type AuthenticatorOrderByWithAggregationInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrderInput | SortOrder
    _count?: AuthenticatorCountOrderByAggregateInput
    _avg?: AuthenticatorAvgOrderByAggregateInput
    _max?: AuthenticatorMaxOrderByAggregateInput
    _min?: AuthenticatorMinOrderByAggregateInput
    _sum?: AuthenticatorSumOrderByAggregateInput
  }

  export type AuthenticatorScalarWhereWithAggregatesInput = {
    AND?: AuthenticatorScalarWhereWithAggregatesInput | AuthenticatorScalarWhereWithAggregatesInput[]
    OR?: AuthenticatorScalarWhereWithAggregatesInput[]
    NOT?: AuthenticatorScalarWhereWithAggregatesInput | AuthenticatorScalarWhereWithAggregatesInput[]
    credentialID?: StringWithAggregatesFilter<"Authenticator"> | string
    userId?: StringWithAggregatesFilter<"Authenticator"> | string
    providerAccountId?: StringWithAggregatesFilter<"Authenticator"> | string
    credentialPublicKey?: StringWithAggregatesFilter<"Authenticator"> | string
    counter?: IntWithAggregatesFilter<"Authenticator"> | number
    credentialDeviceType?: StringWithAggregatesFilter<"Authenticator"> | string
    credentialBackedUp?: BoolWithAggregatesFilter<"Authenticator"> | boolean
    transports?: StringNullableWithAggregatesFilter<"Authenticator"> | string | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    zip?: StringFilter<"Address"> | string
    countryCode?: StringFilter<"Address"> | string
    additionalAddressLine?: StringNullableFilter<"Address"> | string | null
    userId?: StringFilter<"Address"> | string
    tenantId?: StringNullableFilter<"Address"> | string | null
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Address"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    zip?: SortOrder
    countryCode?: SortOrder
    additionalAddressLine?: SortOrderInput | SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    tenant?: TenantOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    tenantId?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    street?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    zip?: StringFilter<"Address"> | string
    countryCode?: StringFilter<"Address"> | string
    additionalAddressLine?: StringNullableFilter<"Address"> | string | null
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Address"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    tenant?: XOR<TenantNullableRelationFilter, TenantWhereInput> | null
  }, "id" | "userId" | "tenantId">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    zip?: SortOrder
    countryCode?: SortOrder
    additionalAddressLine?: SortOrderInput | SortOrder
    userId?: SortOrder
    tenantId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    street?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    zip?: StringWithAggregatesFilter<"Address"> | string
    countryCode?: StringWithAggregatesFilter<"Address"> | string
    additionalAddressLine?: StringNullableWithAggregatesFilter<"Address"> | string | null
    userId?: StringWithAggregatesFilter<"Address"> | string
    tenantId?: StringNullableWithAggregatesFilter<"Address"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Address"> | Date | string | null
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    createdById?: StringFilter<"Note"> | string
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    patientDetailsId?: StringFilter<"Note"> | string
    isDeleted?: BoolFilter<"Note"> | boolean
    createdBy?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    updatedBy?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    files?: DocumentListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    patientDetailsId?: SortOrder
    isDeleted?: SortOrder
    createdBy?: StaffMemberOrderByWithRelationInput
    updatedBy?: StaffMemberOrderByWithRelationInput
    patientDetails?: PatientDetailsOrderByWithRelationInput
    files?: DocumentOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    createdById?: StringFilter<"Note"> | string
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    patientDetailsId?: StringFilter<"Note"> | string
    isDeleted?: BoolFilter<"Note"> | boolean
    createdBy?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    updatedBy?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    files?: DocumentListRelationFilter
    Appointment?: AppointmentListRelationFilter
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    patientDetailsId?: SortOrder
    isDeleted?: SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    content?: StringWithAggregatesFilter<"Note"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Note"> | Date | string
    createdById?: StringWithAggregatesFilter<"Note"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Note"> | string | null
    patientDetailsId?: StringWithAggregatesFilter<"Note"> | string
    isDeleted?: BoolWithAggregatesFilter<"Note"> | boolean
  }

  export type DocumentWhereInput = {
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    createdById?: StringFilter<"Document"> | string
    updatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    updatedById?: StringNullableFilter<"Document"> | string | null
    contentType?: StringFilter<"Document"> | string
    noteId?: StringNullableFilter<"Document"> | string | null
    visibleTo?: EnumRoleNullableListFilter<"Document">
    quotationId?: StringNullableFilter<"Document"> | string | null
    createdBy?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    updatedBy?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    quotation?: XOR<QuotationNullableRelationFilter, QuotationWhereInput> | null
  }

  export type DocumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    contentType?: SortOrder
    noteId?: SortOrderInput | SortOrder
    visibleTo?: SortOrder
    quotationId?: SortOrderInput | SortOrder
    createdBy?: StaffMemberOrderByWithRelationInput
    updatedBy?: StaffMemberOrderByWithRelationInput
    note?: NoteOrderByWithRelationInput
    quotation?: QuotationOrderByWithRelationInput
  }

  export type DocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    quotationId?: string
    AND?: DocumentWhereInput | DocumentWhereInput[]
    OR?: DocumentWhereInput[]
    NOT?: DocumentWhereInput | DocumentWhereInput[]
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    createdById?: StringFilter<"Document"> | string
    updatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    updatedById?: StringNullableFilter<"Document"> | string | null
    contentType?: StringFilter<"Document"> | string
    noteId?: StringNullableFilter<"Document"> | string | null
    visibleTo?: EnumRoleNullableListFilter<"Document">
    createdBy?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    updatedBy?: XOR<StaffMemberNullableRelationFilter, StaffMemberWhereInput> | null
    note?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
    quotation?: XOR<QuotationNullableRelationFilter, QuotationWhereInput> | null
  }, "id" | "quotationId">

  export type DocumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    contentType?: SortOrder
    noteId?: SortOrderInput | SortOrder
    visibleTo?: SortOrder
    quotationId?: SortOrderInput | SortOrder
    _count?: DocumentCountOrderByAggregateInput
    _max?: DocumentMaxOrderByAggregateInput
    _min?: DocumentMinOrderByAggregateInput
  }

  export type DocumentScalarWhereWithAggregatesInput = {
    AND?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    OR?: DocumentScalarWhereWithAggregatesInput[]
    NOT?: DocumentScalarWhereWithAggregatesInput | DocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Document"> | string
    name?: StringWithAggregatesFilter<"Document"> | string
    path?: StringWithAggregatesFilter<"Document"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Document"> | Date | string
    createdById?: StringWithAggregatesFilter<"Document"> | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Document"> | Date | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Document"> | string | null
    contentType?: StringWithAggregatesFilter<"Document"> | string
    noteId?: StringNullableWithAggregatesFilter<"Document"> | string | null
    visibleTo?: EnumRoleNullableListFilter<"Document">
    quotationId?: StringNullableWithAggregatesFilter<"Document"> | string | null
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    patientDetailsId?: StringFilter<"Appointment"> | string
    staffMemberId?: StringFilter<"Appointment"> | string
    startAt?: DateTimeFilter<"Appointment"> | Date | string
    endAt?: DateTimeFilter<"Appointment"> | Date | string
    reportNoteId?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    staffMember?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    reportNote?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    patientDetailsId?: SortOrder
    staffMemberId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    reportNoteId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    patientDetails?: PatientDetailsOrderByWithRelationInput
    staffMember?: StaffMemberOrderByWithRelationInput
    reportNote?: NoteOrderByWithRelationInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    patientDetailsId?: StringFilter<"Appointment"> | string
    staffMemberId?: StringFilter<"Appointment"> | string
    startAt?: DateTimeFilter<"Appointment"> | Date | string
    endAt?: DateTimeFilter<"Appointment"> | Date | string
    reportNoteId?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    staffMember?: XOR<StaffMemberRelationFilter, StaffMemberWhereInput>
    reportNote?: XOR<NoteNullableRelationFilter, NoteWhereInput> | null
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    patientDetailsId?: SortOrder
    staffMemberId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    reportNoteId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    patientDetailsId?: StringWithAggregatesFilter<"Appointment"> | string
    staffMemberId?: StringWithAggregatesFilter<"Appointment"> | string
    startAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    endAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    reportNoteId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Appointment"> | Date | string | null
  }

  export type FeatureFlagWhereInput = {
    AND?: FeatureFlagWhereInput | FeatureFlagWhereInput[]
    OR?: FeatureFlagWhereInput[]
    NOT?: FeatureFlagWhereInput | FeatureFlagWhereInput[]
    id?: StringFilter<"FeatureFlag"> | string
    key?: EnumFeatureFlagKeyFilter<"FeatureFlag"> | $Enums.FeatureFlagKey
    isEnabled?: BoolFilter<"FeatureFlag"> | boolean
    tenantId?: StringFilter<"FeatureFlag"> | string
    createdAt?: DateTimeFilter<"FeatureFlag"> | Date | string
    updatedAt?: DateTimeNullableFilter<"FeatureFlag"> | Date | string | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }

  export type FeatureFlagOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    isEnabled?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    tenant?: TenantOrderByWithRelationInput
  }

  export type FeatureFlagWhereUniqueInput = Prisma.AtLeast<{
    id_key_tenantId?: FeatureFlagIdKeyTenantIdCompoundUniqueInput
    AND?: FeatureFlagWhereInput | FeatureFlagWhereInput[]
    OR?: FeatureFlagWhereInput[]
    NOT?: FeatureFlagWhereInput | FeatureFlagWhereInput[]
    id?: StringFilter<"FeatureFlag"> | string
    key?: EnumFeatureFlagKeyFilter<"FeatureFlag"> | $Enums.FeatureFlagKey
    isEnabled?: BoolFilter<"FeatureFlag"> | boolean
    tenantId?: StringFilter<"FeatureFlag"> | string
    createdAt?: DateTimeFilter<"FeatureFlag"> | Date | string
    updatedAt?: DateTimeNullableFilter<"FeatureFlag"> | Date | string | null
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
  }, "id_key_tenantId">

  export type FeatureFlagOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    isEnabled?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: FeatureFlagCountOrderByAggregateInput
    _max?: FeatureFlagMaxOrderByAggregateInput
    _min?: FeatureFlagMinOrderByAggregateInput
  }

  export type FeatureFlagScalarWhereWithAggregatesInput = {
    AND?: FeatureFlagScalarWhereWithAggregatesInput | FeatureFlagScalarWhereWithAggregatesInput[]
    OR?: FeatureFlagScalarWhereWithAggregatesInput[]
    NOT?: FeatureFlagScalarWhereWithAggregatesInput | FeatureFlagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeatureFlag"> | string
    key?: EnumFeatureFlagKeyWithAggregatesFilter<"FeatureFlag"> | $Enums.FeatureFlagKey
    isEnabled?: BoolWithAggregatesFilter<"FeatureFlag"> | boolean
    tenantId?: StringWithAggregatesFilter<"FeatureFlag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FeatureFlag"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"FeatureFlag"> | Date | string | null
  }

  export type PredefinedActTypeWhereInput = {
    AND?: PredefinedActTypeWhereInput | PredefinedActTypeWhereInput[]
    OR?: PredefinedActTypeWhereInput[]
    NOT?: PredefinedActTypeWhereInput | PredefinedActTypeWhereInput[]
    id?: StringFilter<"PredefinedActType"> | string
    name?: StringFilter<"PredefinedActType"> | string
    tenantId?: StringFilter<"PredefinedActType"> | string
    price?: DecimalFilter<"PredefinedActType"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActType"> | $Enums.Currency
    createdAt?: DateTimeFilter<"PredefinedActType"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActType"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    predefinedActSubTypes?: PredefinedActSubTypesListRelationFilter
    QuotationLine?: QuotationLineListRelationFilter
  }

  export type PredefinedActTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tenant?: TenantOrderByWithRelationInput
    predefinedActSubTypes?: PredefinedActSubTypesOrderByRelationAggregateInput
    QuotationLine?: QuotationLineOrderByRelationAggregateInput
  }

  export type PredefinedActTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PredefinedActTypeWhereInput | PredefinedActTypeWhereInput[]
    OR?: PredefinedActTypeWhereInput[]
    NOT?: PredefinedActTypeWhereInput | PredefinedActTypeWhereInput[]
    name?: StringFilter<"PredefinedActType"> | string
    tenantId?: StringFilter<"PredefinedActType"> | string
    price?: DecimalFilter<"PredefinedActType"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActType"> | $Enums.Currency
    createdAt?: DateTimeFilter<"PredefinedActType"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActType"> | Date | string
    tenant?: XOR<TenantRelationFilter, TenantWhereInput>
    predefinedActSubTypes?: PredefinedActSubTypesListRelationFilter
    QuotationLine?: QuotationLineListRelationFilter
  }, "id">

  export type PredefinedActTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PredefinedActTypeCountOrderByAggregateInput
    _avg?: PredefinedActTypeAvgOrderByAggregateInput
    _max?: PredefinedActTypeMaxOrderByAggregateInput
    _min?: PredefinedActTypeMinOrderByAggregateInput
    _sum?: PredefinedActTypeSumOrderByAggregateInput
  }

  export type PredefinedActTypeScalarWhereWithAggregatesInput = {
    AND?: PredefinedActTypeScalarWhereWithAggregatesInput | PredefinedActTypeScalarWhereWithAggregatesInput[]
    OR?: PredefinedActTypeScalarWhereWithAggregatesInput[]
    NOT?: PredefinedActTypeScalarWhereWithAggregatesInput | PredefinedActTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PredefinedActType"> | string
    name?: StringWithAggregatesFilter<"PredefinedActType"> | string
    tenantId?: StringWithAggregatesFilter<"PredefinedActType"> | string
    price?: DecimalWithAggregatesFilter<"PredefinedActType"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyWithAggregatesFilter<"PredefinedActType"> | $Enums.Currency
    createdAt?: DateTimeWithAggregatesFilter<"PredefinedActType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PredefinedActType"> | Date | string
  }

  export type PredefinedActSubTypesWhereInput = {
    AND?: PredefinedActSubTypesWhereInput | PredefinedActSubTypesWhereInput[]
    OR?: PredefinedActSubTypesWhereInput[]
    NOT?: PredefinedActSubTypesWhereInput | PredefinedActSubTypesWhereInput[]
    id?: StringFilter<"PredefinedActSubTypes"> | string
    name?: StringFilter<"PredefinedActSubTypes"> | string
    price?: DecimalFilter<"PredefinedActSubTypes"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActSubTypes"> | $Enums.Currency
    predefinedActTypeId?: StringFilter<"PredefinedActSubTypes"> | string
    createdAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
    predefinedActType?: XOR<PredefinedActTypeRelationFilter, PredefinedActTypeWhereInput>
    QuotationLine?: QuotationLineListRelationFilter
  }

  export type PredefinedActSubTypesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    predefinedActTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    predefinedActType?: PredefinedActTypeOrderByWithRelationInput
    QuotationLine?: QuotationLineOrderByRelationAggregateInput
  }

  export type PredefinedActSubTypesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PredefinedActSubTypesWhereInput | PredefinedActSubTypesWhereInput[]
    OR?: PredefinedActSubTypesWhereInput[]
    NOT?: PredefinedActSubTypesWhereInput | PredefinedActSubTypesWhereInput[]
    name?: StringFilter<"PredefinedActSubTypes"> | string
    price?: DecimalFilter<"PredefinedActSubTypes"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActSubTypes"> | $Enums.Currency
    predefinedActTypeId?: StringFilter<"PredefinedActSubTypes"> | string
    createdAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
    predefinedActType?: XOR<PredefinedActTypeRelationFilter, PredefinedActTypeWhereInput>
    QuotationLine?: QuotationLineListRelationFilter
  }, "id">

  export type PredefinedActSubTypesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    predefinedActTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PredefinedActSubTypesCountOrderByAggregateInput
    _avg?: PredefinedActSubTypesAvgOrderByAggregateInput
    _max?: PredefinedActSubTypesMaxOrderByAggregateInput
    _min?: PredefinedActSubTypesMinOrderByAggregateInput
    _sum?: PredefinedActSubTypesSumOrderByAggregateInput
  }

  export type PredefinedActSubTypesScalarWhereWithAggregatesInput = {
    AND?: PredefinedActSubTypesScalarWhereWithAggregatesInput | PredefinedActSubTypesScalarWhereWithAggregatesInput[]
    OR?: PredefinedActSubTypesScalarWhereWithAggregatesInput[]
    NOT?: PredefinedActSubTypesScalarWhereWithAggregatesInput | PredefinedActSubTypesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PredefinedActSubTypes"> | string
    name?: StringWithAggregatesFilter<"PredefinedActSubTypes"> | string
    price?: DecimalWithAggregatesFilter<"PredefinedActSubTypes"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyWithAggregatesFilter<"PredefinedActSubTypes"> | $Enums.Currency
    predefinedActTypeId?: StringWithAggregatesFilter<"PredefinedActSubTypes"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PredefinedActSubTypes"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PredefinedActSubTypes"> | Date | string
  }

  export type QuotationWhereInput = {
    AND?: QuotationWhereInput | QuotationWhereInput[]
    OR?: QuotationWhereInput[]
    NOT?: QuotationWhereInput | QuotationWhereInput[]
    id?: StringFilter<"Quotation"> | string
    patientDetailsId?: StringFilter<"Quotation"> | string
    name?: StringFilter<"Quotation"> | string
    status?: EnumQuotationStatusFilter<"Quotation"> | $Enums.QuotationStatus
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    quotationLines?: QuotationLineListRelationFilter
    document?: XOR<DocumentNullableRelationFilter, DocumentWhereInput> | null
  }

  export type QuotationOrderByWithRelationInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patientDetails?: PatientDetailsOrderByWithRelationInput
    quotationLines?: QuotationLineOrderByRelationAggregateInput
    document?: DocumentOrderByWithRelationInput
  }

  export type QuotationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuotationWhereInput | QuotationWhereInput[]
    OR?: QuotationWhereInput[]
    NOT?: QuotationWhereInput | QuotationWhereInput[]
    patientDetailsId?: StringFilter<"Quotation"> | string
    name?: StringFilter<"Quotation"> | string
    status?: EnumQuotationStatusFilter<"Quotation"> | $Enums.QuotationStatus
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
    patientDetails?: XOR<PatientDetailsRelationFilter, PatientDetailsWhereInput>
    quotationLines?: QuotationLineListRelationFilter
    document?: XOR<DocumentNullableRelationFilter, DocumentWhereInput> | null
  }, "id">

  export type QuotationOrderByWithAggregationInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuotationCountOrderByAggregateInput
    _max?: QuotationMaxOrderByAggregateInput
    _min?: QuotationMinOrderByAggregateInput
  }

  export type QuotationScalarWhereWithAggregatesInput = {
    AND?: QuotationScalarWhereWithAggregatesInput | QuotationScalarWhereWithAggregatesInput[]
    OR?: QuotationScalarWhereWithAggregatesInput[]
    NOT?: QuotationScalarWhereWithAggregatesInput | QuotationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quotation"> | string
    patientDetailsId?: StringWithAggregatesFilter<"Quotation"> | string
    name?: StringWithAggregatesFilter<"Quotation"> | string
    status?: EnumQuotationStatusWithAggregatesFilter<"Quotation"> | $Enums.QuotationStatus
    createdAt?: DateTimeWithAggregatesFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Quotation"> | Date | string
  }

  export type QuotationLineWhereInput = {
    AND?: QuotationLineWhereInput | QuotationLineWhereInput[]
    OR?: QuotationLineWhereInput[]
    NOT?: QuotationLineWhereInput | QuotationLineWhereInput[]
    id?: StringFilter<"QuotationLine"> | string
    quotationId?: StringFilter<"QuotationLine"> | string
    comment?: StringFilter<"QuotationLine"> | string
    quantity?: IntFilter<"QuotationLine"> | number
    unitPrice?: DecimalFilter<"QuotationLine"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"QuotationLine"> | $Enums.Currency
    actTypeId?: StringFilter<"QuotationLine"> | string
    subActTypeId?: StringNullableFilter<"QuotationLine"> | string | null
    forecastDate?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
    createdAt?: DateTimeFilter<"QuotationLine"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
    quotation?: XOR<QuotationRelationFilter, QuotationWhereInput>
    actType?: XOR<PredefinedActTypeRelationFilter, PredefinedActTypeWhereInput>
    subActType?: XOR<PredefinedActSubTypesNullableRelationFilter, PredefinedActSubTypesWhereInput> | null
  }

  export type QuotationLineOrderByWithRelationInput = {
    id?: SortOrder
    quotationId?: SortOrder
    comment?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    actTypeId?: SortOrder
    subActTypeId?: SortOrderInput | SortOrder
    forecastDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    quotation?: QuotationOrderByWithRelationInput
    actType?: PredefinedActTypeOrderByWithRelationInput
    subActType?: PredefinedActSubTypesOrderByWithRelationInput
  }

  export type QuotationLineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuotationLineWhereInput | QuotationLineWhereInput[]
    OR?: QuotationLineWhereInput[]
    NOT?: QuotationLineWhereInput | QuotationLineWhereInput[]
    quotationId?: StringFilter<"QuotationLine"> | string
    comment?: StringFilter<"QuotationLine"> | string
    quantity?: IntFilter<"QuotationLine"> | number
    unitPrice?: DecimalFilter<"QuotationLine"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"QuotationLine"> | $Enums.Currency
    actTypeId?: StringFilter<"QuotationLine"> | string
    subActTypeId?: StringNullableFilter<"QuotationLine"> | string | null
    forecastDate?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
    createdAt?: DateTimeFilter<"QuotationLine"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
    quotation?: XOR<QuotationRelationFilter, QuotationWhereInput>
    actType?: XOR<PredefinedActTypeRelationFilter, PredefinedActTypeWhereInput>
    subActType?: XOR<PredefinedActSubTypesNullableRelationFilter, PredefinedActSubTypesWhereInput> | null
  }, "id">

  export type QuotationLineOrderByWithAggregationInput = {
    id?: SortOrder
    quotationId?: SortOrder
    comment?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    actTypeId?: SortOrder
    subActTypeId?: SortOrderInput | SortOrder
    forecastDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: QuotationLineCountOrderByAggregateInput
    _avg?: QuotationLineAvgOrderByAggregateInput
    _max?: QuotationLineMaxOrderByAggregateInput
    _min?: QuotationLineMinOrderByAggregateInput
    _sum?: QuotationLineSumOrderByAggregateInput
  }

  export type QuotationLineScalarWhereWithAggregatesInput = {
    AND?: QuotationLineScalarWhereWithAggregatesInput | QuotationLineScalarWhereWithAggregatesInput[]
    OR?: QuotationLineScalarWhereWithAggregatesInput[]
    NOT?: QuotationLineScalarWhereWithAggregatesInput | QuotationLineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuotationLine"> | string
    quotationId?: StringWithAggregatesFilter<"QuotationLine"> | string
    comment?: StringWithAggregatesFilter<"QuotationLine"> | string
    quantity?: IntWithAggregatesFilter<"QuotationLine"> | number
    unitPrice?: DecimalWithAggregatesFilter<"QuotationLine"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyWithAggregatesFilter<"QuotationLine"> | $Enums.Currency
    actTypeId?: StringWithAggregatesFilter<"QuotationLine"> | string
    subActTypeId?: StringNullableWithAggregatesFilter<"QuotationLine"> | string | null
    forecastDate?: DateTimeNullableWithAggregatesFilter<"QuotationLine"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QuotationLine"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"QuotationLine"> | Date | string | null
  }

  export type TenantCreateInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagCreateNestedManyWithoutTenantInput
    billingAddress?: AddressCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsUncheckedCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberUncheckedCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagUncheckedCreateNestedManyWithoutTenantInput
    billingAddress?: AddressUncheckedCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUncheckedUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUncheckedUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateManyInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type TenantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StaffMemberCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberCreateManyInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type StaffMemberUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StaffMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientDetailsCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    tenant: TenantCreateNestedOneWithoutPatientsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsCreateManyInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type PatientDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccountingEntryCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patientDetails: PatientDetailsCreateNestedOneWithoutAccountingEntryInput
  }

  export type AccountingEntryUncheckedCreateInput = {
    id?: string
    patientDetailsId: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountingEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutAccountingEntryNestedInput
  }

  export type AccountingEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountingEntryCreateManyInput = {
    id?: string
    patientDetailsId: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountingEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountingEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountCreateManyInput = {
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionCreateManyInput = {
    sessionToken: string
    userId: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuthenticatorCreateInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
    user: UserCreateNestedOneWithoutAuthenticatorInput
  }

  export type AuthenticatorUncheckedCreateInput = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAuthenticatorNestedInput
  }

  export type AuthenticatorUncheckedUpdateInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorCreateManyInput = {
    credentialID: string
    userId: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUpdateManyMutationInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateManyInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressCreateInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAddressInput
    tenant?: TenantCreateNestedOneWithoutBillingAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    userId: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAddressNestedInput
    tenant?: TenantUpdateOneWithoutBillingAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AddressCreateManyInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    userId: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoteCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    createdBy: StaffMemberCreateNestedOneWithoutCreatedNotesInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedNotesInput
    patientDetails: PatientDetailsCreateNestedOneWithoutNotesInput
    files?: DocumentCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
    files?: DocumentUncheckedCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedNotesNestedInput
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutNotesNestedInput
    files?: DocumentUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    files?: DocumentUncheckedUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentCreateInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    createdBy: StaffMemberCreateNestedOneWithoutCreatedDocumentsInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedDocumentsInput
    note?: NoteCreateNestedOneWithoutFilesInput
    quotation?: QuotationCreateNestedOneWithoutDocumentInput
  }

  export type DocumentUncheckedCreateInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedDocumentsNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedDocumentsNestedInput
    note?: NoteUpdateOneWithoutFilesNestedInput
    quotation?: QuotationUpdateOneWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentCreateManyInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
  }

  export type DocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentCreateInput = {
    id?: string
    status: $Enums.AppointmentStatus
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patientDetails: PatientDetailsCreateNestedOneWithoutAppointmentInput
    staffMember: StaffMemberCreateNestedOneWithoutAppointmentInput
    reportNote?: NoteCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutAppointmentNestedInput
    staffMember?: StaffMemberUpdateOneRequiredWithoutAppointmentNestedInput
    reportNote?: NoteUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentCreateManyInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeatureFlagCreateInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
    tenant: TenantCreateNestedOneWithoutFeatureFlagInput
  }

  export type FeatureFlagUncheckedCreateInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type FeatureFlagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneRequiredWithoutFeatureFlagNestedInput
  }

  export type FeatureFlagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeatureFlagCreateManyInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type FeatureFlagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeatureFlagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PredefinedActTypeCreateInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPredefinedActTypesInput
    predefinedActSubTypes?: PredefinedActSubTypesCreateNestedManyWithoutPredefinedActTypeInput
    QuotationLine?: QuotationLineCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeUncheckedCreateInput = {
    id?: string
    name: string
    tenantId: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedCreateNestedManyWithoutPredefinedActTypeInput
    QuotationLine?: QuotationLineUncheckedCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPredefinedActTypesNestedInput
    predefinedActSubTypes?: PredefinedActSubTypesUpdateManyWithoutPredefinedActTypeNestedInput
    QuotationLine?: QuotationLineUpdateManyWithoutActTypeNestedInput
  }

  export type PredefinedActTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeNestedInput
    QuotationLine?: QuotationLineUncheckedUpdateManyWithoutActTypeNestedInput
  }

  export type PredefinedActTypeCreateManyInput = {
    id?: string
    name: string
    tenantId: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PredefinedActTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedActTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedActSubTypesCreateInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActType: PredefinedActTypeCreateNestedOneWithoutPredefinedActSubTypesInput
    QuotationLine?: QuotationLineCreateNestedManyWithoutSubActTypeInput
  }

  export type PredefinedActSubTypesUncheckedCreateInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    predefinedActTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    QuotationLine?: QuotationLineUncheckedCreateNestedManyWithoutSubActTypeInput
  }

  export type PredefinedActSubTypesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActType?: PredefinedActTypeUpdateOneRequiredWithoutPredefinedActSubTypesNestedInput
    QuotationLine?: QuotationLineUpdateManyWithoutSubActTypeNestedInput
  }

  export type PredefinedActSubTypesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    predefinedActTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    QuotationLine?: QuotationLineUncheckedUpdateManyWithoutSubActTypeNestedInput
  }

  export type PredefinedActSubTypesCreateManyInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    predefinedActTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PredefinedActSubTypesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PredefinedActSubTypesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    predefinedActTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuotationCreateInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientDetails: PatientDetailsCreateNestedOneWithoutQuotationInput
    quotationLines?: QuotationLineCreateNestedManyWithoutQuotationInput
    document?: DocumentCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateInput = {
    id?: string
    patientDetailsId: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationLines?: QuotationLineUncheckedCreateNestedManyWithoutQuotationInput
    document?: DocumentUncheckedCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutQuotationNestedInput
    quotationLines?: QuotationLineUpdateManyWithoutQuotationNestedInput
    document?: DocumentUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationLines?: QuotationLineUncheckedUpdateManyWithoutQuotationNestedInput
    document?: DocumentUncheckedUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationCreateManyInput = {
    id?: string
    patientDetailsId: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuotationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuotationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuotationLineCreateInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    quotation: QuotationCreateNestedOneWithoutQuotationLinesInput
    actType: PredefinedActTypeCreateNestedOneWithoutQuotationLineInput
    subActType?: PredefinedActSubTypesCreateNestedOneWithoutQuotationLineInput
  }

  export type QuotationLineUncheckedCreateInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quotation?: QuotationUpdateOneRequiredWithoutQuotationLinesNestedInput
    actType?: PredefinedActTypeUpdateOneRequiredWithoutQuotationLineNestedInput
    subActType?: PredefinedActSubTypesUpdateOneWithoutQuotationLineNestedInput
  }

  export type QuotationLineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineCreateManyInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PatientDetailsListRelationFilter = {
    every?: PatientDetailsWhereInput
    some?: PatientDetailsWhereInput
    none?: PatientDetailsWhereInput
  }

  export type StaffMemberListRelationFilter = {
    every?: StaffMemberWhereInput
    some?: StaffMemberWhereInput
    none?: StaffMemberWhereInput
  }

  export type FeatureFlagListRelationFilter = {
    every?: FeatureFlagWhereInput
    some?: FeatureFlagWhereInput
    none?: FeatureFlagWhereInput
  }

  export type AddressNullableRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type PredefinedActTypeListRelationFilter = {
    every?: PredefinedActTypeWhereInput
    some?: PredefinedActTypeWhereInput
    none?: PredefinedActTypeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatientDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeatureFlagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredefinedActTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AuthenticatorListRelationFilter = {
    every?: AuthenticatorWhereInput
    some?: AuthenticatorWhereInput
    none?: AuthenticatorWhereInput
  }

  export type StaffMemberNullableRelationFilter = {
    is?: StaffMemberWhereInput | null
    isNot?: StaffMemberWhereInput | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuthenticatorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    locale?: SortOrder
    phone?: SortOrder
    birthDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TenantNullableRelationFilter = {
    is?: TenantWhereInput | null
    isNot?: TenantWhereInput | null
  }

  export type DocumentListRelationFilter = {
    every?: DocumentWhereInput
    some?: DocumentWhereInput
    none?: DocumentWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type DocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffMemberCountOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type StaffMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type StaffMemberMinOrderByAggregateInput = {
    id?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TenantRelationFilter = {
    is?: TenantWhereInput
    isNot?: TenantWhereInput
  }

  export type AccountingEntryListRelationFilter = {
    every?: AccountingEntryWhereInput
    some?: AccountingEntryWhereInput
    none?: AccountingEntryWhereInput
  }

  export type QuotationListRelationFilter = {
    every?: QuotationWhereInput
    some?: QuotationWhereInput
    none?: QuotationWhereInput
  }

  export type AccountingEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuotationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientDetailsUserIdTenantIdCompoundUniqueInput = {
    userId: string
    tenantId: string
  }

  export type PatientDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PatientDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type PatientDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumAccountingEntryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountingEntryType | EnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountingEntryTypeFilter<$PrismaModel> | $Enums.AccountingEntryType
  }

  export type PatientDetailsRelationFilter = {
    is?: PatientDetailsWhereInput
    isNot?: PatientDetailsWhereInput
  }

  export type AccountingEntryCountOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionReference?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountingEntryAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type AccountingEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionReference?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountingEntryMinOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionReference?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountingEntrySumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumAccountingEntryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountingEntryType | EnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountingEntryTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountingEntryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountingEntryTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountingEntryTypeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AuthenticatorUserIdCredentialIDCompoundUniqueInput = {
    userId: string
    credentialID: string
  }

  export type AuthenticatorCountOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorAvgOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type AuthenticatorMaxOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorMinOrderByAggregateInput = {
    credentialID?: SortOrder
    userId?: SortOrder
    providerAccountId?: SortOrder
    credentialPublicKey?: SortOrder
    counter?: SortOrder
    credentialDeviceType?: SortOrder
    credentialBackedUp?: SortOrder
    transports?: SortOrder
  }

  export type AuthenticatorSumOrderByAggregateInput = {
    counter?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    zip?: SortOrder
    countryCode?: SortOrder
    additionalAddressLine?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    zip?: SortOrder
    countryCode?: SortOrder
    additionalAddressLine?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    city?: SortOrder
    zip?: SortOrder
    countryCode?: SortOrder
    additionalAddressLine?: SortOrder
    userId?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffMemberRelationFilter = {
    is?: StaffMemberWhereInput
    isNot?: StaffMemberWhereInput
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    patientDetailsId?: SortOrder
    isDeleted?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    patientDetailsId?: SortOrder
    isDeleted?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    patientDetailsId?: SortOrder
    isDeleted?: SortOrder
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NoteNullableRelationFilter = {
    is?: NoteWhereInput | null
    isNot?: NoteWhereInput | null
  }

  export type QuotationNullableRelationFilter = {
    is?: QuotationWhereInput | null
    isNot?: QuotationWhereInput | null
  }

  export type DocumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    contentType?: SortOrder
    noteId?: SortOrder
    visibleTo?: SortOrder
    quotationId?: SortOrder
  }

  export type DocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    contentType?: SortOrder
    noteId?: SortOrder
    quotationId?: SortOrder
  }

  export type DocumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    path?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
    contentType?: SortOrder
    noteId?: SortOrder
    quotationId?: SortOrder
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    patientDetailsId?: SortOrder
    staffMemberId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    reportNoteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    patientDetailsId?: SortOrder
    staffMemberId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    reportNoteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    patientDetailsId?: SortOrder
    staffMemberId?: SortOrder
    startAt?: SortOrder
    endAt?: SortOrder
    reportNoteId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type EnumFeatureFlagKeyFilter<$PrismaModel = never> = {
    equals?: $Enums.FeatureFlagKey | EnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    in?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumFeatureFlagKeyFilter<$PrismaModel> | $Enums.FeatureFlagKey
  }

  export type FeatureFlagIdKeyTenantIdCompoundUniqueInput = {
    id: string
    key: $Enums.FeatureFlagKey
    tenantId: string
  }

  export type FeatureFlagCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    isEnabled?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureFlagMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    isEnabled?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeatureFlagMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    isEnabled?: SortOrder
    tenantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFeatureFlagKeyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeatureFlagKey | EnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    in?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumFeatureFlagKeyWithAggregatesFilter<$PrismaModel> | $Enums.FeatureFlagKey
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeatureFlagKeyFilter<$PrismaModel>
    _max?: NestedEnumFeatureFlagKeyFilter<$PrismaModel>
  }

  export type PredefinedActSubTypesListRelationFilter = {
    every?: PredefinedActSubTypesWhereInput
    some?: PredefinedActSubTypesWhereInput
    none?: PredefinedActSubTypesWhereInput
  }

  export type QuotationLineListRelationFilter = {
    every?: QuotationLineWhereInput
    some?: QuotationLineWhereInput
    none?: QuotationLineWhereInput
  }

  export type PredefinedActSubTypesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuotationLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PredefinedActTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActTypeAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type PredefinedActTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tenantId?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActTypeSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type PredefinedActTypeRelationFilter = {
    is?: PredefinedActTypeWhereInput
    isNot?: PredefinedActTypeWhereInput
  }

  export type PredefinedActSubTypesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    predefinedActTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActSubTypesAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type PredefinedActSubTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    predefinedActTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActSubTypesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    currency?: SortOrder
    predefinedActTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PredefinedActSubTypesSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type EnumQuotationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuotationStatus | EnumQuotationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuotationStatusFilter<$PrismaModel> | $Enums.QuotationStatus
  }

  export type DocumentNullableRelationFilter = {
    is?: DocumentWhereInput | null
    isNot?: DocumentWhereInput | null
  }

  export type QuotationCountOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuotationMaxOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuotationMinOrderByAggregateInput = {
    id?: SortOrder
    patientDetailsId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumQuotationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuotationStatus | EnumQuotationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuotationStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuotationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuotationStatusFilter<$PrismaModel>
    _max?: NestedEnumQuotationStatusFilter<$PrismaModel>
  }

  export type QuotationRelationFilter = {
    is?: QuotationWhereInput
    isNot?: QuotationWhereInput
  }

  export type PredefinedActSubTypesNullableRelationFilter = {
    is?: PredefinedActSubTypesWhereInput | null
    isNot?: PredefinedActSubTypesWhereInput | null
  }

  export type QuotationLineCountOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    comment?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    actTypeId?: SortOrder
    subActTypeId?: SortOrder
    forecastDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuotationLineAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
  }

  export type QuotationLineMaxOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    comment?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    actTypeId?: SortOrder
    subActTypeId?: SortOrder
    forecastDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuotationLineMinOrderByAggregateInput = {
    id?: SortOrder
    quotationId?: SortOrder
    comment?: SortOrder
    quantity?: SortOrder
    unitPrice?: SortOrder
    currency?: SortOrder
    actTypeId?: SortOrder
    subActTypeId?: SortOrder
    forecastDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuotationLineSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitPrice?: SortOrder
  }

  export type PatientDetailsCreateNestedManyWithoutTenantInput = {
    create?: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput> | PatientDetailsCreateWithoutTenantInput[] | PatientDetailsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutTenantInput | PatientDetailsCreateOrConnectWithoutTenantInput[]
    createMany?: PatientDetailsCreateManyTenantInputEnvelope
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
  }

  export type StaffMemberCreateNestedManyWithoutTenantInput = {
    create?: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput> | StaffMemberCreateWithoutTenantInput[] | StaffMemberUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StaffMemberCreateOrConnectWithoutTenantInput | StaffMemberCreateOrConnectWithoutTenantInput[]
    createMany?: StaffMemberCreateManyTenantInputEnvelope
    connect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
  }

  export type FeatureFlagCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput> | FeatureFlagCreateWithoutTenantInput[] | FeatureFlagUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureFlagCreateOrConnectWithoutTenantInput | FeatureFlagCreateOrConnectWithoutTenantInput[]
    createMany?: FeatureFlagCreateManyTenantInputEnvelope
    connect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
  }

  export type AddressCreateNestedOneWithoutTenantInput = {
    create?: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTenantInput
    connect?: AddressWhereUniqueInput
  }

  export type PredefinedActTypeCreateNestedManyWithoutTenantInput = {
    create?: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput> | PredefinedActTypeCreateWithoutTenantInput[] | PredefinedActTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutTenantInput | PredefinedActTypeCreateOrConnectWithoutTenantInput[]
    createMany?: PredefinedActTypeCreateManyTenantInputEnvelope
    connect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
  }

  export type PatientDetailsUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput> | PatientDetailsCreateWithoutTenantInput[] | PatientDetailsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutTenantInput | PatientDetailsCreateOrConnectWithoutTenantInput[]
    createMany?: PatientDetailsCreateManyTenantInputEnvelope
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
  }

  export type StaffMemberUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput> | StaffMemberCreateWithoutTenantInput[] | StaffMemberUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StaffMemberCreateOrConnectWithoutTenantInput | StaffMemberCreateOrConnectWithoutTenantInput[]
    createMany?: StaffMemberCreateManyTenantInputEnvelope
    connect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
  }

  export type FeatureFlagUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput> | FeatureFlagCreateWithoutTenantInput[] | FeatureFlagUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureFlagCreateOrConnectWithoutTenantInput | FeatureFlagCreateOrConnectWithoutTenantInput[]
    createMany?: FeatureFlagCreateManyTenantInputEnvelope
    connect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedOneWithoutTenantInput = {
    create?: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTenantInput
    connect?: AddressWhereUniqueInput
  }

  export type PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput = {
    create?: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput> | PredefinedActTypeCreateWithoutTenantInput[] | PredefinedActTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutTenantInput | PredefinedActTypeCreateOrConnectWithoutTenantInput[]
    createMany?: PredefinedActTypeCreateManyTenantInputEnvelope
    connect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PatientDetailsUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput> | PatientDetailsCreateWithoutTenantInput[] | PatientDetailsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutTenantInput | PatientDetailsCreateOrConnectWithoutTenantInput[]
    upsert?: PatientDetailsUpsertWithWhereUniqueWithoutTenantInput | PatientDetailsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PatientDetailsCreateManyTenantInputEnvelope
    set?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    disconnect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    delete?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    update?: PatientDetailsUpdateWithWhereUniqueWithoutTenantInput | PatientDetailsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PatientDetailsUpdateManyWithWhereWithoutTenantInput | PatientDetailsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
  }

  export type StaffMemberUpdateManyWithoutTenantNestedInput = {
    create?: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput> | StaffMemberCreateWithoutTenantInput[] | StaffMemberUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StaffMemberCreateOrConnectWithoutTenantInput | StaffMemberCreateOrConnectWithoutTenantInput[]
    upsert?: StaffMemberUpsertWithWhereUniqueWithoutTenantInput | StaffMemberUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: StaffMemberCreateManyTenantInputEnvelope
    set?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    disconnect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    delete?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    connect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    update?: StaffMemberUpdateWithWhereUniqueWithoutTenantInput | StaffMemberUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: StaffMemberUpdateManyWithWhereWithoutTenantInput | StaffMemberUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: StaffMemberScalarWhereInput | StaffMemberScalarWhereInput[]
  }

  export type FeatureFlagUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput> | FeatureFlagCreateWithoutTenantInput[] | FeatureFlagUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureFlagCreateOrConnectWithoutTenantInput | FeatureFlagCreateOrConnectWithoutTenantInput[]
    upsert?: FeatureFlagUpsertWithWhereUniqueWithoutTenantInput | FeatureFlagUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeatureFlagCreateManyTenantInputEnvelope
    set?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    disconnect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    delete?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    connect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    update?: FeatureFlagUpdateWithWhereUniqueWithoutTenantInput | FeatureFlagUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeatureFlagUpdateManyWithWhereWithoutTenantInput | FeatureFlagUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeatureFlagScalarWhereInput | FeatureFlagScalarWhereInput[]
  }

  export type AddressUpdateOneWithoutTenantNestedInput = {
    create?: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTenantInput
    upsert?: AddressUpsertWithoutTenantInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutTenantInput, AddressUpdateWithoutTenantInput>, AddressUncheckedUpdateWithoutTenantInput>
  }

  export type PredefinedActTypeUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput> | PredefinedActTypeCreateWithoutTenantInput[] | PredefinedActTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutTenantInput | PredefinedActTypeCreateOrConnectWithoutTenantInput[]
    upsert?: PredefinedActTypeUpsertWithWhereUniqueWithoutTenantInput | PredefinedActTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PredefinedActTypeCreateManyTenantInputEnvelope
    set?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    disconnect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    delete?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    connect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    update?: PredefinedActTypeUpdateWithWhereUniqueWithoutTenantInput | PredefinedActTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PredefinedActTypeUpdateManyWithWhereWithoutTenantInput | PredefinedActTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PredefinedActTypeScalarWhereInput | PredefinedActTypeScalarWhereInput[]
  }

  export type PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput> | PatientDetailsCreateWithoutTenantInput[] | PatientDetailsUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutTenantInput | PatientDetailsCreateOrConnectWithoutTenantInput[]
    upsert?: PatientDetailsUpsertWithWhereUniqueWithoutTenantInput | PatientDetailsUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PatientDetailsCreateManyTenantInputEnvelope
    set?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    disconnect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    delete?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    update?: PatientDetailsUpdateWithWhereUniqueWithoutTenantInput | PatientDetailsUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PatientDetailsUpdateManyWithWhereWithoutTenantInput | PatientDetailsUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
  }

  export type StaffMemberUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput> | StaffMemberCreateWithoutTenantInput[] | StaffMemberUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: StaffMemberCreateOrConnectWithoutTenantInput | StaffMemberCreateOrConnectWithoutTenantInput[]
    upsert?: StaffMemberUpsertWithWhereUniqueWithoutTenantInput | StaffMemberUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: StaffMemberCreateManyTenantInputEnvelope
    set?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    disconnect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    delete?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    connect?: StaffMemberWhereUniqueInput | StaffMemberWhereUniqueInput[]
    update?: StaffMemberUpdateWithWhereUniqueWithoutTenantInput | StaffMemberUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: StaffMemberUpdateManyWithWhereWithoutTenantInput | StaffMemberUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: StaffMemberScalarWhereInput | StaffMemberScalarWhereInput[]
  }

  export type FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput> | FeatureFlagCreateWithoutTenantInput[] | FeatureFlagUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: FeatureFlagCreateOrConnectWithoutTenantInput | FeatureFlagCreateOrConnectWithoutTenantInput[]
    upsert?: FeatureFlagUpsertWithWhereUniqueWithoutTenantInput | FeatureFlagUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: FeatureFlagCreateManyTenantInputEnvelope
    set?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    disconnect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    delete?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    connect?: FeatureFlagWhereUniqueInput | FeatureFlagWhereUniqueInput[]
    update?: FeatureFlagUpdateWithWhereUniqueWithoutTenantInput | FeatureFlagUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: FeatureFlagUpdateManyWithWhereWithoutTenantInput | FeatureFlagUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: FeatureFlagScalarWhereInput | FeatureFlagScalarWhereInput[]
  }

  export type AddressUncheckedUpdateOneWithoutTenantNestedInput = {
    create?: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
    connectOrCreate?: AddressCreateOrConnectWithoutTenantInput
    upsert?: AddressUpsertWithoutTenantInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutTenantInput, AddressUpdateWithoutTenantInput>, AddressUncheckedUpdateWithoutTenantInput>
  }

  export type PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput = {
    create?: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput> | PredefinedActTypeCreateWithoutTenantInput[] | PredefinedActTypeUncheckedCreateWithoutTenantInput[]
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutTenantInput | PredefinedActTypeCreateOrConnectWithoutTenantInput[]
    upsert?: PredefinedActTypeUpsertWithWhereUniqueWithoutTenantInput | PredefinedActTypeUpsertWithWhereUniqueWithoutTenantInput[]
    createMany?: PredefinedActTypeCreateManyTenantInputEnvelope
    set?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    disconnect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    delete?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    connect?: PredefinedActTypeWhereUniqueInput | PredefinedActTypeWhereUniqueInput[]
    update?: PredefinedActTypeUpdateWithWhereUniqueWithoutTenantInput | PredefinedActTypeUpdateWithWhereUniqueWithoutTenantInput[]
    updateMany?: PredefinedActTypeUpdateManyWithWhereWithoutTenantInput | PredefinedActTypeUpdateManyWithWhereWithoutTenantInput[]
    deleteMany?: PredefinedActTypeScalarWhereInput | PredefinedActTypeScalarWhereInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthenticatorCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
  }

  export type PatientDetailsCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput> | PatientDetailsCreateWithoutUserInput[] | PatientDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutUserInput | PatientDetailsCreateOrConnectWithoutUserInput[]
    createMany?: PatientDetailsCreateManyUserInputEnvelope
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
  }

  export type StaffMemberCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUserInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    connect?: AddressWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AuthenticatorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
  }

  export type PatientDetailsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput> | PatientDetailsCreateWithoutUserInput[] | PatientDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutUserInput | PatientDetailsCreateOrConnectWithoutUserInput[]
    createMany?: PatientDetailsCreateManyUserInputEnvelope
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
  }

  export type StaffMemberUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUserInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type AddressUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    connect?: AddressWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthenticatorUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    upsert?: AuthenticatorUpsertWithWhereUniqueWithoutUserInput | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    disconnect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    update?: AuthenticatorUpdateWithWhereUniqueWithoutUserInput | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthenticatorUpdateManyWithWhereWithoutUserInput | AuthenticatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
  }

  export type PatientDetailsUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput> | PatientDetailsCreateWithoutUserInput[] | PatientDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutUserInput | PatientDetailsCreateOrConnectWithoutUserInput[]
    upsert?: PatientDetailsUpsertWithWhereUniqueWithoutUserInput | PatientDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientDetailsCreateManyUserInputEnvelope
    set?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    disconnect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    delete?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    update?: PatientDetailsUpdateWithWhereUniqueWithoutUserInput | PatientDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientDetailsUpdateManyWithWhereWithoutUserInput | PatientDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
  }

  export type StaffMemberUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUserInput
    upsert?: StaffMemberUpsertWithoutUserInput
    disconnect?: StaffMemberWhereInput | boolean
    delete?: StaffMemberWhereInput | boolean
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutUserInput, StaffMemberUpdateWithoutUserInput>, StaffMemberUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateOneWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUserInput, AddressUpdateWithoutUserInput>, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AuthenticatorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput> | AuthenticatorCreateWithoutUserInput[] | AuthenticatorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuthenticatorCreateOrConnectWithoutUserInput | AuthenticatorCreateOrConnectWithoutUserInput[]
    upsert?: AuthenticatorUpsertWithWhereUniqueWithoutUserInput | AuthenticatorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuthenticatorCreateManyUserInputEnvelope
    set?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    disconnect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    delete?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    connect?: AuthenticatorWhereUniqueInput | AuthenticatorWhereUniqueInput[]
    update?: AuthenticatorUpdateWithWhereUniqueWithoutUserInput | AuthenticatorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuthenticatorUpdateManyWithWhereWithoutUserInput | AuthenticatorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
  }

  export type PatientDetailsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput> | PatientDetailsCreateWithoutUserInput[] | PatientDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutUserInput | PatientDetailsCreateOrConnectWithoutUserInput[]
    upsert?: PatientDetailsUpsertWithWhereUniqueWithoutUserInput | PatientDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientDetailsCreateManyUserInputEnvelope
    set?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    disconnect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    delete?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    connect?: PatientDetailsWhereUniqueInput | PatientDetailsWhereUniqueInput[]
    update?: PatientDetailsUpdateWithWhereUniqueWithoutUserInput | PatientDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientDetailsUpdateManyWithWhereWithoutUserInput | PatientDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
  }

  export type StaffMemberUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUserInput
    upsert?: StaffMemberUpsertWithoutUserInput
    disconnect?: StaffMemberWhereInput | boolean
    delete?: StaffMemberWhereInput | boolean
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutUserInput, StaffMemberUpdateWithoutUserInput>, StaffMemberUncheckedUpdateWithoutUserInput>
  }

  export type AddressUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput
    upsert?: AddressUpsertWithoutUserInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUserInput, AddressUpdateWithoutUserInput>, AddressUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutStaffMemberInput = {
    create?: XOR<UserCreateWithoutStaffMemberInput, UserUncheckedCreateWithoutStaffMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffMemberInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutStaffMembersInput = {
    create?: XOR<TenantCreateWithoutStaffMembersInput, TenantUncheckedCreateWithoutStaffMembersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutStaffMembersInput
    connect?: TenantWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput> | DocumentCreateWithoutUpdatedByInput[] | DocumentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUpdatedByInput | DocumentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DocumentCreateManyUpdatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutStaffMemberInput = {
    create?: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput> | AppointmentCreateWithoutStaffMemberInput[] | AppointmentUncheckedCreateWithoutStaffMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffMemberInput | AppointmentCreateOrConnectWithoutStaffMemberInput[]
    createMany?: AppointmentCreateManyStaffMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput> | DocumentCreateWithoutUpdatedByInput[] | DocumentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUpdatedByInput | DocumentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DocumentCreateManyUpdatedByInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput = {
    create?: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput> | AppointmentCreateWithoutStaffMemberInput[] | AppointmentUncheckedCreateWithoutStaffMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffMemberInput | AppointmentCreateOrConnectWithoutStaffMemberInput[]
    createMany?: AppointmentCreateManyStaffMemberInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutStaffMemberNestedInput = {
    create?: XOR<UserCreateWithoutStaffMemberInput, UserUncheckedCreateWithoutStaffMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffMemberInput
    upsert?: UserUpsertWithoutStaffMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffMemberInput, UserUpdateWithoutStaffMemberInput>, UserUncheckedUpdateWithoutStaffMemberInput>
  }

  export type TenantUpdateOneWithoutStaffMembersNestedInput = {
    create?: XOR<TenantCreateWithoutStaffMembersInput, TenantUncheckedCreateWithoutStaffMembersInput>
    connectOrCreate?: TenantCreateOrConnectWithoutStaffMembersInput
    upsert?: TenantUpsertWithoutStaffMembersInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutStaffMembersInput, TenantUpdateWithoutStaffMembersInput>, TenantUncheckedUpdateWithoutStaffMembersInput>
  }

  export type DocumentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput> | DocumentCreateWithoutUpdatedByInput[] | DocumentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUpdatedByInput | DocumentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUpdatedByInput | DocumentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DocumentCreateManyUpdatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUpdatedByInput | DocumentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUpdatedByInput | DocumentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCreatedByInput | NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCreatedByInput | NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCreatedByInput | NoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUpdatedByInput | NoteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUpdatedByInput | NoteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUpdatedByInput | NoteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutStaffMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput> | AppointmentCreateWithoutStaffMemberInput[] | AppointmentUncheckedCreateWithoutStaffMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffMemberInput | AppointmentCreateOrConnectWithoutStaffMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffMemberInput | AppointmentUpsertWithWhereUniqueWithoutStaffMemberInput[]
    createMany?: AppointmentCreateManyStaffMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffMemberInput | AppointmentUpdateWithWhereUniqueWithoutStaffMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffMemberInput | AppointmentUpdateManyWithWhereWithoutStaffMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput> | DocumentCreateWithoutCreatedByInput[] | DocumentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutCreatedByInput | DocumentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutCreatedByInput | DocumentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DocumentCreateManyCreatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutCreatedByInput | DocumentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutCreatedByInput | DocumentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput> | DocumentCreateWithoutUpdatedByInput[] | DocumentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutUpdatedByInput | DocumentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutUpdatedByInput | DocumentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DocumentCreateManyUpdatedByInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutUpdatedByInput | DocumentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutUpdatedByInput | DocumentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCreatedByInput | NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCreatedByInput | NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCreatedByInput | NoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUpdatedByInput | NoteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUpdatedByInput | NoteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUpdatedByInput | NoteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput> | AppointmentCreateWithoutStaffMemberInput[] | AppointmentUncheckedCreateWithoutStaffMemberInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffMemberInput | AppointmentCreateOrConnectWithoutStaffMemberInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffMemberInput | AppointmentUpsertWithWhereUniqueWithoutStaffMemberInput[]
    createMany?: AppointmentCreateManyStaffMemberInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffMemberInput | AppointmentUpdateWithWhereUniqueWithoutStaffMemberInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffMemberInput | AppointmentUpdateManyWithWhereWithoutStaffMemberInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPatientDetailsInput = {
    create?: XOR<UserCreateWithoutPatientDetailsInput, UserUncheckedCreateWithoutPatientDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientDetailsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutPatientsInput = {
    create?: XOR<TenantCreateWithoutPatientsInput, TenantUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPatientsInput
    connect?: TenantWhereUniqueInput
  }

  export type NoteCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput> | NoteCreateWithoutPatientDetailsInput[] | NoteUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientDetailsInput | NoteCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: NoteCreateManyPatientDetailsInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput> | AppointmentCreateWithoutPatientDetailsInput[] | AppointmentUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientDetailsInput | AppointmentCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: AppointmentCreateManyPatientDetailsInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AccountingEntryCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput> | AccountingEntryCreateWithoutPatientDetailsInput[] | AccountingEntryUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AccountingEntryCreateOrConnectWithoutPatientDetailsInput | AccountingEntryCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: AccountingEntryCreateManyPatientDetailsInputEnvelope
    connect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
  }

  export type QuotationCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput> | QuotationCreateWithoutPatientDetailsInput[] | QuotationUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutPatientDetailsInput | QuotationCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: QuotationCreateManyPatientDetailsInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput> | NoteCreateWithoutPatientDetailsInput[] | NoteUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientDetailsInput | NoteCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: NoteCreateManyPatientDetailsInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput> | AppointmentCreateWithoutPatientDetailsInput[] | AppointmentUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientDetailsInput | AppointmentCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: AppointmentCreateManyPatientDetailsInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput> | AccountingEntryCreateWithoutPatientDetailsInput[] | AccountingEntryUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AccountingEntryCreateOrConnectWithoutPatientDetailsInput | AccountingEntryCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: AccountingEntryCreateManyPatientDetailsInputEnvelope
    connect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
  }

  export type QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput = {
    create?: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput> | QuotationCreateWithoutPatientDetailsInput[] | QuotationUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutPatientDetailsInput | QuotationCreateOrConnectWithoutPatientDetailsInput[]
    createMany?: QuotationCreateManyPatientDetailsInputEnvelope
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPatientDetailsNestedInput = {
    create?: XOR<UserCreateWithoutPatientDetailsInput, UserUncheckedCreateWithoutPatientDetailsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientDetailsInput
    upsert?: UserUpsertWithoutPatientDetailsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientDetailsInput, UserUpdateWithoutPatientDetailsInput>, UserUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type TenantUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<TenantCreateWithoutPatientsInput, TenantUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPatientsInput
    upsert?: TenantUpsertWithoutPatientsInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPatientsInput, TenantUpdateWithoutPatientsInput>, TenantUncheckedUpdateWithoutPatientsInput>
  }

  export type NoteUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput> | NoteCreateWithoutPatientDetailsInput[] | NoteUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientDetailsInput | NoteCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientDetailsInput | NoteUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: NoteCreateManyPatientDetailsInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientDetailsInput | NoteUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientDetailsInput | NoteUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput> | AppointmentCreateWithoutPatientDetailsInput[] | AppointmentUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientDetailsInput | AppointmentCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientDetailsInput | AppointmentUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: AppointmentCreateManyPatientDetailsInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientDetailsInput | AppointmentUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientDetailsInput | AppointmentUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AccountingEntryUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput> | AccountingEntryCreateWithoutPatientDetailsInput[] | AccountingEntryUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AccountingEntryCreateOrConnectWithoutPatientDetailsInput | AccountingEntryCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: AccountingEntryUpsertWithWhereUniqueWithoutPatientDetailsInput | AccountingEntryUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: AccountingEntryCreateManyPatientDetailsInputEnvelope
    set?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    disconnect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    delete?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    connect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    update?: AccountingEntryUpdateWithWhereUniqueWithoutPatientDetailsInput | AccountingEntryUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: AccountingEntryUpdateManyWithWhereWithoutPatientDetailsInput | AccountingEntryUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: AccountingEntryScalarWhereInput | AccountingEntryScalarWhereInput[]
  }

  export type QuotationUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput> | QuotationCreateWithoutPatientDetailsInput[] | QuotationUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutPatientDetailsInput | QuotationCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutPatientDetailsInput | QuotationUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: QuotationCreateManyPatientDetailsInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutPatientDetailsInput | QuotationUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutPatientDetailsInput | QuotationUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput> | NoteCreateWithoutPatientDetailsInput[] | NoteUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutPatientDetailsInput | NoteCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutPatientDetailsInput | NoteUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: NoteCreateManyPatientDetailsInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutPatientDetailsInput | NoteUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutPatientDetailsInput | NoteUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput> | AppointmentCreateWithoutPatientDetailsInput[] | AppointmentUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientDetailsInput | AppointmentCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientDetailsInput | AppointmentUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: AppointmentCreateManyPatientDetailsInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientDetailsInput | AppointmentUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientDetailsInput | AppointmentUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput> | AccountingEntryCreateWithoutPatientDetailsInput[] | AccountingEntryUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: AccountingEntryCreateOrConnectWithoutPatientDetailsInput | AccountingEntryCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: AccountingEntryUpsertWithWhereUniqueWithoutPatientDetailsInput | AccountingEntryUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: AccountingEntryCreateManyPatientDetailsInputEnvelope
    set?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    disconnect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    delete?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    connect?: AccountingEntryWhereUniqueInput | AccountingEntryWhereUniqueInput[]
    update?: AccountingEntryUpdateWithWhereUniqueWithoutPatientDetailsInput | AccountingEntryUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: AccountingEntryUpdateManyWithWhereWithoutPatientDetailsInput | AccountingEntryUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: AccountingEntryScalarWhereInput | AccountingEntryScalarWhereInput[]
  }

  export type QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput = {
    create?: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput> | QuotationCreateWithoutPatientDetailsInput[] | QuotationUncheckedCreateWithoutPatientDetailsInput[]
    connectOrCreate?: QuotationCreateOrConnectWithoutPatientDetailsInput | QuotationCreateOrConnectWithoutPatientDetailsInput[]
    upsert?: QuotationUpsertWithWhereUniqueWithoutPatientDetailsInput | QuotationUpsertWithWhereUniqueWithoutPatientDetailsInput[]
    createMany?: QuotationCreateManyPatientDetailsInputEnvelope
    set?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    disconnect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    delete?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    connect?: QuotationWhereUniqueInput | QuotationWhereUniqueInput[]
    update?: QuotationUpdateWithWhereUniqueWithoutPatientDetailsInput | QuotationUpdateWithWhereUniqueWithoutPatientDetailsInput[]
    updateMany?: QuotationUpdateManyWithWhereWithoutPatientDetailsInput | QuotationUpdateManyWithWhereWithoutPatientDetailsInput[]
    deleteMany?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
  }

  export type PatientDetailsCreateNestedOneWithoutAccountingEntryInput = {
    create?: XOR<PatientDetailsCreateWithoutAccountingEntryInput, PatientDetailsUncheckedCreateWithoutAccountingEntryInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutAccountingEntryInput
    connect?: PatientDetailsWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumCurrencyFieldUpdateOperationsInput = {
    set?: $Enums.Currency
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumAccountingEntryTypeFieldUpdateOperationsInput = {
    set?: $Enums.AccountingEntryType
  }

  export type PatientDetailsUpdateOneRequiredWithoutAccountingEntryNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutAccountingEntryInput, PatientDetailsUncheckedCreateWithoutAccountingEntryInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutAccountingEntryInput
    upsert?: PatientDetailsUpsertWithoutAccountingEntryInput
    connect?: PatientDetailsWhereUniqueInput
    update?: XOR<XOR<PatientDetailsUpdateToOneWithWhereWithoutAccountingEntryInput, PatientDetailsUpdateWithoutAccountingEntryInput>, PatientDetailsUncheckedUpdateWithoutAccountingEntryInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAuthenticatorInput = {
    create?: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAuthenticatorNestedInput = {
    create?: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuthenticatorInput
    upsert?: UserUpsertWithoutAuthenticatorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuthenticatorInput, UserUpdateWithoutAuthenticatorInput>, UserUncheckedUpdateWithoutAuthenticatorInput>
  }

  export type UserCreateNestedOneWithoutAddressInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedOneWithoutBillingAddressInput = {
    create?: XOR<TenantCreateWithoutBillingAddressInput, TenantUncheckedCreateWithoutBillingAddressInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBillingAddressInput
    connect?: TenantWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressInput
    upsert?: UserUpsertWithoutAddressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddressInput, UserUpdateWithoutAddressInput>, UserUncheckedUpdateWithoutAddressInput>
  }

  export type TenantUpdateOneWithoutBillingAddressNestedInput = {
    create?: XOR<TenantCreateWithoutBillingAddressInput, TenantUncheckedCreateWithoutBillingAddressInput>
    connectOrCreate?: TenantCreateOrConnectWithoutBillingAddressInput
    upsert?: TenantUpsertWithoutBillingAddressInput
    disconnect?: TenantWhereInput | boolean
    delete?: TenantWhereInput | boolean
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutBillingAddressInput, TenantUpdateWithoutBillingAddressInput>, TenantUncheckedUpdateWithoutBillingAddressInput>
  }

  export type StaffMemberCreateNestedOneWithoutCreatedNotesInput = {
    create?: XOR<StaffMemberCreateWithoutCreatedNotesInput, StaffMemberUncheckedCreateWithoutCreatedNotesInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutCreatedNotesInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type StaffMemberCreateNestedOneWithoutUpdatedNotesInput = {
    create?: XOR<StaffMemberCreateWithoutUpdatedNotesInput, StaffMemberUncheckedCreateWithoutUpdatedNotesInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUpdatedNotesInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type PatientDetailsCreateNestedOneWithoutNotesInput = {
    create?: XOR<PatientDetailsCreateWithoutNotesInput, PatientDetailsUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutNotesInput
    connect?: PatientDetailsWhereUniqueInput
  }

  export type DocumentCreateNestedManyWithoutNoteInput = {
    create?: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput> | DocumentCreateWithoutNoteInput[] | DocumentUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutNoteInput | DocumentCreateOrConnectWithoutNoteInput[]
    createMany?: DocumentCreateManyNoteInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutReportNoteInput = {
    create?: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput> | AppointmentCreateWithoutReportNoteInput[] | AppointmentUncheckedCreateWithoutReportNoteInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReportNoteInput | AppointmentCreateOrConnectWithoutReportNoteInput[]
    createMany?: AppointmentCreateManyReportNoteInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput> | DocumentCreateWithoutNoteInput[] | DocumentUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutNoteInput | DocumentCreateOrConnectWithoutNoteInput[]
    createMany?: DocumentCreateManyNoteInputEnvelope
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutReportNoteInput = {
    create?: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput> | AppointmentCreateWithoutReportNoteInput[] | AppointmentUncheckedCreateWithoutReportNoteInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReportNoteInput | AppointmentCreateOrConnectWithoutReportNoteInput[]
    createMany?: AppointmentCreateManyReportNoteInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput = {
    create?: XOR<StaffMemberCreateWithoutCreatedNotesInput, StaffMemberUncheckedCreateWithoutCreatedNotesInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutCreatedNotesInput
    upsert?: StaffMemberUpsertWithoutCreatedNotesInput
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutCreatedNotesInput, StaffMemberUpdateWithoutCreatedNotesInput>, StaffMemberUncheckedUpdateWithoutCreatedNotesInput>
  }

  export type StaffMemberUpdateOneWithoutUpdatedNotesNestedInput = {
    create?: XOR<StaffMemberCreateWithoutUpdatedNotesInput, StaffMemberUncheckedCreateWithoutUpdatedNotesInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUpdatedNotesInput
    upsert?: StaffMemberUpsertWithoutUpdatedNotesInput
    disconnect?: StaffMemberWhereInput | boolean
    delete?: StaffMemberWhereInput | boolean
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutUpdatedNotesInput, StaffMemberUpdateWithoutUpdatedNotesInput>, StaffMemberUncheckedUpdateWithoutUpdatedNotesInput>
  }

  export type PatientDetailsUpdateOneRequiredWithoutNotesNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutNotesInput, PatientDetailsUncheckedCreateWithoutNotesInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutNotesInput
    upsert?: PatientDetailsUpsertWithoutNotesInput
    connect?: PatientDetailsWhereUniqueInput
    update?: XOR<XOR<PatientDetailsUpdateToOneWithWhereWithoutNotesInput, PatientDetailsUpdateWithoutNotesInput>, PatientDetailsUncheckedUpdateWithoutNotesInput>
  }

  export type DocumentUpdateManyWithoutNoteNestedInput = {
    create?: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput> | DocumentCreateWithoutNoteInput[] | DocumentUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutNoteInput | DocumentCreateOrConnectWithoutNoteInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutNoteInput | DocumentUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: DocumentCreateManyNoteInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutNoteInput | DocumentUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutNoteInput | DocumentUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutReportNoteNestedInput = {
    create?: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput> | AppointmentCreateWithoutReportNoteInput[] | AppointmentUncheckedCreateWithoutReportNoteInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReportNoteInput | AppointmentCreateOrConnectWithoutReportNoteInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutReportNoteInput | AppointmentUpsertWithWhereUniqueWithoutReportNoteInput[]
    createMany?: AppointmentCreateManyReportNoteInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutReportNoteInput | AppointmentUpdateWithWhereUniqueWithoutReportNoteInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutReportNoteInput | AppointmentUpdateManyWithWhereWithoutReportNoteInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput> | DocumentCreateWithoutNoteInput[] | DocumentUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: DocumentCreateOrConnectWithoutNoteInput | DocumentCreateOrConnectWithoutNoteInput[]
    upsert?: DocumentUpsertWithWhereUniqueWithoutNoteInput | DocumentUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: DocumentCreateManyNoteInputEnvelope
    set?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    disconnect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    delete?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    connect?: DocumentWhereUniqueInput | DocumentWhereUniqueInput[]
    update?: DocumentUpdateWithWhereUniqueWithoutNoteInput | DocumentUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: DocumentUpdateManyWithWhereWithoutNoteInput | DocumentUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput = {
    create?: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput> | AppointmentCreateWithoutReportNoteInput[] | AppointmentUncheckedCreateWithoutReportNoteInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutReportNoteInput | AppointmentCreateOrConnectWithoutReportNoteInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutReportNoteInput | AppointmentUpsertWithWhereUniqueWithoutReportNoteInput[]
    createMany?: AppointmentCreateManyReportNoteInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutReportNoteInput | AppointmentUpdateWithWhereUniqueWithoutReportNoteInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutReportNoteInput | AppointmentUpdateManyWithWhereWithoutReportNoteInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DocumentCreatevisibleToInput = {
    set: $Enums.Role[]
  }

  export type StaffMemberCreateNestedOneWithoutCreatedDocumentsInput = {
    create?: XOR<StaffMemberCreateWithoutCreatedDocumentsInput, StaffMemberUncheckedCreateWithoutCreatedDocumentsInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutCreatedDocumentsInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type StaffMemberCreateNestedOneWithoutUpdatedDocumentsInput = {
    create?: XOR<StaffMemberCreateWithoutUpdatedDocumentsInput, StaffMemberUncheckedCreateWithoutUpdatedDocumentsInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUpdatedDocumentsInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type NoteCreateNestedOneWithoutFilesInput = {
    create?: XOR<NoteCreateWithoutFilesInput, NoteUncheckedCreateWithoutFilesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutFilesInput
    connect?: NoteWhereUniqueInput
  }

  export type QuotationCreateNestedOneWithoutDocumentInput = {
    create?: XOR<QuotationCreateWithoutDocumentInput, QuotationUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutDocumentInput
    connect?: QuotationWhereUniqueInput
  }

  export type DocumentUpdatevisibleToInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type StaffMemberUpdateOneRequiredWithoutCreatedDocumentsNestedInput = {
    create?: XOR<StaffMemberCreateWithoutCreatedDocumentsInput, StaffMemberUncheckedCreateWithoutCreatedDocumentsInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutCreatedDocumentsInput
    upsert?: StaffMemberUpsertWithoutCreatedDocumentsInput
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutCreatedDocumentsInput, StaffMemberUpdateWithoutCreatedDocumentsInput>, StaffMemberUncheckedUpdateWithoutCreatedDocumentsInput>
  }

  export type StaffMemberUpdateOneWithoutUpdatedDocumentsNestedInput = {
    create?: XOR<StaffMemberCreateWithoutUpdatedDocumentsInput, StaffMemberUncheckedCreateWithoutUpdatedDocumentsInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutUpdatedDocumentsInput
    upsert?: StaffMemberUpsertWithoutUpdatedDocumentsInput
    disconnect?: StaffMemberWhereInput | boolean
    delete?: StaffMemberWhereInput | boolean
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutUpdatedDocumentsInput, StaffMemberUpdateWithoutUpdatedDocumentsInput>, StaffMemberUncheckedUpdateWithoutUpdatedDocumentsInput>
  }

  export type NoteUpdateOneWithoutFilesNestedInput = {
    create?: XOR<NoteCreateWithoutFilesInput, NoteUncheckedCreateWithoutFilesInput>
    connectOrCreate?: NoteCreateOrConnectWithoutFilesInput
    upsert?: NoteUpsertWithoutFilesInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutFilesInput, NoteUpdateWithoutFilesInput>, NoteUncheckedUpdateWithoutFilesInput>
  }

  export type QuotationUpdateOneWithoutDocumentNestedInput = {
    create?: XOR<QuotationCreateWithoutDocumentInput, QuotationUncheckedCreateWithoutDocumentInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutDocumentInput
    upsert?: QuotationUpsertWithoutDocumentInput
    disconnect?: QuotationWhereInput | boolean
    delete?: QuotationWhereInput | boolean
    connect?: QuotationWhereUniqueInput
    update?: XOR<XOR<QuotationUpdateToOneWithWhereWithoutDocumentInput, QuotationUpdateWithoutDocumentInput>, QuotationUncheckedUpdateWithoutDocumentInput>
  }

  export type PatientDetailsCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<PatientDetailsCreateWithoutAppointmentInput, PatientDetailsUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutAppointmentInput
    connect?: PatientDetailsWhereUniqueInput
  }

  export type StaffMemberCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<StaffMemberCreateWithoutAppointmentInput, StaffMemberUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutAppointmentInput
    connect?: StaffMemberWhereUniqueInput
  }

  export type NoteCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<NoteCreateWithoutAppointmentInput, NoteUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: NoteCreateOrConnectWithoutAppointmentInput
    connect?: NoteWhereUniqueInput
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type PatientDetailsUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutAppointmentInput, PatientDetailsUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutAppointmentInput
    upsert?: PatientDetailsUpsertWithoutAppointmentInput
    connect?: PatientDetailsWhereUniqueInput
    update?: XOR<XOR<PatientDetailsUpdateToOneWithWhereWithoutAppointmentInput, PatientDetailsUpdateWithoutAppointmentInput>, PatientDetailsUncheckedUpdateWithoutAppointmentInput>
  }

  export type StaffMemberUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<StaffMemberCreateWithoutAppointmentInput, StaffMemberUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: StaffMemberCreateOrConnectWithoutAppointmentInput
    upsert?: StaffMemberUpsertWithoutAppointmentInput
    connect?: StaffMemberWhereUniqueInput
    update?: XOR<XOR<StaffMemberUpdateToOneWithWhereWithoutAppointmentInput, StaffMemberUpdateWithoutAppointmentInput>, StaffMemberUncheckedUpdateWithoutAppointmentInput>
  }

  export type NoteUpdateOneWithoutAppointmentNestedInput = {
    create?: XOR<NoteCreateWithoutAppointmentInput, NoteUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: NoteCreateOrConnectWithoutAppointmentInput
    upsert?: NoteUpsertWithoutAppointmentInput
    disconnect?: NoteWhereInput | boolean
    delete?: NoteWhereInput | boolean
    connect?: NoteWhereUniqueInput
    update?: XOR<XOR<NoteUpdateToOneWithWhereWithoutAppointmentInput, NoteUpdateWithoutAppointmentInput>, NoteUncheckedUpdateWithoutAppointmentInput>
  }

  export type TenantCreateNestedOneWithoutFeatureFlagInput = {
    create?: XOR<TenantCreateWithoutFeatureFlagInput, TenantUncheckedCreateWithoutFeatureFlagInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeatureFlagInput
    connect?: TenantWhereUniqueInput
  }

  export type EnumFeatureFlagKeyFieldUpdateOperationsInput = {
    set?: $Enums.FeatureFlagKey
  }

  export type TenantUpdateOneRequiredWithoutFeatureFlagNestedInput = {
    create?: XOR<TenantCreateWithoutFeatureFlagInput, TenantUncheckedCreateWithoutFeatureFlagInput>
    connectOrCreate?: TenantCreateOrConnectWithoutFeatureFlagInput
    upsert?: TenantUpsertWithoutFeatureFlagInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutFeatureFlagInput, TenantUpdateWithoutFeatureFlagInput>, TenantUncheckedUpdateWithoutFeatureFlagInput>
  }

  export type TenantCreateNestedOneWithoutPredefinedActTypesInput = {
    create?: XOR<TenantCreateWithoutPredefinedActTypesInput, TenantUncheckedCreateWithoutPredefinedActTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPredefinedActTypesInput
    connect?: TenantWhereUniqueInput
  }

  export type PredefinedActSubTypesCreateNestedManyWithoutPredefinedActTypeInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput> | PredefinedActSubTypesCreateWithoutPredefinedActTypeInput[] | PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput[]
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput | PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput[]
    createMany?: PredefinedActSubTypesCreateManyPredefinedActTypeInputEnvelope
    connect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
  }

  export type QuotationLineCreateNestedManyWithoutActTypeInput = {
    create?: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput> | QuotationLineCreateWithoutActTypeInput[] | QuotationLineUncheckedCreateWithoutActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutActTypeInput | QuotationLineCreateOrConnectWithoutActTypeInput[]
    createMany?: QuotationLineCreateManyActTypeInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type PredefinedActSubTypesUncheckedCreateNestedManyWithoutPredefinedActTypeInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput> | PredefinedActSubTypesCreateWithoutPredefinedActTypeInput[] | PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput[]
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput | PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput[]
    createMany?: PredefinedActSubTypesCreateManyPredefinedActTypeInputEnvelope
    connect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
  }

  export type QuotationLineUncheckedCreateNestedManyWithoutActTypeInput = {
    create?: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput> | QuotationLineCreateWithoutActTypeInput[] | QuotationLineUncheckedCreateWithoutActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutActTypeInput | QuotationLineCreateOrConnectWithoutActTypeInput[]
    createMany?: QuotationLineCreateManyActTypeInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type TenantUpdateOneRequiredWithoutPredefinedActTypesNestedInput = {
    create?: XOR<TenantCreateWithoutPredefinedActTypesInput, TenantUncheckedCreateWithoutPredefinedActTypesInput>
    connectOrCreate?: TenantCreateOrConnectWithoutPredefinedActTypesInput
    upsert?: TenantUpsertWithoutPredefinedActTypesInput
    connect?: TenantWhereUniqueInput
    update?: XOR<XOR<TenantUpdateToOneWithWhereWithoutPredefinedActTypesInput, TenantUpdateWithoutPredefinedActTypesInput>, TenantUncheckedUpdateWithoutPredefinedActTypesInput>
  }

  export type PredefinedActSubTypesUpdateManyWithoutPredefinedActTypeNestedInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput> | PredefinedActSubTypesCreateWithoutPredefinedActTypeInput[] | PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput[]
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput | PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput[]
    upsert?: PredefinedActSubTypesUpsertWithWhereUniqueWithoutPredefinedActTypeInput | PredefinedActSubTypesUpsertWithWhereUniqueWithoutPredefinedActTypeInput[]
    createMany?: PredefinedActSubTypesCreateManyPredefinedActTypeInputEnvelope
    set?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    disconnect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    delete?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    connect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    update?: PredefinedActSubTypesUpdateWithWhereUniqueWithoutPredefinedActTypeInput | PredefinedActSubTypesUpdateWithWhereUniqueWithoutPredefinedActTypeInput[]
    updateMany?: PredefinedActSubTypesUpdateManyWithWhereWithoutPredefinedActTypeInput | PredefinedActSubTypesUpdateManyWithWhereWithoutPredefinedActTypeInput[]
    deleteMany?: PredefinedActSubTypesScalarWhereInput | PredefinedActSubTypesScalarWhereInput[]
  }

  export type QuotationLineUpdateManyWithoutActTypeNestedInput = {
    create?: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput> | QuotationLineCreateWithoutActTypeInput[] | QuotationLineUncheckedCreateWithoutActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutActTypeInput | QuotationLineCreateOrConnectWithoutActTypeInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutActTypeInput | QuotationLineUpsertWithWhereUniqueWithoutActTypeInput[]
    createMany?: QuotationLineCreateManyActTypeInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutActTypeInput | QuotationLineUpdateWithWhereUniqueWithoutActTypeInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutActTypeInput | QuotationLineUpdateManyWithWhereWithoutActTypeInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeNestedInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput> | PredefinedActSubTypesCreateWithoutPredefinedActTypeInput[] | PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput[]
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput | PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput[]
    upsert?: PredefinedActSubTypesUpsertWithWhereUniqueWithoutPredefinedActTypeInput | PredefinedActSubTypesUpsertWithWhereUniqueWithoutPredefinedActTypeInput[]
    createMany?: PredefinedActSubTypesCreateManyPredefinedActTypeInputEnvelope
    set?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    disconnect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    delete?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    connect?: PredefinedActSubTypesWhereUniqueInput | PredefinedActSubTypesWhereUniqueInput[]
    update?: PredefinedActSubTypesUpdateWithWhereUniqueWithoutPredefinedActTypeInput | PredefinedActSubTypesUpdateWithWhereUniqueWithoutPredefinedActTypeInput[]
    updateMany?: PredefinedActSubTypesUpdateManyWithWhereWithoutPredefinedActTypeInput | PredefinedActSubTypesUpdateManyWithWhereWithoutPredefinedActTypeInput[]
    deleteMany?: PredefinedActSubTypesScalarWhereInput | PredefinedActSubTypesScalarWhereInput[]
  }

  export type QuotationLineUncheckedUpdateManyWithoutActTypeNestedInput = {
    create?: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput> | QuotationLineCreateWithoutActTypeInput[] | QuotationLineUncheckedCreateWithoutActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutActTypeInput | QuotationLineCreateOrConnectWithoutActTypeInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutActTypeInput | QuotationLineUpsertWithWhereUniqueWithoutActTypeInput[]
    createMany?: QuotationLineCreateManyActTypeInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutActTypeInput | QuotationLineUpdateWithWhereUniqueWithoutActTypeInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutActTypeInput | QuotationLineUpdateManyWithWhereWithoutActTypeInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type PredefinedActTypeCreateNestedOneWithoutPredefinedActSubTypesInput = {
    create?: XOR<PredefinedActTypeCreateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedCreateWithoutPredefinedActSubTypesInput>
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutPredefinedActSubTypesInput
    connect?: PredefinedActTypeWhereUniqueInput
  }

  export type QuotationLineCreateNestedManyWithoutSubActTypeInput = {
    create?: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput> | QuotationLineCreateWithoutSubActTypeInput[] | QuotationLineUncheckedCreateWithoutSubActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutSubActTypeInput | QuotationLineCreateOrConnectWithoutSubActTypeInput[]
    createMany?: QuotationLineCreateManySubActTypeInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type QuotationLineUncheckedCreateNestedManyWithoutSubActTypeInput = {
    create?: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput> | QuotationLineCreateWithoutSubActTypeInput[] | QuotationLineUncheckedCreateWithoutSubActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutSubActTypeInput | QuotationLineCreateOrConnectWithoutSubActTypeInput[]
    createMany?: QuotationLineCreateManySubActTypeInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type PredefinedActTypeUpdateOneRequiredWithoutPredefinedActSubTypesNestedInput = {
    create?: XOR<PredefinedActTypeCreateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedCreateWithoutPredefinedActSubTypesInput>
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutPredefinedActSubTypesInput
    upsert?: PredefinedActTypeUpsertWithoutPredefinedActSubTypesInput
    connect?: PredefinedActTypeWhereUniqueInput
    update?: XOR<XOR<PredefinedActTypeUpdateToOneWithWhereWithoutPredefinedActSubTypesInput, PredefinedActTypeUpdateWithoutPredefinedActSubTypesInput>, PredefinedActTypeUncheckedUpdateWithoutPredefinedActSubTypesInput>
  }

  export type QuotationLineUpdateManyWithoutSubActTypeNestedInput = {
    create?: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput> | QuotationLineCreateWithoutSubActTypeInput[] | QuotationLineUncheckedCreateWithoutSubActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutSubActTypeInput | QuotationLineCreateOrConnectWithoutSubActTypeInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutSubActTypeInput | QuotationLineUpsertWithWhereUniqueWithoutSubActTypeInput[]
    createMany?: QuotationLineCreateManySubActTypeInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutSubActTypeInput | QuotationLineUpdateWithWhereUniqueWithoutSubActTypeInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutSubActTypeInput | QuotationLineUpdateManyWithWhereWithoutSubActTypeInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type QuotationLineUncheckedUpdateManyWithoutSubActTypeNestedInput = {
    create?: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput> | QuotationLineCreateWithoutSubActTypeInput[] | QuotationLineUncheckedCreateWithoutSubActTypeInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutSubActTypeInput | QuotationLineCreateOrConnectWithoutSubActTypeInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutSubActTypeInput | QuotationLineUpsertWithWhereUniqueWithoutSubActTypeInput[]
    createMany?: QuotationLineCreateManySubActTypeInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutSubActTypeInput | QuotationLineUpdateWithWhereUniqueWithoutSubActTypeInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutSubActTypeInput | QuotationLineUpdateManyWithWhereWithoutSubActTypeInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type PatientDetailsCreateNestedOneWithoutQuotationInput = {
    create?: XOR<PatientDetailsCreateWithoutQuotationInput, PatientDetailsUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutQuotationInput
    connect?: PatientDetailsWhereUniqueInput
  }

  export type QuotationLineCreateNestedManyWithoutQuotationInput = {
    create?: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput> | QuotationLineCreateWithoutQuotationInput[] | QuotationLineUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutQuotationInput | QuotationLineCreateOrConnectWithoutQuotationInput[]
    createMany?: QuotationLineCreateManyQuotationInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type DocumentCreateNestedOneWithoutQuotationInput = {
    create?: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutQuotationInput
    connect?: DocumentWhereUniqueInput
  }

  export type QuotationLineUncheckedCreateNestedManyWithoutQuotationInput = {
    create?: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput> | QuotationLineCreateWithoutQuotationInput[] | QuotationLineUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutQuotationInput | QuotationLineCreateOrConnectWithoutQuotationInput[]
    createMany?: QuotationLineCreateManyQuotationInputEnvelope
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
  }

  export type DocumentUncheckedCreateNestedOneWithoutQuotationInput = {
    create?: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutQuotationInput
    connect?: DocumentWhereUniqueInput
  }

  export type EnumQuotationStatusFieldUpdateOperationsInput = {
    set?: $Enums.QuotationStatus
  }

  export type PatientDetailsUpdateOneRequiredWithoutQuotationNestedInput = {
    create?: XOR<PatientDetailsCreateWithoutQuotationInput, PatientDetailsUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: PatientDetailsCreateOrConnectWithoutQuotationInput
    upsert?: PatientDetailsUpsertWithoutQuotationInput
    connect?: PatientDetailsWhereUniqueInput
    update?: XOR<XOR<PatientDetailsUpdateToOneWithWhereWithoutQuotationInput, PatientDetailsUpdateWithoutQuotationInput>, PatientDetailsUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationLineUpdateManyWithoutQuotationNestedInput = {
    create?: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput> | QuotationLineCreateWithoutQuotationInput[] | QuotationLineUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutQuotationInput | QuotationLineCreateOrConnectWithoutQuotationInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutQuotationInput | QuotationLineUpsertWithWhereUniqueWithoutQuotationInput[]
    createMany?: QuotationLineCreateManyQuotationInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutQuotationInput | QuotationLineUpdateWithWhereUniqueWithoutQuotationInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutQuotationInput | QuotationLineUpdateManyWithWhereWithoutQuotationInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type DocumentUpdateOneWithoutQuotationNestedInput = {
    create?: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutQuotationInput
    upsert?: DocumentUpsertWithoutQuotationInput
    disconnect?: DocumentWhereInput | boolean
    delete?: DocumentWhereInput | boolean
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutQuotationInput, DocumentUpdateWithoutQuotationInput>, DocumentUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationLineUncheckedUpdateManyWithoutQuotationNestedInput = {
    create?: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput> | QuotationLineCreateWithoutQuotationInput[] | QuotationLineUncheckedCreateWithoutQuotationInput[]
    connectOrCreate?: QuotationLineCreateOrConnectWithoutQuotationInput | QuotationLineCreateOrConnectWithoutQuotationInput[]
    upsert?: QuotationLineUpsertWithWhereUniqueWithoutQuotationInput | QuotationLineUpsertWithWhereUniqueWithoutQuotationInput[]
    createMany?: QuotationLineCreateManyQuotationInputEnvelope
    set?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    disconnect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    delete?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    connect?: QuotationLineWhereUniqueInput | QuotationLineWhereUniqueInput[]
    update?: QuotationLineUpdateWithWhereUniqueWithoutQuotationInput | QuotationLineUpdateWithWhereUniqueWithoutQuotationInput[]
    updateMany?: QuotationLineUpdateManyWithWhereWithoutQuotationInput | QuotationLineUpdateManyWithWhereWithoutQuotationInput[]
    deleteMany?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
  }

  export type DocumentUncheckedUpdateOneWithoutQuotationNestedInput = {
    create?: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
    connectOrCreate?: DocumentCreateOrConnectWithoutQuotationInput
    upsert?: DocumentUpsertWithoutQuotationInput
    disconnect?: DocumentWhereInput | boolean
    delete?: DocumentWhereInput | boolean
    connect?: DocumentWhereUniqueInput
    update?: XOR<XOR<DocumentUpdateToOneWithWhereWithoutQuotationInput, DocumentUpdateWithoutQuotationInput>, DocumentUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationCreateNestedOneWithoutQuotationLinesInput = {
    create?: XOR<QuotationCreateWithoutQuotationLinesInput, QuotationUncheckedCreateWithoutQuotationLinesInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutQuotationLinesInput
    connect?: QuotationWhereUniqueInput
  }

  export type PredefinedActTypeCreateNestedOneWithoutQuotationLineInput = {
    create?: XOR<PredefinedActTypeCreateWithoutQuotationLineInput, PredefinedActTypeUncheckedCreateWithoutQuotationLineInput>
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutQuotationLineInput
    connect?: PredefinedActTypeWhereUniqueInput
  }

  export type PredefinedActSubTypesCreateNestedOneWithoutQuotationLineInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedCreateWithoutQuotationLineInput>
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutQuotationLineInput
    connect?: PredefinedActSubTypesWhereUniqueInput
  }

  export type QuotationUpdateOneRequiredWithoutQuotationLinesNestedInput = {
    create?: XOR<QuotationCreateWithoutQuotationLinesInput, QuotationUncheckedCreateWithoutQuotationLinesInput>
    connectOrCreate?: QuotationCreateOrConnectWithoutQuotationLinesInput
    upsert?: QuotationUpsertWithoutQuotationLinesInput
    connect?: QuotationWhereUniqueInput
    update?: XOR<XOR<QuotationUpdateToOneWithWhereWithoutQuotationLinesInput, QuotationUpdateWithoutQuotationLinesInput>, QuotationUncheckedUpdateWithoutQuotationLinesInput>
  }

  export type PredefinedActTypeUpdateOneRequiredWithoutQuotationLineNestedInput = {
    create?: XOR<PredefinedActTypeCreateWithoutQuotationLineInput, PredefinedActTypeUncheckedCreateWithoutQuotationLineInput>
    connectOrCreate?: PredefinedActTypeCreateOrConnectWithoutQuotationLineInput
    upsert?: PredefinedActTypeUpsertWithoutQuotationLineInput
    connect?: PredefinedActTypeWhereUniqueInput
    update?: XOR<XOR<PredefinedActTypeUpdateToOneWithWhereWithoutQuotationLineInput, PredefinedActTypeUpdateWithoutQuotationLineInput>, PredefinedActTypeUncheckedUpdateWithoutQuotationLineInput>
  }

  export type PredefinedActSubTypesUpdateOneWithoutQuotationLineNestedInput = {
    create?: XOR<PredefinedActSubTypesCreateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedCreateWithoutQuotationLineInput>
    connectOrCreate?: PredefinedActSubTypesCreateOrConnectWithoutQuotationLineInput
    upsert?: PredefinedActSubTypesUpsertWithoutQuotationLineInput
    disconnect?: PredefinedActSubTypesWhereInput | boolean
    delete?: PredefinedActSubTypesWhereInput | boolean
    connect?: PredefinedActSubTypesWhereUniqueInput
    update?: XOR<XOR<PredefinedActSubTypesUpdateToOneWithWhereWithoutQuotationLineInput, PredefinedActSubTypesUpdateWithoutQuotationLineInput>, PredefinedActSubTypesUncheckedUpdateWithoutQuotationLineInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumAccountingEntryTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountingEntryType | EnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountingEntryTypeFilter<$PrismaModel> | $Enums.AccountingEntryType
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumAccountingEntryTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AccountingEntryType | EnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AccountingEntryType[] | ListEnumAccountingEntryTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAccountingEntryTypeWithAggregatesFilter<$PrismaModel> | $Enums.AccountingEntryType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAccountingEntryTypeFilter<$PrismaModel>
    _max?: NestedEnumAccountingEntryTypeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumFeatureFlagKeyFilter<$PrismaModel = never> = {
    equals?: $Enums.FeatureFlagKey | EnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    in?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumFeatureFlagKeyFilter<$PrismaModel> | $Enums.FeatureFlagKey
  }

  export type NestedEnumFeatureFlagKeyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FeatureFlagKey | EnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    in?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    notIn?: $Enums.FeatureFlagKey[] | ListEnumFeatureFlagKeyFieldRefInput<$PrismaModel>
    not?: NestedEnumFeatureFlagKeyWithAggregatesFilter<$PrismaModel> | $Enums.FeatureFlagKey
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFeatureFlagKeyFilter<$PrismaModel>
    _max?: NestedEnumFeatureFlagKeyFilter<$PrismaModel>
  }

  export type NestedEnumQuotationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QuotationStatus | EnumQuotationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuotationStatusFilter<$PrismaModel> | $Enums.QuotationStatus
  }

  export type NestedEnumQuotationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuotationStatus | EnumQuotationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuotationStatus[] | ListEnumQuotationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQuotationStatusWithAggregatesFilter<$PrismaModel> | $Enums.QuotationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuotationStatusFilter<$PrismaModel>
    _max?: NestedEnumQuotationStatusFilter<$PrismaModel>
  }

  export type PatientDetailsCreateWithoutTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutTenantInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutTenantInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput>
  }

  export type PatientDetailsCreateManyTenantInputEnvelope = {
    data: PatientDetailsCreateManyTenantInput | PatientDetailsCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type StaffMemberCreateWithoutTenantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutTenantInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput>
  }

  export type StaffMemberCreateManyTenantInputEnvelope = {
    data: StaffMemberCreateManyTenantInput | StaffMemberCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type FeatureFlagCreateWithoutTenantInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type FeatureFlagUncheckedCreateWithoutTenantInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type FeatureFlagCreateOrConnectWithoutTenantInput = {
    where: FeatureFlagWhereUniqueInput
    create: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput>
  }

  export type FeatureFlagCreateManyTenantInputEnvelope = {
    data: FeatureFlagCreateManyTenantInput | FeatureFlagCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutTenantInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutTenantInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AddressCreateOrConnectWithoutTenantInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
  }

  export type PredefinedActTypeCreateWithoutTenantInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActSubTypes?: PredefinedActSubTypesCreateNestedManyWithoutPredefinedActTypeInput
    QuotationLine?: QuotationLineCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeUncheckedCreateWithoutTenantInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedCreateNestedManyWithoutPredefinedActTypeInput
    QuotationLine?: QuotationLineUncheckedCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeCreateOrConnectWithoutTenantInput = {
    where: PredefinedActTypeWhereUniqueInput
    create: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput>
  }

  export type PredefinedActTypeCreateManyTenantInputEnvelope = {
    data: PredefinedActTypeCreateManyTenantInput | PredefinedActTypeCreateManyTenantInput[]
    skipDuplicates?: boolean
  }

  export type PatientDetailsUpsertWithWhereUniqueWithoutTenantInput = {
    where: PatientDetailsWhereUniqueInput
    update: XOR<PatientDetailsUpdateWithoutTenantInput, PatientDetailsUncheckedUpdateWithoutTenantInput>
    create: XOR<PatientDetailsCreateWithoutTenantInput, PatientDetailsUncheckedCreateWithoutTenantInput>
  }

  export type PatientDetailsUpdateWithWhereUniqueWithoutTenantInput = {
    where: PatientDetailsWhereUniqueInput
    data: XOR<PatientDetailsUpdateWithoutTenantInput, PatientDetailsUncheckedUpdateWithoutTenantInput>
  }

  export type PatientDetailsUpdateManyWithWhereWithoutTenantInput = {
    where: PatientDetailsScalarWhereInput
    data: XOR<PatientDetailsUpdateManyMutationInput, PatientDetailsUncheckedUpdateManyWithoutTenantInput>
  }

  export type PatientDetailsScalarWhereInput = {
    AND?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
    OR?: PatientDetailsScalarWhereInput[]
    NOT?: PatientDetailsScalarWhereInput | PatientDetailsScalarWhereInput[]
    id?: StringFilter<"PatientDetails"> | string
    userId?: StringFilter<"PatientDetails"> | string
    tenantId?: StringFilter<"PatientDetails"> | string
    createdAt?: DateTimeFilter<"PatientDetails"> | Date | string
    updatedAt?: DateTimeFilter<"PatientDetails"> | Date | string
    isDeleted?: BoolFilter<"PatientDetails"> | boolean
  }

  export type StaffMemberUpsertWithWhereUniqueWithoutTenantInput = {
    where: StaffMemberWhereUniqueInput
    update: XOR<StaffMemberUpdateWithoutTenantInput, StaffMemberUncheckedUpdateWithoutTenantInput>
    create: XOR<StaffMemberCreateWithoutTenantInput, StaffMemberUncheckedCreateWithoutTenantInput>
  }

  export type StaffMemberUpdateWithWhereUniqueWithoutTenantInput = {
    where: StaffMemberWhereUniqueInput
    data: XOR<StaffMemberUpdateWithoutTenantInput, StaffMemberUncheckedUpdateWithoutTenantInput>
  }

  export type StaffMemberUpdateManyWithWhereWithoutTenantInput = {
    where: StaffMemberScalarWhereInput
    data: XOR<StaffMemberUpdateManyMutationInput, StaffMemberUncheckedUpdateManyWithoutTenantInput>
  }

  export type StaffMemberScalarWhereInput = {
    AND?: StaffMemberScalarWhereInput | StaffMemberScalarWhereInput[]
    OR?: StaffMemberScalarWhereInput[]
    NOT?: StaffMemberScalarWhereInput | StaffMemberScalarWhereInput[]
    id?: StringFilter<"StaffMember"> | string
    tenantId?: StringNullableFilter<"StaffMember"> | string | null
    createdAt?: DateTimeFilter<"StaffMember"> | Date | string
    updatedAt?: DateTimeFilter<"StaffMember"> | Date | string
    isDeleted?: BoolFilter<"StaffMember"> | boolean
  }

  export type FeatureFlagUpsertWithWhereUniqueWithoutTenantInput = {
    where: FeatureFlagWhereUniqueInput
    update: XOR<FeatureFlagUpdateWithoutTenantInput, FeatureFlagUncheckedUpdateWithoutTenantInput>
    create: XOR<FeatureFlagCreateWithoutTenantInput, FeatureFlagUncheckedCreateWithoutTenantInput>
  }

  export type FeatureFlagUpdateWithWhereUniqueWithoutTenantInput = {
    where: FeatureFlagWhereUniqueInput
    data: XOR<FeatureFlagUpdateWithoutTenantInput, FeatureFlagUncheckedUpdateWithoutTenantInput>
  }

  export type FeatureFlagUpdateManyWithWhereWithoutTenantInput = {
    where: FeatureFlagScalarWhereInput
    data: XOR<FeatureFlagUpdateManyMutationInput, FeatureFlagUncheckedUpdateManyWithoutTenantInput>
  }

  export type FeatureFlagScalarWhereInput = {
    AND?: FeatureFlagScalarWhereInput | FeatureFlagScalarWhereInput[]
    OR?: FeatureFlagScalarWhereInput[]
    NOT?: FeatureFlagScalarWhereInput | FeatureFlagScalarWhereInput[]
    id?: StringFilter<"FeatureFlag"> | string
    key?: EnumFeatureFlagKeyFilter<"FeatureFlag"> | $Enums.FeatureFlagKey
    isEnabled?: BoolFilter<"FeatureFlag"> | boolean
    tenantId?: StringFilter<"FeatureFlag"> | string
    createdAt?: DateTimeFilter<"FeatureFlag"> | Date | string
    updatedAt?: DateTimeNullableFilter<"FeatureFlag"> | Date | string | null
  }

  export type AddressUpsertWithoutTenantInput = {
    update: XOR<AddressUpdateWithoutTenantInput, AddressUncheckedUpdateWithoutTenantInput>
    create: XOR<AddressCreateWithoutTenantInput, AddressUncheckedCreateWithoutTenantInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutTenantInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutTenantInput, AddressUncheckedUpdateWithoutTenantInput>
  }

  export type AddressUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PredefinedActTypeUpsertWithWhereUniqueWithoutTenantInput = {
    where: PredefinedActTypeWhereUniqueInput
    update: XOR<PredefinedActTypeUpdateWithoutTenantInput, PredefinedActTypeUncheckedUpdateWithoutTenantInput>
    create: XOR<PredefinedActTypeCreateWithoutTenantInput, PredefinedActTypeUncheckedCreateWithoutTenantInput>
  }

  export type PredefinedActTypeUpdateWithWhereUniqueWithoutTenantInput = {
    where: PredefinedActTypeWhereUniqueInput
    data: XOR<PredefinedActTypeUpdateWithoutTenantInput, PredefinedActTypeUncheckedUpdateWithoutTenantInput>
  }

  export type PredefinedActTypeUpdateManyWithWhereWithoutTenantInput = {
    where: PredefinedActTypeScalarWhereInput
    data: XOR<PredefinedActTypeUpdateManyMutationInput, PredefinedActTypeUncheckedUpdateManyWithoutTenantInput>
  }

  export type PredefinedActTypeScalarWhereInput = {
    AND?: PredefinedActTypeScalarWhereInput | PredefinedActTypeScalarWhereInput[]
    OR?: PredefinedActTypeScalarWhereInput[]
    NOT?: PredefinedActTypeScalarWhereInput | PredefinedActTypeScalarWhereInput[]
    id?: StringFilter<"PredefinedActType"> | string
    name?: StringFilter<"PredefinedActType"> | string
    tenantId?: StringFilter<"PredefinedActType"> | string
    price?: DecimalFilter<"PredefinedActType"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActType"> | $Enums.Currency
    createdAt?: DateTimeFilter<"PredefinedActType"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActType"> | Date | string
  }

  export type AccountCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuthenticatorCreateWithoutUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorUncheckedCreateWithoutUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type AuthenticatorCreateOrConnectWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    create: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput>
  }

  export type AuthenticatorCreateManyUserInputEnvelope = {
    data: AuthenticatorCreateManyUserInput | AuthenticatorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientDetailsCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    tenant: TenantCreateNestedOneWithoutPatientsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutUserInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput>
  }

  export type PatientDetailsCreateManyUserInputEnvelope = {
    data: PatientDetailsCreateManyUserInput | PatientDetailsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StaffMemberCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutUserInput = {
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutUserInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUserInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    tenant?: TenantCreateNestedOneWithoutBillingAddressInput
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: string
    street: string
    city: string
    zip: string
    countryCode: string
    additionalAddressLine?: string | null
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Account"> | Date | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Session"> | Date | string | null
  }

  export type AuthenticatorUpsertWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    update: XOR<AuthenticatorUpdateWithoutUserInput, AuthenticatorUncheckedUpdateWithoutUserInput>
    create: XOR<AuthenticatorCreateWithoutUserInput, AuthenticatorUncheckedCreateWithoutUserInput>
  }

  export type AuthenticatorUpdateWithWhereUniqueWithoutUserInput = {
    where: AuthenticatorWhereUniqueInput
    data: XOR<AuthenticatorUpdateWithoutUserInput, AuthenticatorUncheckedUpdateWithoutUserInput>
  }

  export type AuthenticatorUpdateManyWithWhereWithoutUserInput = {
    where: AuthenticatorScalarWhereInput
    data: XOR<AuthenticatorUpdateManyMutationInput, AuthenticatorUncheckedUpdateManyWithoutUserInput>
  }

  export type AuthenticatorScalarWhereInput = {
    AND?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
    OR?: AuthenticatorScalarWhereInput[]
    NOT?: AuthenticatorScalarWhereInput | AuthenticatorScalarWhereInput[]
    credentialID?: StringFilter<"Authenticator"> | string
    userId?: StringFilter<"Authenticator"> | string
    providerAccountId?: StringFilter<"Authenticator"> | string
    credentialPublicKey?: StringFilter<"Authenticator"> | string
    counter?: IntFilter<"Authenticator"> | number
    credentialDeviceType?: StringFilter<"Authenticator"> | string
    credentialBackedUp?: BoolFilter<"Authenticator"> | boolean
    transports?: StringNullableFilter<"Authenticator"> | string | null
  }

  export type PatientDetailsUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientDetailsWhereUniqueInput
    update: XOR<PatientDetailsUpdateWithoutUserInput, PatientDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<PatientDetailsCreateWithoutUserInput, PatientDetailsUncheckedCreateWithoutUserInput>
  }

  export type PatientDetailsUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientDetailsWhereUniqueInput
    data: XOR<PatientDetailsUpdateWithoutUserInput, PatientDetailsUncheckedUpdateWithoutUserInput>
  }

  export type PatientDetailsUpdateManyWithWhereWithoutUserInput = {
    where: PatientDetailsScalarWhereInput
    data: XOR<PatientDetailsUpdateManyMutationInput, PatientDetailsUncheckedUpdateManyWithoutUserInput>
  }

  export type StaffMemberUpsertWithoutUserInput = {
    update: XOR<StaffMemberUpdateWithoutUserInput, StaffMemberUncheckedUpdateWithoutUserInput>
    create: XOR<StaffMemberCreateWithoutUserInput, StaffMemberUncheckedCreateWithoutUserInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutUserInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutUserInput, StaffMemberUncheckedUpdateWithoutUserInput>
  }

  export type StaffMemberUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutUserInput = {
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type AddressUpsertWithoutUserInput = {
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutUserInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    tenant?: TenantUpdateOneWithoutBillingAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    countryCode?: StringFieldUpdateOperationsInput | string
    additionalAddressLine?: NullableStringFieldUpdateOperationsInput | string | null
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutStaffMemberInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffMemberInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffMemberInput, UserUncheckedCreateWithoutStaffMemberInput>
  }

  export type TenantCreateWithoutStaffMembersInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagCreateNestedManyWithoutTenantInput
    billingAddress?: AddressCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutStaffMembersInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsUncheckedCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagUncheckedCreateNestedManyWithoutTenantInput
    billingAddress?: AddressUncheckedCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutStaffMembersInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutStaffMembersInput, TenantUncheckedCreateWithoutStaffMembersInput>
  }

  export type DocumentCreateWithoutCreatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedDocumentsInput
    note?: NoteCreateNestedOneWithoutFilesInput
    quotation?: QuotationCreateNestedOneWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentCreateOrConnectWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentCreateManyCreatedByInputEnvelope = {
    data: DocumentCreateManyCreatedByInput | DocumentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    createdBy: StaffMemberCreateNestedOneWithoutCreatedDocumentsInput
    note?: NoteCreateNestedOneWithoutFilesInput
    quotation?: QuotationCreateNestedOneWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentCreateOrConnectWithoutUpdatedByInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput>
  }

  export type DocumentCreateManyUpdatedByInputEnvelope = {
    data: DocumentCreateManyUpdatedByInput | DocumentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedNotesInput
    patientDetails: PatientDetailsCreateNestedOneWithoutNotesInput
    files?: DocumentCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUncheckedCreateWithoutCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
    files?: DocumentUncheckedCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutReportNoteInput
  }

  export type NoteCreateOrConnectWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput>
  }

  export type NoteCreateManyCreatedByInputEnvelope = {
    data: NoteCreateManyCreatedByInput | NoteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutUpdatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    createdBy: StaffMemberCreateNestedOneWithoutCreatedNotesInput
    patientDetails: PatientDetailsCreateNestedOneWithoutNotesInput
    files?: DocumentCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    patientDetailsId: string
    isDeleted?: boolean
    files?: DocumentUncheckedCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutReportNoteInput
  }

  export type NoteCreateOrConnectWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput>
  }

  export type NoteCreateManyUpdatedByInputEnvelope = {
    data: NoteCreateManyUpdatedByInput | NoteCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutStaffMemberInput = {
    id?: string
    status: $Enums.AppointmentStatus
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patientDetails: PatientDetailsCreateNestedOneWithoutAppointmentInput
    reportNote?: NoteCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutStaffMemberInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AppointmentCreateOrConnectWithoutStaffMemberInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput>
  }

  export type AppointmentCreateManyStaffMemberInputEnvelope = {
    data: AppointmentCreateManyStaffMemberInput | AppointmentCreateManyStaffMemberInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStaffMemberInput = {
    update: XOR<UserUpdateWithoutStaffMemberInput, UserUncheckedUpdateWithoutStaffMemberInput>
    create: XOR<UserCreateWithoutStaffMemberInput, UserUncheckedCreateWithoutStaffMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffMemberInput, UserUncheckedUpdateWithoutStaffMemberInput>
  }

  export type UserUpdateWithoutStaffMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TenantUpsertWithoutStaffMembersInput = {
    update: XOR<TenantUpdateWithoutStaffMembersInput, TenantUncheckedUpdateWithoutStaffMembersInput>
    create: XOR<TenantCreateWithoutStaffMembersInput, TenantUncheckedCreateWithoutStaffMembersInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutStaffMembersInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutStaffMembersInput, TenantUncheckedUpdateWithoutStaffMembersInput>
  }

  export type TenantUpdateWithoutStaffMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutStaffMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUncheckedUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DocumentCreateWithoutCreatedByInput, DocumentUncheckedCreateWithoutCreatedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutCreatedByInput, DocumentUncheckedUpdateWithoutCreatedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutCreatedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DocumentScalarWhereInput = {
    AND?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    OR?: DocumentScalarWhereInput[]
    NOT?: DocumentScalarWhereInput | DocumentScalarWhereInput[]
    id?: StringFilter<"Document"> | string
    name?: StringFilter<"Document"> | string
    path?: StringFilter<"Document"> | string
    createdAt?: DateTimeFilter<"Document"> | Date | string
    createdById?: StringFilter<"Document"> | string
    updatedAt?: DateTimeNullableFilter<"Document"> | Date | string | null
    updatedById?: StringNullableFilter<"Document"> | string | null
    contentType?: StringFilter<"Document"> | string
    noteId?: StringNullableFilter<"Document"> | string | null
    visibleTo?: EnumRoleNullableListFilter<"Document">
    quotationId?: StringNullableFilter<"Document"> | string | null
  }

  export type DocumentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutUpdatedByInput, DocumentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<DocumentCreateWithoutUpdatedByInput, DocumentUncheckedCreateWithoutUpdatedByInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutUpdatedByInput, DocumentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type DocumentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutCreatedByInput, NoteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutCreatedByInput, NoteUncheckedUpdateWithoutCreatedByInput>
  }

  export type NoteUpdateManyWithWhereWithoutCreatedByInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    content?: StringFilter<"Note"> | string
    createdAt?: DateTimeFilter<"Note"> | Date | string
    createdById?: StringFilter<"Note"> | string
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    patientDetailsId?: StringFilter<"Note"> | string
    isDeleted?: BoolFilter<"Note"> | boolean
  }

  export type NoteUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutUpdatedByInput, NoteUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutUpdatedByInput, NoteUncheckedUpdateWithoutUpdatedByInput>
  }

  export type NoteUpdateManyWithWhereWithoutUpdatedByInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutStaffMemberInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutStaffMemberInput, AppointmentUncheckedUpdateWithoutStaffMemberInput>
    create: XOR<AppointmentCreateWithoutStaffMemberInput, AppointmentUncheckedCreateWithoutStaffMemberInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutStaffMemberInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutStaffMemberInput, AppointmentUncheckedUpdateWithoutStaffMemberInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutStaffMemberInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutStaffMemberInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    patientDetailsId?: StringFilter<"Appointment"> | string
    staffMemberId?: StringFilter<"Appointment"> | string
    startAt?: DateTimeFilter<"Appointment"> | Date | string
    endAt?: DateTimeFilter<"Appointment"> | Date | string
    reportNoteId?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Appointment"> | Date | string | null
  }

  export type UserCreateWithoutPatientDetailsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientDetailsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientDetailsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientDetailsInput, UserUncheckedCreateWithoutPatientDetailsInput>
  }

  export type TenantCreateWithoutPatientsInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    staffMembers?: StaffMemberCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagCreateNestedManyWithoutTenantInput
    billingAddress?: AddressCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPatientsInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    staffMembers?: StaffMemberUncheckedCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagUncheckedCreateNestedManyWithoutTenantInput
    billingAddress?: AddressUncheckedCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPatientsInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPatientsInput, TenantUncheckedCreateWithoutPatientsInput>
  }

  export type NoteCreateWithoutPatientDetailsInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    createdBy: StaffMemberCreateNestedOneWithoutCreatedNotesInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedNotesInput
    files?: DocumentCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUncheckedCreateWithoutPatientDetailsInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    isDeleted?: boolean
    files?: DocumentUncheckedCreateNestedManyWithoutNoteInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutReportNoteInput
  }

  export type NoteCreateOrConnectWithoutPatientDetailsInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput>
  }

  export type NoteCreateManyPatientDetailsInputEnvelope = {
    data: NoteCreateManyPatientDetailsInput | NoteCreateManyPatientDetailsInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPatientDetailsInput = {
    id?: string
    status: $Enums.AppointmentStatus
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    staffMember: StaffMemberCreateNestedOneWithoutAppointmentInput
    reportNote?: NoteCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientDetailsInput = {
    id?: string
    status: $Enums.AppointmentStatus
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AppointmentCreateOrConnectWithoutPatientDetailsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput>
  }

  export type AppointmentCreateManyPatientDetailsInputEnvelope = {
    data: AppointmentCreateManyPatientDetailsInput | AppointmentCreateManyPatientDetailsInput[]
    skipDuplicates?: boolean
  }

  export type AccountingEntryCreateWithoutPatientDetailsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountingEntryUncheckedCreateWithoutPatientDetailsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountingEntryCreateOrConnectWithoutPatientDetailsInput = {
    where: AccountingEntryWhereUniqueInput
    create: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput>
  }

  export type AccountingEntryCreateManyPatientDetailsInputEnvelope = {
    data: AccountingEntryCreateManyPatientDetailsInput | AccountingEntryCreateManyPatientDetailsInput[]
    skipDuplicates?: boolean
  }

  export type QuotationCreateWithoutPatientDetailsInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationLines?: QuotationLineCreateNestedManyWithoutQuotationInput
    document?: DocumentCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutPatientDetailsInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationLines?: QuotationLineUncheckedCreateNestedManyWithoutQuotationInput
    document?: DocumentUncheckedCreateNestedOneWithoutQuotationInput
  }

  export type QuotationCreateOrConnectWithoutPatientDetailsInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput>
  }

  export type QuotationCreateManyPatientDetailsInputEnvelope = {
    data: QuotationCreateManyPatientDetailsInput | QuotationCreateManyPatientDetailsInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientDetailsInput = {
    update: XOR<UserUpdateWithoutPatientDetailsInput, UserUncheckedUpdateWithoutPatientDetailsInput>
    create: XOR<UserCreateWithoutPatientDetailsInput, UserUncheckedCreateWithoutPatientDetailsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientDetailsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientDetailsInput, UserUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type UserUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TenantUpsertWithoutPatientsInput = {
    update: XOR<TenantUpdateWithoutPatientsInput, TenantUncheckedUpdateWithoutPatientsInput>
    create: XOR<TenantCreateWithoutPatientsInput, TenantUncheckedCreateWithoutPatientsInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPatientsInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPatientsInput, TenantUncheckedUpdateWithoutPatientsInput>
  }

  export type TenantUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffMembers?: StaffMemberUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffMembers?: StaffMemberUncheckedUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUncheckedUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type NoteUpsertWithWhereUniqueWithoutPatientDetailsInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutPatientDetailsInput, NoteUncheckedUpdateWithoutPatientDetailsInput>
    create: XOR<NoteCreateWithoutPatientDetailsInput, NoteUncheckedCreateWithoutPatientDetailsInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutPatientDetailsInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutPatientDetailsInput, NoteUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type NoteUpdateManyWithWhereWithoutPatientDetailsInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutPatientDetailsInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientDetailsInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientDetailsInput, AppointmentUncheckedUpdateWithoutPatientDetailsInput>
    create: XOR<AppointmentCreateWithoutPatientDetailsInput, AppointmentUncheckedCreateWithoutPatientDetailsInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientDetailsInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientDetailsInput, AppointmentUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientDetailsInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientDetailsInput>
  }

  export type AccountingEntryUpsertWithWhereUniqueWithoutPatientDetailsInput = {
    where: AccountingEntryWhereUniqueInput
    update: XOR<AccountingEntryUpdateWithoutPatientDetailsInput, AccountingEntryUncheckedUpdateWithoutPatientDetailsInput>
    create: XOR<AccountingEntryCreateWithoutPatientDetailsInput, AccountingEntryUncheckedCreateWithoutPatientDetailsInput>
  }

  export type AccountingEntryUpdateWithWhereUniqueWithoutPatientDetailsInput = {
    where: AccountingEntryWhereUniqueInput
    data: XOR<AccountingEntryUpdateWithoutPatientDetailsInput, AccountingEntryUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type AccountingEntryUpdateManyWithWhereWithoutPatientDetailsInput = {
    where: AccountingEntryScalarWhereInput
    data: XOR<AccountingEntryUpdateManyMutationInput, AccountingEntryUncheckedUpdateManyWithoutPatientDetailsInput>
  }

  export type AccountingEntryScalarWhereInput = {
    AND?: AccountingEntryScalarWhereInput | AccountingEntryScalarWhereInput[]
    OR?: AccountingEntryScalarWhereInput[]
    NOT?: AccountingEntryScalarWhereInput | AccountingEntryScalarWhereInput[]
    id?: StringFilter<"AccountingEntry"> | string
    patientDetailsId?: StringFilter<"AccountingEntry"> | string
    amount?: DecimalFilter<"AccountingEntry"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"AccountingEntry"> | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFilter<"AccountingEntry"> | $Enums.PaymentMethod
    transactionReference?: StringNullableFilter<"AccountingEntry"> | string | null
    type?: EnumAccountingEntryTypeFilter<"AccountingEntry"> | $Enums.AccountingEntryType
    createdAt?: DateTimeFilter<"AccountingEntry"> | Date | string
    updatedAt?: DateTimeNullableFilter<"AccountingEntry"> | Date | string | null
  }

  export type QuotationUpsertWithWhereUniqueWithoutPatientDetailsInput = {
    where: QuotationWhereUniqueInput
    update: XOR<QuotationUpdateWithoutPatientDetailsInput, QuotationUncheckedUpdateWithoutPatientDetailsInput>
    create: XOR<QuotationCreateWithoutPatientDetailsInput, QuotationUncheckedCreateWithoutPatientDetailsInput>
  }

  export type QuotationUpdateWithWhereUniqueWithoutPatientDetailsInput = {
    where: QuotationWhereUniqueInput
    data: XOR<QuotationUpdateWithoutPatientDetailsInput, QuotationUncheckedUpdateWithoutPatientDetailsInput>
  }

  export type QuotationUpdateManyWithWhereWithoutPatientDetailsInput = {
    where: QuotationScalarWhereInput
    data: XOR<QuotationUpdateManyMutationInput, QuotationUncheckedUpdateManyWithoutPatientDetailsInput>
  }

  export type QuotationScalarWhereInput = {
    AND?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
    OR?: QuotationScalarWhereInput[]
    NOT?: QuotationScalarWhereInput | QuotationScalarWhereInput[]
    id?: StringFilter<"Quotation"> | string
    patientDetailsId?: StringFilter<"Quotation"> | string
    name?: StringFilter<"Quotation"> | string
    status?: EnumQuotationStatusFilter<"Quotation"> | $Enums.QuotationStatus
    createdAt?: DateTimeFilter<"Quotation"> | Date | string
    updatedAt?: DateTimeFilter<"Quotation"> | Date | string
  }

  export type PatientDetailsCreateWithoutAccountingEntryInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    tenant: TenantCreateNestedOneWithoutPatientsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutAccountingEntryInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutAccountingEntryInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutAccountingEntryInput, PatientDetailsUncheckedCreateWithoutAccountingEntryInput>
  }

  export type PatientDetailsUpsertWithoutAccountingEntryInput = {
    update: XOR<PatientDetailsUpdateWithoutAccountingEntryInput, PatientDetailsUncheckedUpdateWithoutAccountingEntryInput>
    create: XOR<PatientDetailsCreateWithoutAccountingEntryInput, PatientDetailsUncheckedCreateWithoutAccountingEntryInput>
    where?: PatientDetailsWhereInput
  }

  export type PatientDetailsUpdateToOneWithWhereWithoutAccountingEntryInput = {
    where?: PatientDetailsWhereInput
    data: XOR<PatientDetailsUpdateWithoutAccountingEntryInput, PatientDetailsUncheckedUpdateWithoutAccountingEntryInput>
  }

  export type PatientDetailsUpdateWithoutAccountingEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutAccountingEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAuthenticatorInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
    address?: AddressCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuthenticatorInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
    address?: AddressUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuthenticatorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
  }

  export type UserUpsertWithoutAuthenticatorInput = {
    update: XOR<UserUpdateWithoutAuthenticatorInput, UserUncheckedUpdateWithoutAuthenticatorInput>
    create: XOR<UserCreateWithoutAuthenticatorInput, UserUncheckedCreateWithoutAuthenticatorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuthenticatorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuthenticatorInput, UserUncheckedUpdateWithoutAuthenticatorInput>
  }

  export type UserUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
    address?: AddressUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuthenticatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
    address?: AddressUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAddressInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressInput = {
    id?: string
    role?: $Enums.Role
    firstName?: string | null
    lastName?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    locale?: string
    phone?: string | null
    birthDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Authenticator?: AuthenticatorUncheckedCreateNestedManyWithoutUserInput
    patientDetails?: PatientDetailsUncheckedCreateNestedManyWithoutUserInput
    staffMember?: StaffMemberUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
  }

  export type TenantCreateWithoutBillingAddressInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagCreateNestedManyWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutBillingAddressInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsUncheckedCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberUncheckedCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagUncheckedCreateNestedManyWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutBillingAddressInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutBillingAddressInput, TenantUncheckedCreateWithoutBillingAddressInput>
  }

  export type UserUpsertWithoutAddressInput = {
    update: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
    create: XOR<UserCreateWithoutAddressInput, UserUncheckedCreateWithoutAddressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddressInput, UserUncheckedUpdateWithoutAddressInput>
  }

  export type UserUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    locale?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    Authenticator?: AuthenticatorUncheckedUpdateManyWithoutUserNestedInput
    patientDetails?: PatientDetailsUncheckedUpdateManyWithoutUserNestedInput
    staffMember?: StaffMemberUncheckedUpdateOneWithoutUserNestedInput
  }

  export type TenantUpsertWithoutBillingAddressInput = {
    update: XOR<TenantUpdateWithoutBillingAddressInput, TenantUncheckedUpdateWithoutBillingAddressInput>
    create: XOR<TenantCreateWithoutBillingAddressInput, TenantUncheckedCreateWithoutBillingAddressInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutBillingAddressInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutBillingAddressInput, TenantUncheckedUpdateWithoutBillingAddressInput>
  }

  export type TenantUpdateWithoutBillingAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUpdateManyWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutBillingAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUncheckedUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type StaffMemberCreateWithoutCreatedNotesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutCreatedNotesInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutCreatedNotesInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutCreatedNotesInput, StaffMemberUncheckedCreateWithoutCreatedNotesInput>
  }

  export type StaffMemberCreateWithoutUpdatedNotesInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutUpdatedNotesInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutUpdatedNotesInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutUpdatedNotesInput, StaffMemberUncheckedCreateWithoutUpdatedNotesInput>
  }

  export type PatientDetailsCreateWithoutNotesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    tenant: TenantCreateNestedOneWithoutPatientsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutNotesInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutNotesInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutNotesInput, PatientDetailsUncheckedCreateWithoutNotesInput>
  }

  export type DocumentCreateWithoutNoteInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    createdBy: StaffMemberCreateNestedOneWithoutCreatedDocumentsInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedDocumentsInput
    quotation?: QuotationCreateNestedOneWithoutDocumentInput
  }

  export type DocumentUncheckedCreateWithoutNoteInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentCreateOrConnectWithoutNoteInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput>
  }

  export type DocumentCreateManyNoteInputEnvelope = {
    data: DocumentCreateManyNoteInput | DocumentCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutReportNoteInput = {
    id?: string
    status: $Enums.AppointmentStatus
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patientDetails: PatientDetailsCreateNestedOneWithoutAppointmentInput
    staffMember: StaffMemberCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutReportNoteInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AppointmentCreateOrConnectWithoutReportNoteInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput>
  }

  export type AppointmentCreateManyReportNoteInputEnvelope = {
    data: AppointmentCreateManyReportNoteInput | AppointmentCreateManyReportNoteInput[]
    skipDuplicates?: boolean
  }

  export type StaffMemberUpsertWithoutCreatedNotesInput = {
    update: XOR<StaffMemberUpdateWithoutCreatedNotesInput, StaffMemberUncheckedUpdateWithoutCreatedNotesInput>
    create: XOR<StaffMemberCreateWithoutCreatedNotesInput, StaffMemberUncheckedCreateWithoutCreatedNotesInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutCreatedNotesInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutCreatedNotesInput, StaffMemberUncheckedUpdateWithoutCreatedNotesInput>
  }

  export type StaffMemberUpdateWithoutCreatedNotesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutCreatedNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUpsertWithoutUpdatedNotesInput = {
    update: XOR<StaffMemberUpdateWithoutUpdatedNotesInput, StaffMemberUncheckedUpdateWithoutUpdatedNotesInput>
    create: XOR<StaffMemberCreateWithoutUpdatedNotesInput, StaffMemberUncheckedCreateWithoutUpdatedNotesInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutUpdatedNotesInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutUpdatedNotesInput, StaffMemberUncheckedUpdateWithoutUpdatedNotesInput>
  }

  export type StaffMemberUpdateWithoutUpdatedNotesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutUpdatedNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type PatientDetailsUpsertWithoutNotesInput = {
    update: XOR<PatientDetailsUpdateWithoutNotesInput, PatientDetailsUncheckedUpdateWithoutNotesInput>
    create: XOR<PatientDetailsCreateWithoutNotesInput, PatientDetailsUncheckedCreateWithoutNotesInput>
    where?: PatientDetailsWhereInput
  }

  export type PatientDetailsUpdateToOneWithWhereWithoutNotesInput = {
    where?: PatientDetailsWhereInput
    data: XOR<PatientDetailsUpdateWithoutNotesInput, PatientDetailsUncheckedUpdateWithoutNotesInput>
  }

  export type PatientDetailsUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type DocumentUpsertWithWhereUniqueWithoutNoteInput = {
    where: DocumentWhereUniqueInput
    update: XOR<DocumentUpdateWithoutNoteInput, DocumentUncheckedUpdateWithoutNoteInput>
    create: XOR<DocumentCreateWithoutNoteInput, DocumentUncheckedCreateWithoutNoteInput>
  }

  export type DocumentUpdateWithWhereUniqueWithoutNoteInput = {
    where: DocumentWhereUniqueInput
    data: XOR<DocumentUpdateWithoutNoteInput, DocumentUncheckedUpdateWithoutNoteInput>
  }

  export type DocumentUpdateManyWithWhereWithoutNoteInput = {
    where: DocumentScalarWhereInput
    data: XOR<DocumentUpdateManyMutationInput, DocumentUncheckedUpdateManyWithoutNoteInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutReportNoteInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutReportNoteInput, AppointmentUncheckedUpdateWithoutReportNoteInput>
    create: XOR<AppointmentCreateWithoutReportNoteInput, AppointmentUncheckedCreateWithoutReportNoteInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutReportNoteInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutReportNoteInput, AppointmentUncheckedUpdateWithoutReportNoteInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutReportNoteInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutReportNoteInput>
  }

  export type StaffMemberCreateWithoutCreatedDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutCreatedDocumentsInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutCreatedDocumentsInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutCreatedDocumentsInput, StaffMemberUncheckedCreateWithoutCreatedDocumentsInput>
  }

  export type StaffMemberCreateWithoutUpdatedDocumentsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberUncheckedCreateWithoutUpdatedDocumentsInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutStaffMemberInput
  }

  export type StaffMemberCreateOrConnectWithoutUpdatedDocumentsInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutUpdatedDocumentsInput, StaffMemberUncheckedCreateWithoutUpdatedDocumentsInput>
  }

  export type NoteCreateWithoutFilesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    createdBy: StaffMemberCreateNestedOneWithoutCreatedNotesInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedNotesInput
    patientDetails: PatientDetailsCreateNestedOneWithoutNotesInput
    Appointment?: AppointmentCreateNestedManyWithoutReportNoteInput
  }

  export type NoteUncheckedCreateWithoutFilesInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutReportNoteInput
  }

  export type NoteCreateOrConnectWithoutFilesInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutFilesInput, NoteUncheckedCreateWithoutFilesInput>
  }

  export type QuotationCreateWithoutDocumentInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientDetails: PatientDetailsCreateNestedOneWithoutQuotationInput
    quotationLines?: QuotationLineCreateNestedManyWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutDocumentInput = {
    id?: string
    patientDetailsId: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    quotationLines?: QuotationLineUncheckedCreateNestedManyWithoutQuotationInput
  }

  export type QuotationCreateOrConnectWithoutDocumentInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutDocumentInput, QuotationUncheckedCreateWithoutDocumentInput>
  }

  export type StaffMemberUpsertWithoutCreatedDocumentsInput = {
    update: XOR<StaffMemberUpdateWithoutCreatedDocumentsInput, StaffMemberUncheckedUpdateWithoutCreatedDocumentsInput>
    create: XOR<StaffMemberCreateWithoutCreatedDocumentsInput, StaffMemberUncheckedCreateWithoutCreatedDocumentsInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutCreatedDocumentsInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutCreatedDocumentsInput, StaffMemberUncheckedUpdateWithoutCreatedDocumentsInput>
  }

  export type StaffMemberUpdateWithoutCreatedDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutCreatedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUpsertWithoutUpdatedDocumentsInput = {
    update: XOR<StaffMemberUpdateWithoutUpdatedDocumentsInput, StaffMemberUncheckedUpdateWithoutUpdatedDocumentsInput>
    create: XOR<StaffMemberCreateWithoutUpdatedDocumentsInput, StaffMemberUncheckedCreateWithoutUpdatedDocumentsInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutUpdatedDocumentsInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutUpdatedDocumentsInput, StaffMemberUncheckedUpdateWithoutUpdatedDocumentsInput>
  }

  export type StaffMemberUpdateWithoutUpdatedDocumentsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutUpdatedDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type NoteUpsertWithoutFilesInput = {
    update: XOR<NoteUpdateWithoutFilesInput, NoteUncheckedUpdateWithoutFilesInput>
    create: XOR<NoteCreateWithoutFilesInput, NoteUncheckedCreateWithoutFilesInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutFilesInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutFilesInput, NoteUncheckedUpdateWithoutFilesInput>
  }

  export type NoteUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedNotesNestedInput
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutNotesNestedInput
    Appointment?: AppointmentUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput
  }

  export type QuotationUpsertWithoutDocumentInput = {
    update: XOR<QuotationUpdateWithoutDocumentInput, QuotationUncheckedUpdateWithoutDocumentInput>
    create: XOR<QuotationCreateWithoutDocumentInput, QuotationUncheckedCreateWithoutDocumentInput>
    where?: QuotationWhereInput
  }

  export type QuotationUpdateToOneWithWhereWithoutDocumentInput = {
    where?: QuotationWhereInput
    data: XOR<QuotationUpdateWithoutDocumentInput, QuotationUncheckedUpdateWithoutDocumentInput>
  }

  export type QuotationUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutQuotationNestedInput
    quotationLines?: QuotationLineUpdateManyWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationLines?: QuotationLineUncheckedUpdateManyWithoutQuotationNestedInput
  }

  export type PatientDetailsCreateWithoutAppointmentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    tenant: TenantCreateNestedOneWithoutPatientsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutAppointmentInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
    Quotation?: QuotationUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutAppointmentInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutAppointmentInput, PatientDetailsUncheckedCreateWithoutAppointmentInput>
  }

  export type StaffMemberCreateWithoutAppointmentInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutStaffMemberInput
    tenant?: TenantCreateNestedOneWithoutStaffMembersInput
    createdDocuments?: DocumentCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteCreateNestedManyWithoutUpdatedByInput
  }

  export type StaffMemberUncheckedCreateWithoutAppointmentInput = {
    id?: string
    tenantId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdDocuments?: DocumentUncheckedCreateNestedManyWithoutCreatedByInput
    updatedDocuments?: DocumentUncheckedCreateNestedManyWithoutUpdatedByInput
    createdNotes?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    updatedNotes?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type StaffMemberCreateOrConnectWithoutAppointmentInput = {
    where: StaffMemberWhereUniqueInput
    create: XOR<StaffMemberCreateWithoutAppointmentInput, StaffMemberUncheckedCreateWithoutAppointmentInput>
  }

  export type NoteCreateWithoutAppointmentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    isDeleted?: boolean
    createdBy: StaffMemberCreateNestedOneWithoutCreatedNotesInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedNotesInput
    patientDetails: PatientDetailsCreateNestedOneWithoutNotesInput
    files?: DocumentCreateNestedManyWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutAppointmentInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
    files?: DocumentUncheckedCreateNestedManyWithoutNoteInput
  }

  export type NoteCreateOrConnectWithoutAppointmentInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutAppointmentInput, NoteUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientDetailsUpsertWithoutAppointmentInput = {
    update: XOR<PatientDetailsUpdateWithoutAppointmentInput, PatientDetailsUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientDetailsCreateWithoutAppointmentInput, PatientDetailsUncheckedCreateWithoutAppointmentInput>
    where?: PatientDetailsWhereInput
  }

  export type PatientDetailsUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: PatientDetailsWhereInput
    data: XOR<PatientDetailsUpdateWithoutAppointmentInput, PatientDetailsUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientDetailsUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type StaffMemberUpsertWithoutAppointmentInput = {
    update: XOR<StaffMemberUpdateWithoutAppointmentInput, StaffMemberUncheckedUpdateWithoutAppointmentInput>
    create: XOR<StaffMemberCreateWithoutAppointmentInput, StaffMemberUncheckedCreateWithoutAppointmentInput>
    where?: StaffMemberWhereInput
  }

  export type StaffMemberUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: StaffMemberWhereInput
    data: XOR<StaffMemberUpdateWithoutAppointmentInput, StaffMemberUncheckedUpdateWithoutAppointmentInput>
  }

  export type StaffMemberUpdateWithoutAppointmentInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    tenant?: TenantUpdateOneWithoutStaffMembersNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type NoteUpsertWithoutAppointmentInput = {
    update: XOR<NoteUpdateWithoutAppointmentInput, NoteUncheckedUpdateWithoutAppointmentInput>
    create: XOR<NoteCreateWithoutAppointmentInput, NoteUncheckedCreateWithoutAppointmentInput>
    where?: NoteWhereInput
  }

  export type NoteUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: NoteWhereInput
    data: XOR<NoteUpdateWithoutAppointmentInput, NoteUncheckedUpdateWithoutAppointmentInput>
  }

  export type NoteUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedNotesNestedInput
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutNotesNestedInput
    files?: DocumentUpdateManyWithoutNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    files?: DocumentUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type TenantCreateWithoutFeatureFlagInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberCreateNestedManyWithoutTenantInput
    billingAddress?: AddressCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeCreateNestedManyWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutFeatureFlagInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsUncheckedCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberUncheckedCreateNestedManyWithoutTenantInput
    billingAddress?: AddressUncheckedCreateNestedOneWithoutTenantInput
    predefinedActTypes?: PredefinedActTypeUncheckedCreateNestedManyWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutFeatureFlagInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutFeatureFlagInput, TenantUncheckedCreateWithoutFeatureFlagInput>
  }

  export type TenantUpsertWithoutFeatureFlagInput = {
    update: XOR<TenantUpdateWithoutFeatureFlagInput, TenantUncheckedUpdateWithoutFeatureFlagInput>
    create: XOR<TenantCreateWithoutFeatureFlagInput, TenantUncheckedCreateWithoutFeatureFlagInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutFeatureFlagInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutFeatureFlagInput, TenantUncheckedUpdateWithoutFeatureFlagInput>
  }

  export type TenantUpdateWithoutFeatureFlagInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUpdateManyWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutFeatureFlagInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUncheckedUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUncheckedUpdateOneWithoutTenantNestedInput
    predefinedActTypes?: PredefinedActTypeUncheckedUpdateManyWithoutTenantNestedInput
  }

  export type TenantCreateWithoutPredefinedActTypesInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagCreateNestedManyWithoutTenantInput
    billingAddress?: AddressCreateNestedOneWithoutTenantInput
  }

  export type TenantUncheckedCreateWithoutPredefinedActTypesInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    patients?: PatientDetailsUncheckedCreateNestedManyWithoutTenantInput
    staffMembers?: StaffMemberUncheckedCreateNestedManyWithoutTenantInput
    FeatureFlag?: FeatureFlagUncheckedCreateNestedManyWithoutTenantInput
    billingAddress?: AddressUncheckedCreateNestedOneWithoutTenantInput
  }

  export type TenantCreateOrConnectWithoutPredefinedActTypesInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutPredefinedActTypesInput, TenantUncheckedCreateWithoutPredefinedActTypesInput>
  }

  export type PredefinedActSubTypesCreateWithoutPredefinedActTypeInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    QuotationLine?: QuotationLineCreateNestedManyWithoutSubActTypeInput
  }

  export type PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    QuotationLine?: QuotationLineUncheckedCreateNestedManyWithoutSubActTypeInput
  }

  export type PredefinedActSubTypesCreateOrConnectWithoutPredefinedActTypeInput = {
    where: PredefinedActSubTypesWhereUniqueInput
    create: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput>
  }

  export type PredefinedActSubTypesCreateManyPredefinedActTypeInputEnvelope = {
    data: PredefinedActSubTypesCreateManyPredefinedActTypeInput | PredefinedActSubTypesCreateManyPredefinedActTypeInput[]
    skipDuplicates?: boolean
  }

  export type QuotationLineCreateWithoutActTypeInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    quotation: QuotationCreateNestedOneWithoutQuotationLinesInput
    subActType?: PredefinedActSubTypesCreateNestedOneWithoutQuotationLineInput
  }

  export type QuotationLineUncheckedCreateWithoutActTypeInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineCreateOrConnectWithoutActTypeInput = {
    where: QuotationLineWhereUniqueInput
    create: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput>
  }

  export type QuotationLineCreateManyActTypeInputEnvelope = {
    data: QuotationLineCreateManyActTypeInput | QuotationLineCreateManyActTypeInput[]
    skipDuplicates?: boolean
  }

  export type TenantUpsertWithoutPredefinedActTypesInput = {
    update: XOR<TenantUpdateWithoutPredefinedActTypesInput, TenantUncheckedUpdateWithoutPredefinedActTypesInput>
    create: XOR<TenantCreateWithoutPredefinedActTypesInput, TenantUncheckedCreateWithoutPredefinedActTypesInput>
    where?: TenantWhereInput
  }

  export type TenantUpdateToOneWithWhereWithoutPredefinedActTypesInput = {
    where?: TenantWhereInput
    data: XOR<TenantUpdateWithoutPredefinedActTypesInput, TenantUncheckedUpdateWithoutPredefinedActTypesInput>
  }

  export type TenantUpdateWithoutPredefinedActTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUpdateOneWithoutTenantNestedInput
  }

  export type TenantUncheckedUpdateWithoutPredefinedActTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patients?: PatientDetailsUncheckedUpdateManyWithoutTenantNestedInput
    staffMembers?: StaffMemberUncheckedUpdateManyWithoutTenantNestedInput
    FeatureFlag?: FeatureFlagUncheckedUpdateManyWithoutTenantNestedInput
    billingAddress?: AddressUncheckedUpdateOneWithoutTenantNestedInput
  }

  export type PredefinedActSubTypesUpsertWithWhereUniqueWithoutPredefinedActTypeInput = {
    where: PredefinedActSubTypesWhereUniqueInput
    update: XOR<PredefinedActSubTypesUpdateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedUpdateWithoutPredefinedActTypeInput>
    create: XOR<PredefinedActSubTypesCreateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedCreateWithoutPredefinedActTypeInput>
  }

  export type PredefinedActSubTypesUpdateWithWhereUniqueWithoutPredefinedActTypeInput = {
    where: PredefinedActSubTypesWhereUniqueInput
    data: XOR<PredefinedActSubTypesUpdateWithoutPredefinedActTypeInput, PredefinedActSubTypesUncheckedUpdateWithoutPredefinedActTypeInput>
  }

  export type PredefinedActSubTypesUpdateManyWithWhereWithoutPredefinedActTypeInput = {
    where: PredefinedActSubTypesScalarWhereInput
    data: XOR<PredefinedActSubTypesUpdateManyMutationInput, PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeInput>
  }

  export type PredefinedActSubTypesScalarWhereInput = {
    AND?: PredefinedActSubTypesScalarWhereInput | PredefinedActSubTypesScalarWhereInput[]
    OR?: PredefinedActSubTypesScalarWhereInput[]
    NOT?: PredefinedActSubTypesScalarWhereInput | PredefinedActSubTypesScalarWhereInput[]
    id?: StringFilter<"PredefinedActSubTypes"> | string
    name?: StringFilter<"PredefinedActSubTypes"> | string
    price?: DecimalFilter<"PredefinedActSubTypes"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"PredefinedActSubTypes"> | $Enums.Currency
    predefinedActTypeId?: StringFilter<"PredefinedActSubTypes"> | string
    createdAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
    updatedAt?: DateTimeFilter<"PredefinedActSubTypes"> | Date | string
  }

  export type QuotationLineUpsertWithWhereUniqueWithoutActTypeInput = {
    where: QuotationLineWhereUniqueInput
    update: XOR<QuotationLineUpdateWithoutActTypeInput, QuotationLineUncheckedUpdateWithoutActTypeInput>
    create: XOR<QuotationLineCreateWithoutActTypeInput, QuotationLineUncheckedCreateWithoutActTypeInput>
  }

  export type QuotationLineUpdateWithWhereUniqueWithoutActTypeInput = {
    where: QuotationLineWhereUniqueInput
    data: XOR<QuotationLineUpdateWithoutActTypeInput, QuotationLineUncheckedUpdateWithoutActTypeInput>
  }

  export type QuotationLineUpdateManyWithWhereWithoutActTypeInput = {
    where: QuotationLineScalarWhereInput
    data: XOR<QuotationLineUpdateManyMutationInput, QuotationLineUncheckedUpdateManyWithoutActTypeInput>
  }

  export type QuotationLineScalarWhereInput = {
    AND?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
    OR?: QuotationLineScalarWhereInput[]
    NOT?: QuotationLineScalarWhereInput | QuotationLineScalarWhereInput[]
    id?: StringFilter<"QuotationLine"> | string
    quotationId?: StringFilter<"QuotationLine"> | string
    comment?: StringFilter<"QuotationLine"> | string
    quantity?: IntFilter<"QuotationLine"> | number
    unitPrice?: DecimalFilter<"QuotationLine"> | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFilter<"QuotationLine"> | $Enums.Currency
    actTypeId?: StringFilter<"QuotationLine"> | string
    subActTypeId?: StringNullableFilter<"QuotationLine"> | string | null
    forecastDate?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
    createdAt?: DateTimeFilter<"QuotationLine"> | Date | string
    updatedAt?: DateTimeNullableFilter<"QuotationLine"> | Date | string | null
  }

  export type PredefinedActTypeCreateWithoutPredefinedActSubTypesInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPredefinedActTypesInput
    QuotationLine?: QuotationLineCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeUncheckedCreateWithoutPredefinedActSubTypesInput = {
    id?: string
    name: string
    tenantId: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    QuotationLine?: QuotationLineUncheckedCreateNestedManyWithoutActTypeInput
  }

  export type PredefinedActTypeCreateOrConnectWithoutPredefinedActSubTypesInput = {
    where: PredefinedActTypeWhereUniqueInput
    create: XOR<PredefinedActTypeCreateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedCreateWithoutPredefinedActSubTypesInput>
  }

  export type QuotationLineCreateWithoutSubActTypeInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    quotation: QuotationCreateNestedOneWithoutQuotationLinesInput
    actType: PredefinedActTypeCreateNestedOneWithoutQuotationLineInput
  }

  export type QuotationLineUncheckedCreateWithoutSubActTypeInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineCreateOrConnectWithoutSubActTypeInput = {
    where: QuotationLineWhereUniqueInput
    create: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput>
  }

  export type QuotationLineCreateManySubActTypeInputEnvelope = {
    data: QuotationLineCreateManySubActTypeInput | QuotationLineCreateManySubActTypeInput[]
    skipDuplicates?: boolean
  }

  export type PredefinedActTypeUpsertWithoutPredefinedActSubTypesInput = {
    update: XOR<PredefinedActTypeUpdateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedUpdateWithoutPredefinedActSubTypesInput>
    create: XOR<PredefinedActTypeCreateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedCreateWithoutPredefinedActSubTypesInput>
    where?: PredefinedActTypeWhereInput
  }

  export type PredefinedActTypeUpdateToOneWithWhereWithoutPredefinedActSubTypesInput = {
    where?: PredefinedActTypeWhereInput
    data: XOR<PredefinedActTypeUpdateWithoutPredefinedActSubTypesInput, PredefinedActTypeUncheckedUpdateWithoutPredefinedActSubTypesInput>
  }

  export type PredefinedActTypeUpdateWithoutPredefinedActSubTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPredefinedActTypesNestedInput
    QuotationLine?: QuotationLineUpdateManyWithoutActTypeNestedInput
  }

  export type PredefinedActTypeUncheckedUpdateWithoutPredefinedActSubTypesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    QuotationLine?: QuotationLineUncheckedUpdateManyWithoutActTypeNestedInput
  }

  export type QuotationLineUpsertWithWhereUniqueWithoutSubActTypeInput = {
    where: QuotationLineWhereUniqueInput
    update: XOR<QuotationLineUpdateWithoutSubActTypeInput, QuotationLineUncheckedUpdateWithoutSubActTypeInput>
    create: XOR<QuotationLineCreateWithoutSubActTypeInput, QuotationLineUncheckedCreateWithoutSubActTypeInput>
  }

  export type QuotationLineUpdateWithWhereUniqueWithoutSubActTypeInput = {
    where: QuotationLineWhereUniqueInput
    data: XOR<QuotationLineUpdateWithoutSubActTypeInput, QuotationLineUncheckedUpdateWithoutSubActTypeInput>
  }

  export type QuotationLineUpdateManyWithWhereWithoutSubActTypeInput = {
    where: QuotationLineScalarWhereInput
    data: XOR<QuotationLineUpdateManyMutationInput, QuotationLineUncheckedUpdateManyWithoutSubActTypeInput>
  }

  export type PatientDetailsCreateWithoutQuotationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutPatientDetailsInput
    tenant: TenantCreateNestedOneWithoutPatientsInput
    notes?: NoteCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsUncheckedCreateWithoutQuotationInput = {
    id?: string
    userId: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    notes?: NoteUncheckedCreateNestedManyWithoutPatientDetailsInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientDetailsInput
    AccountingEntry?: AccountingEntryUncheckedCreateNestedManyWithoutPatientDetailsInput
  }

  export type PatientDetailsCreateOrConnectWithoutQuotationInput = {
    where: PatientDetailsWhereUniqueInput
    create: XOR<PatientDetailsCreateWithoutQuotationInput, PatientDetailsUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationLineCreateWithoutQuotationInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    actType: PredefinedActTypeCreateNestedOneWithoutQuotationLineInput
    subActType?: PredefinedActSubTypesCreateNestedOneWithoutQuotationLineInput
  }

  export type QuotationLineUncheckedCreateWithoutQuotationInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineCreateOrConnectWithoutQuotationInput = {
    where: QuotationLineWhereUniqueInput
    create: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationLineCreateManyQuotationInputEnvelope = {
    data: QuotationLineCreateManyQuotationInput | QuotationLineCreateManyQuotationInput[]
    skipDuplicates?: boolean
  }

  export type DocumentCreateWithoutQuotationInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    createdBy: StaffMemberCreateNestedOneWithoutCreatedDocumentsInput
    updatedBy?: StaffMemberCreateNestedOneWithoutUpdatedDocumentsInput
    note?: NoteCreateNestedOneWithoutFilesInput
  }

  export type DocumentUncheckedCreateWithoutQuotationInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
  }

  export type DocumentCreateOrConnectWithoutQuotationInput = {
    where: DocumentWhereUniqueInput
    create: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
  }

  export type PatientDetailsUpsertWithoutQuotationInput = {
    update: XOR<PatientDetailsUpdateWithoutQuotationInput, PatientDetailsUncheckedUpdateWithoutQuotationInput>
    create: XOR<PatientDetailsCreateWithoutQuotationInput, PatientDetailsUncheckedCreateWithoutQuotationInput>
    where?: PatientDetailsWhereInput
  }

  export type PatientDetailsUpdateToOneWithWhereWithoutQuotationInput = {
    where?: PatientDetailsWhereInput
    data: XOR<PatientDetailsUpdateWithoutQuotationInput, PatientDetailsUncheckedUpdateWithoutQuotationInput>
  }

  export type PatientDetailsUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type QuotationLineUpsertWithWhereUniqueWithoutQuotationInput = {
    where: QuotationLineWhereUniqueInput
    update: XOR<QuotationLineUpdateWithoutQuotationInput, QuotationLineUncheckedUpdateWithoutQuotationInput>
    create: XOR<QuotationLineCreateWithoutQuotationInput, QuotationLineUncheckedCreateWithoutQuotationInput>
  }

  export type QuotationLineUpdateWithWhereUniqueWithoutQuotationInput = {
    where: QuotationLineWhereUniqueInput
    data: XOR<QuotationLineUpdateWithoutQuotationInput, QuotationLineUncheckedUpdateWithoutQuotationInput>
  }

  export type QuotationLineUpdateManyWithWhereWithoutQuotationInput = {
    where: QuotationLineScalarWhereInput
    data: XOR<QuotationLineUpdateManyMutationInput, QuotationLineUncheckedUpdateManyWithoutQuotationInput>
  }

  export type DocumentUpsertWithoutQuotationInput = {
    update: XOR<DocumentUpdateWithoutQuotationInput, DocumentUncheckedUpdateWithoutQuotationInput>
    create: XOR<DocumentCreateWithoutQuotationInput, DocumentUncheckedCreateWithoutQuotationInput>
    where?: DocumentWhereInput
  }

  export type DocumentUpdateToOneWithWhereWithoutQuotationInput = {
    where?: DocumentWhereInput
    data: XOR<DocumentUpdateWithoutQuotationInput, DocumentUncheckedUpdateWithoutQuotationInput>
  }

  export type DocumentUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedDocumentsNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedDocumentsNestedInput
    note?: NoteUpdateOneWithoutFilesNestedInput
  }

  export type DocumentUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
  }

  export type QuotationCreateWithoutQuotationLinesInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patientDetails: PatientDetailsCreateNestedOneWithoutQuotationInput
    document?: DocumentCreateNestedOneWithoutQuotationInput
  }

  export type QuotationUncheckedCreateWithoutQuotationLinesInput = {
    id?: string
    patientDetailsId: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    document?: DocumentUncheckedCreateNestedOneWithoutQuotationInput
  }

  export type QuotationCreateOrConnectWithoutQuotationLinesInput = {
    where: QuotationWhereUniqueInput
    create: XOR<QuotationCreateWithoutQuotationLinesInput, QuotationUncheckedCreateWithoutQuotationLinesInput>
  }

  export type PredefinedActTypeCreateWithoutQuotationLineInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    tenant: TenantCreateNestedOneWithoutPredefinedActTypesInput
    predefinedActSubTypes?: PredefinedActSubTypesCreateNestedManyWithoutPredefinedActTypeInput
  }

  export type PredefinedActTypeUncheckedCreateWithoutQuotationLineInput = {
    id?: string
    name: string
    tenantId: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedCreateNestedManyWithoutPredefinedActTypeInput
  }

  export type PredefinedActTypeCreateOrConnectWithoutQuotationLineInput = {
    where: PredefinedActTypeWhereUniqueInput
    create: XOR<PredefinedActTypeCreateWithoutQuotationLineInput, PredefinedActTypeUncheckedCreateWithoutQuotationLineInput>
  }

  export type PredefinedActSubTypesCreateWithoutQuotationLineInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
    predefinedActType: PredefinedActTypeCreateNestedOneWithoutPredefinedActSubTypesInput
  }

  export type PredefinedActSubTypesUncheckedCreateWithoutQuotationLineInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    predefinedActTypeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PredefinedActSubTypesCreateOrConnectWithoutQuotationLineInput = {
    where: PredefinedActSubTypesWhereUniqueInput
    create: XOR<PredefinedActSubTypesCreateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedCreateWithoutQuotationLineInput>
  }

  export type QuotationUpsertWithoutQuotationLinesInput = {
    update: XOR<QuotationUpdateWithoutQuotationLinesInput, QuotationUncheckedUpdateWithoutQuotationLinesInput>
    create: XOR<QuotationCreateWithoutQuotationLinesInput, QuotationUncheckedCreateWithoutQuotationLinesInput>
    where?: QuotationWhereInput
  }

  export type QuotationUpdateToOneWithWhereWithoutQuotationLinesInput = {
    where?: QuotationWhereInput
    data: XOR<QuotationUpdateWithoutQuotationLinesInput, QuotationUncheckedUpdateWithoutQuotationLinesInput>
  }

  export type QuotationUpdateWithoutQuotationLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutQuotationNestedInput
    document?: DocumentUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutQuotationLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: DocumentUncheckedUpdateOneWithoutQuotationNestedInput
  }

  export type PredefinedActTypeUpsertWithoutQuotationLineInput = {
    update: XOR<PredefinedActTypeUpdateWithoutQuotationLineInput, PredefinedActTypeUncheckedUpdateWithoutQuotationLineInput>
    create: XOR<PredefinedActTypeCreateWithoutQuotationLineInput, PredefinedActTypeUncheckedCreateWithoutQuotationLineInput>
    where?: PredefinedActTypeWhereInput
  }

  export type PredefinedActTypeUpdateToOneWithWhereWithoutQuotationLineInput = {
    where?: PredefinedActTypeWhereInput
    data: XOR<PredefinedActTypeUpdateWithoutQuotationLineInput, PredefinedActTypeUncheckedUpdateWithoutQuotationLineInput>
  }

  export type PredefinedActTypeUpdateWithoutQuotationLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tenant?: TenantUpdateOneRequiredWithoutPredefinedActTypesNestedInput
    predefinedActSubTypes?: PredefinedActSubTypesUpdateManyWithoutPredefinedActTypeNestedInput
  }

  export type PredefinedActTypeUncheckedUpdateWithoutQuotationLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeNestedInput
  }

  export type PredefinedActSubTypesUpsertWithoutQuotationLineInput = {
    update: XOR<PredefinedActSubTypesUpdateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedUpdateWithoutQuotationLineInput>
    create: XOR<PredefinedActSubTypesCreateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedCreateWithoutQuotationLineInput>
    where?: PredefinedActSubTypesWhereInput
  }

  export type PredefinedActSubTypesUpdateToOneWithWhereWithoutQuotationLineInput = {
    where?: PredefinedActSubTypesWhereInput
    data: XOR<PredefinedActSubTypesUpdateWithoutQuotationLineInput, PredefinedActSubTypesUncheckedUpdateWithoutQuotationLineInput>
  }

  export type PredefinedActSubTypesUpdateWithoutQuotationLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActType?: PredefinedActTypeUpdateOneRequiredWithoutPredefinedActSubTypesNestedInput
  }

  export type PredefinedActSubTypesUncheckedUpdateWithoutQuotationLineInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    predefinedActTypeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientDetailsCreateManyTenantInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type StaffMemberCreateManyTenantInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type FeatureFlagCreateManyTenantInput = {
    id?: string
    key: $Enums.FeatureFlagKey
    isEnabled: boolean
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PredefinedActTypeCreateManyTenantInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientDetailsUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientDetailsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StaffMemberUpdateWithoutTenantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutStaffMemberNestedInput
    createdDocuments?: DocumentUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdDocuments?: DocumentUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedDocuments?: DocumentUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdNotes?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedNotes?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutStaffMemberNestedInput
  }

  export type StaffMemberUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeatureFlagUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeatureFlagUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeatureFlagUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: EnumFeatureFlagKeyFieldUpdateOperationsInput | $Enums.FeatureFlagKey
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PredefinedActTypeUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUpdateManyWithoutPredefinedActTypeNestedInput
    QuotationLine?: QuotationLineUpdateManyWithoutActTypeNestedInput
  }

  export type PredefinedActTypeUncheckedUpdateWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    predefinedActSubTypes?: PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeNestedInput
    QuotationLine?: QuotationLineUncheckedUpdateManyWithoutActTypeNestedInput
  }

  export type PredefinedActTypeUncheckedUpdateManyWithoutTenantInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyUserInput = {
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type SessionCreateManyUserInput = {
    sessionToken: string
    expires: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AuthenticatorCreateManyUserInput = {
    credentialID: string
    providerAccountId: string
    credentialPublicKey: string
    counter: number
    credentialDeviceType: string
    credentialBackedUp: boolean
    transports?: string | null
  }

  export type PatientDetailsCreateManyUserInput = {
    id?: string
    tenantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AuthenticatorUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AuthenticatorUncheckedUpdateManyWithoutUserInput = {
    credentialID?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    credentialPublicKey?: StringFieldUpdateOperationsInput | string
    counter?: IntFieldUpdateOperationsInput | number
    credentialDeviceType?: StringFieldUpdateOperationsInput | string
    credentialBackedUp?: BoolFieldUpdateOperationsInput | boolean
    transports?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PatientDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    tenant?: TenantUpdateOneRequiredWithoutPatientsNestedInput
    notes?: NoteUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    notes?: NoteUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientDetailsNestedInput
    AccountingEntry?: AccountingEntryUncheckedUpdateManyWithoutPatientDetailsNestedInput
    Quotation?: QuotationUncheckedUpdateManyWithoutPatientDetailsNestedInput
  }

  export type PatientDetailsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    tenantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DocumentCreateManyCreatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type DocumentCreateManyUpdatedByInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    contentType: string
    noteId?: string | null
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type NoteCreateManyCreatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string | null
    updatedById?: string | null
    patientDetailsId: string
    isDeleted?: boolean
  }

  export type NoteCreateManyUpdatedByInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    patientDetailsId: string
    isDeleted?: boolean
  }

  export type AppointmentCreateManyStaffMemberInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type DocumentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedDocumentsNestedInput
    note?: NoteUpdateOneWithoutFilesNestedInput
    quotation?: QuotationUpdateOneWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedDocumentsNestedInput
    note?: NoteUpdateOneWithoutFilesNestedInput
    quotation?: QuotationUpdateOneWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedNotesNestedInput
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutNotesNestedInput
    files?: DocumentUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    files?: DocumentUncheckedUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NoteUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutNotesNestedInput
    files?: DocumentUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    files?: DocumentUncheckedUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentUpdateWithoutStaffMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutAppointmentNestedInput
    reportNote?: NoteUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutStaffMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoteCreateManyPatientDetailsInput = {
    id?: string
    content: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    isDeleted?: boolean
  }

  export type AppointmentCreateManyPatientDetailsInput = {
    id?: string
    status: $Enums.AppointmentStatus
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    reportNoteId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type AccountingEntryCreateManyPatientDetailsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    paymentMethod: $Enums.PaymentMethod
    transactionReference?: string | null
    type: $Enums.AccountingEntryType
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationCreateManyPatientDetailsInput = {
    id?: string
    name: string
    status: $Enums.QuotationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoteUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedNotesNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedNotesNestedInput
    files?: DocumentUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    files?: DocumentUncheckedUpdateManyWithoutNoteNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutReportNoteNestedInput
  }

  export type NoteUncheckedUpdateManyWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staffMember?: StaffMemberUpdateOneRequiredWithoutAppointmentNestedInput
    reportNote?: NoteUpdateOneWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportNoteId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountingEntryUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountingEntryUncheckedUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AccountingEntryUncheckedUpdateManyWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionReference?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumAccountingEntryTypeFieldUpdateOperationsInput | $Enums.AccountingEntryType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationLines?: QuotationLineUpdateManyWithoutQuotationNestedInput
    document?: DocumentUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    quotationLines?: QuotationLineUncheckedUpdateManyWithoutQuotationNestedInput
    document?: DocumentUncheckedUpdateOneWithoutQuotationNestedInput
  }

  export type QuotationUncheckedUpdateManyWithoutPatientDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumQuotationStatusFieldUpdateOperationsInput | $Enums.QuotationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DocumentCreateManyNoteInput = {
    id?: string
    name: string
    path: string
    createdAt?: Date | string
    createdById: string
    updatedAt?: Date | string | null
    updatedById?: string | null
    contentType: string
    visibleTo?: DocumentCreatevisibleToInput | $Enums.Role[]
    quotationId?: string | null
  }

  export type AppointmentCreateManyReportNoteInput = {
    id?: string
    status: $Enums.AppointmentStatus
    patientDetailsId: string
    staffMemberId: string
    startAt: Date | string
    endAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type DocumentUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    createdBy?: StaffMemberUpdateOneRequiredWithoutCreatedDocumentsNestedInput
    updatedBy?: StaffMemberUpdateOneWithoutUpdatedDocumentsNestedInput
    quotation?: QuotationUpdateOneWithoutDocumentNestedInput
  }

  export type DocumentUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DocumentUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    contentType?: StringFieldUpdateOperationsInput | string
    visibleTo?: DocumentUpdatevisibleToInput | $Enums.Role[]
    quotationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AppointmentUpdateWithoutReportNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patientDetails?: PatientDetailsUpdateOneRequiredWithoutAppointmentNestedInput
    staffMember?: StaffMemberUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutReportNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AppointmentUncheckedUpdateManyWithoutReportNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    patientDetailsId?: StringFieldUpdateOperationsInput | string
    staffMemberId?: StringFieldUpdateOperationsInput | string
    startAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PredefinedActSubTypesCreateManyPredefinedActTypeInput = {
    id?: string
    name: string
    price: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuotationLineCreateManyActTypeInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PredefinedActSubTypesUpdateWithoutPredefinedActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    QuotationLine?: QuotationLineUpdateManyWithoutSubActTypeNestedInput
  }

  export type PredefinedActSubTypesUncheckedUpdateWithoutPredefinedActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    QuotationLine?: QuotationLineUncheckedUpdateManyWithoutSubActTypeNestedInput
  }

  export type PredefinedActSubTypesUncheckedUpdateManyWithoutPredefinedActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuotationLineUpdateWithoutActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quotation?: QuotationUpdateOneRequiredWithoutQuotationLinesNestedInput
    subActType?: PredefinedActSubTypesUpdateOneWithoutQuotationLineNestedInput
  }

  export type QuotationLineUncheckedUpdateWithoutActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineUncheckedUpdateManyWithoutActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineCreateManySubActTypeInput = {
    id?: string
    quotationId: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineUpdateWithoutSubActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quotation?: QuotationUpdateOneRequiredWithoutQuotationLinesNestedInput
    actType?: PredefinedActTypeUpdateOneRequiredWithoutQuotationLineNestedInput
  }

  export type QuotationLineUncheckedUpdateWithoutSubActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineUncheckedUpdateManyWithoutSubActTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    quotationId?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineCreateManyQuotationInput = {
    id?: string
    comment: string
    quantity: number
    unitPrice: Decimal | DecimalJsLike | number | string
    currency: $Enums.Currency
    actTypeId: string
    subActTypeId?: string | null
    forecastDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type QuotationLineUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actType?: PredefinedActTypeUpdateOneRequiredWithoutQuotationLineNestedInput
    subActType?: PredefinedActSubTypesUpdateOneWithoutQuotationLineNestedInput
  }

  export type QuotationLineUncheckedUpdateWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuotationLineUncheckedUpdateManyWithoutQuotationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    unitPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    actTypeId?: StringFieldUpdateOperationsInput | string
    subActTypeId?: NullableStringFieldUpdateOperationsInput | string | null
    forecastDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TenantCountOutputTypeDefaultArgs instead
     */
    export type TenantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffMemberCountOutputTypeDefaultArgs instead
     */
    export type StaffMemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffMemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDetailsCountOutputTypeDefaultArgs instead
     */
    export type PatientDetailsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDetailsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteCountOutputTypeDefaultArgs instead
     */
    export type NoteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PredefinedActTypeCountOutputTypeDefaultArgs instead
     */
    export type PredefinedActTypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PredefinedActTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PredefinedActSubTypesCountOutputTypeDefaultArgs instead
     */
    export type PredefinedActSubTypesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PredefinedActSubTypesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuotationCountOutputTypeDefaultArgs instead
     */
    export type QuotationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuotationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StaffMemberDefaultArgs instead
     */
    export type StaffMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StaffMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDetailsDefaultArgs instead
     */
    export type PatientDetailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDetailsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountingEntryDefaultArgs instead
     */
    export type AccountingEntryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountingEntryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuthenticatorDefaultArgs instead
     */
    export type AuthenticatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuthenticatorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoteDefaultArgs instead
     */
    export type NoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DocumentDefaultArgs instead
     */
    export type DocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentDefaultArgs instead
     */
    export type AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppointmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeatureFlagDefaultArgs instead
     */
    export type FeatureFlagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeatureFlagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PredefinedActTypeDefaultArgs instead
     */
    export type PredefinedActTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PredefinedActTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PredefinedActSubTypesDefaultArgs instead
     */
    export type PredefinedActSubTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PredefinedActSubTypesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuotationDefaultArgs instead
     */
    export type QuotationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuotationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuotationLineDefaultArgs instead
     */
    export type QuotationLineArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuotationLineDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}